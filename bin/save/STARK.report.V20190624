#!/bin/bash
#################################
##
## NGS environment
##
#################################

SCRIPT_NAME="STARKReport"
SCRIPT_DESCRIPTION="STARK Report"
SCRIPT_RELEASE="0.9b"
SCRIPT_DATE="19/06/2019"
SCRIPT_AUTHOR="Antony Le Bechec"
SCRIPT_COPYRIGHT="HUS"
SCRIPT_LICENCE="GNU-AGPL"

# Realse note
RELEASE_NOTES=$RELEASE_NOTES"# 0.9b-19/06/2019: Script creation\n";

# Script folder
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# Configuration
ENV_CONFIG=$(find $SCRIPT_DIR/.. -name config.app)
source $ENV_CONFIG 1>/dev/null 2>/dev/null


# Header
function header () {
	echo "#######################################";
	echo "# $SCRIPT_NAME [$SCRIPT_RELEASE-$SCRIPT_DATE]";
	echo "# $SCRIPT_DESCRIPTION ";
	echo "# $SCRIPT_AUTHOR @ $SCRIPT_COPYRIGHT Â© $SCRIPT_LICENCE";
	echo "#######################################";
}

# Release
function release () {
	echo "# RELEASE NOTES:";
	echo -e $RELEASE_NOTES
}

# Usage
function usage {
	echo "# USAGE: $(basename $0) -f analysis -p project -g group -u user -s sample -e env -d date [-h] [options...]";
	echo "#";
	echo "### This script generates a readable report with quality and metrics for a sample.";
	echo "#";
	echo "# -f|--analysis=<STRING>                         Analysis name (required).";
	echo "# -p|--project=<STRING>                          Project name (not required)";
	echo "# -g|--group=<STRING>                            Group name (not required)";
	echo "# -u|--user=<STRING>                             User name (not required)";
	echo "# -s|--sample=<STRING>                           Sample name (required)";
	echo "# -e|--application=<STRING>                      Application (required)";
	echo "# -r|--results=<FOLDER>                          Result folder (not required)";
	echo "# -i|--pipelines=<STRING>                        Pipelines if different from Pipelines option in the application (not required)";
	echo "# -k|--date=<STRING>                             Release/ID/Date of the current analysis (not required)";
	echo "# -o|--output=<STRING>                           Output file pattern (not required)";
	echo "# -t|--output_type=<STRING>                      Output type file, either html (default html)";
	echo "# -v|--verbose                                   Verbose mode";
	echo "# -d|--debug                                     Debug mode";
	echo "# -n|--release                                   Script Release";
	echo "# -h|--help                                      Help message";
	echo "#";
	#echo -e "#\n# RUN Analysis\n################";
	#$STARK_FOLDER_BIN/launch.sh -h | grep "# [ |-]";
	#echo -e "#\n# SAMPLE Analysis\n###################";
	#$STARK_FOLDER_BIN/launch.sample.sh -h | grep "# [ |-]";
}


####################################################################################################################################
# Getting parameters from the input
#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# ":" tells that the option has a required argument, "::" tells that the option has an optional argument, no ":" tells no argument
ARGS=$(getopt -o "f:p:g:u:s:e:r:i:k:o:t:vdnh" --long "analysis:,project:,group:,user:,sample:,env:,app:,application:,results:,pipelines:,date:,output:,output_type:,verbose,debug,release,help" -- "$@" 2> /dev/null)
if [ $? -ne 0 ]; then
	:
	echo "#[ERROR] Error in the argument list:";
	echo "#[ERROR] $@"
	echo ""
	usage;
	exit;
fi;


PARAM=$@
DEBUG=0
VERBOSE=0

eval set -- "$ARGS"
while true
do
	#echo "$1=$2"
	#echo "Eval opts";
	case "$1" in
		-r|--results)
			RESULTS_FOLDER_INPUT="$2"
			shift 2
			;;
		-f|--analysis)
			ANALYSIS="$2"
			shift 2
			;;
		-p|--project)
			PROJECT_INPUT="$2"
			shift 2
			;;
		-g|--group)
			GROUP_INPUT="$2"
			shift 2
			;;
		-u|--user)
			USER_INPUT="$2"
			shift 2
			;;
		-s|--sample)
			SAMPLE="$2"
			shift 2
			;;
		-e|--env|--app|--application)
			APP="$2"
			shift 2
			;;
		-i|--pipelines)
			PIPELINES_INPUT="$2"
			PIPELINES_INPUT=$(echo $PIPELINES_INPUT | tr "," " ")
			shift 2
			;;
		-k|--date)
			DATE="$2"
			shift 2
			;;
		-o|--output)
			OUTPUT_INPUT="$2"
			shift 2
			;;
		-t|--output_type)
			OUTPUT_TYPE_INPUT="$2"
			shift 2
			;;
		-h|--help)
			usage
			exit 0
			;;
		-v|--verbose)
			VERBOSE=1
			shift 1
			;;
		-d|--debug)
			DEBUG=1
			shift 1
			;;
		--) shift
			break
			;;
		*) 	echo "Option $1 is not recognized. " "Use -h or --help to display the help." && \
			exit 1
			;;
	esac
done

# header
(($NO_HEADER)) || header;


# Example:
# STARK.report -f RUN_TEST_TAG7 -s P1408 -e /STARK/tools/stark/0.9.18d/config/apps/SOLIDTUMOR.app -i bwamem.gatkUG_SOLIDTUMOR.howard,bwamem.gatkHC_SOLIDTUMOR.howard,bwamem.VarScan_SOLIDTUMOR.howard -k 20190612-205904 -r /STARK/output/results


####################################################################################################################################
# Checking the input parameter
#--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
if [ -z "$ANALYSIS" ] && [ -z "$SAMPLE" ] && [ -z "$APP" ] && ((!$DEBUG)); then
	echo "#[ERROR] Required parameter: --analysis, --sample, and --application. Use --help to display the help." && echo "" && usage && exit 1;
fi
#--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



# APPLICATION
###############

#echo "APP=$APP"; exit;
(($VERBOSE)) && [ ! -z "$APP" ] && echo "#[INFO] Search Application '$APP'"

ENV=$(find_app "$APP" "$STARK_FOLDER_APPS")
source_app "$APP" "$STARK_FOLDER_APPS" 1
APP_NAME=$(name_app "$APP" "$STARK_FOLDER_APPS");

#export ENV
#export APP

(($VERBOSE)) && [ ! -z "$APP" ] && [ ! -z "$ENV" ] && echo "#[INFO] Application '$APP' found ('$ENV')"
(($VERBOSE)) && [ ! -z "$APP" ] && [ -z "$ENV" ] && echo "#[INFO] Application '$APP' NOT found"



# Parameters
#############

# PIPELINES
if [ "$PIPELINES_INPUT" != "" ]; then
	PIPELINES=$PIPELINES_INPUT
fi;

if [ -z "$LATEX" ]; then
	LATEX="latex";
fi;

if [ ! -z $GROUP_INPUT ]; then
	GROUP=$GROUP_INPUT
fi;
if [ -z $GROUP ]; then
	GROUP="UNKNOWN"
fi;

if [ ! -z $PROJECT_INPUT ]; then
	PROJECT=$PROJECT_INPUT
fi;
if [ -z $PROJECT ]; then
	PROJECT="UNKNOWN"
fi;

if [ ! -z $USER_INPUT ]; then
	USER=$USER_INPUT
fi;
if [ -z $USER ]; then
	USER="UNKNOWN"
fi;

if [ -z $DATE ]; then
	DATE=$(date '+%Y%m%d-%H%M%S')
fi;

if [ ! -z $TMP_FOLDER_TMP ]; then
	TMP_REPORT=$TMP_FOLDER_TMP;
else
	TMP_REPORT=/tmp;
fi;

if [ ! -z $NB_VARIANT_LIMIT ]; then
	NB_VARIANT_LIMIT=$NB_VARIANT_LIMIT;
else
	NB_VARIANT_LIMIT=20;
fi;

if [ ! -z $RESULTS_FOLDER_INPUT ] && [ -d $RESULTS_FOLDER_INPUT ]; then
	RESULTS_FOLDER=$RESULTS_FOLDER_INPUT;
fi;

if [ ! -z $OUTPUT_INPUT ]; then
	OUTPUT=$OUTPUT_INPUT
else
	OUTPUT=$RESULTS_FOLDER/$ANALYSIS/$SAMPLE/$SAMPLE.reports/$SAMPLE.$DATE.stark.report
fi;

if [ -z $OUTPUT_TYPE_INPUT ]; then
	OUTPUT_TYPE="html";
fi;


# Other param


# LOGO
########
# STARK_LOGO_small_1.png

STARK_LOGO="$STARK_FOLDER_DOCS/logo/STARK_LOGO_medium_1.png"

[ ! -e "$LOGO" ] && LOGO="$STARK_FOLDER_DOCS/logo/STARK_LOGO_medium_1.png"
if [ ! -e $LOGO ]; then LOGO=""; fi;

# FAVICON
FAVICON="$STARK_FOLDER_DOCS/logo/favicon.png"


# REPORT TMP DIR
##################
# creation and verification of the directory containing the sample report

REPORTDIR="$TMP_REPORT/STARK_REPORT_$RANDOM"
mkdir -p $REPORTDIR;
[ ! -e $REPORTDIR ] && echo "$REPORTDIR can't be created ! Exit.";


# LOG FILE
###########
# creation and verification of the log file

LOGFILE="$REPORTDIR/latex_report.$DATE.log"
if [ ! -e "$LOGFILE" ] ; then
    touch "$LOGFILE" || (echo "$LOGFILE can't be created ! Exit." && exit 1);
fi

# OUTPUT FILES
################
# creation and verification of the tex file report

HTMLFOLDER_EXT=".folder"

# OUTPUT files
OUTPUT_HTMLFILE=$OUTPUT.html
OUTPUT_HTMLFOLDER=$(basename $OUTPUT_HTMLFILE)$HTMLFOLDER_EXT
OUTPUT_HTMLDIR=$OUTPUT.html.folder
OUTPUT_TEXFILE=$OUTPUT.tex
OUTPUT_PDFFILE=$OUTPUT.pdf

# BASENAME
OUTPUT_BASENAME=$(basename $OUTPUT)

# TMP files
HTMLFILE="$REPORTDIR/$OUTPUT_BASENAME.html"
HTMLFOLDER=$(basename $HTMLFILE)$HTMLFOLDER_EXT
HTMLDIR="$REPORTDIR/$HTMLFOLDER"
TEXFILE="$REPORTDIR/$OUTPUT_BASENAME.tex"
PDFFILE="$REPORTDIR/$OUTPUT_BASENAME.pdf"
mkdir -p $HTMLDIR $OUTPUT_HTMLDIR

# PIPELINES
##############

ALIGNERS=$(echo $PIPELINES | tr " " "\n"  | cut -d. -f1 | sort | uniq | tr "\n" " ")
CALLERS=$(echo $PIPELINES | tr " " "\n"  | cut -d. -f2 | sort | uniq | tr "\n" " ")
ALIGNERS_CALLERS=$(echo $PIPELINES | tr " " "\n"  | cut -d. -f1-2 | sort | uniq | tr "\n" " ")
ANNOTATORS=$(echo $PIPELINES | tr " " "\n"  | cut -d. -f3 | sort | uniq | tr "\n" " ")
ALIGNERS_CALLERS_ANNOTATORS=$(echo $PIPELINES | tr " " "\n"  | cut -d. -f1-3 | sort | uniq | tr "\n" " ")


# SAMPLEID
###########

SAMPLEID=$SAMPLE


# GROUP/PROJECT/USER
######################

SAMPLE_GROUP=$GROUP; if [ "$SAMPLE_GROUP" == "" ]; then SAMPLE_GROUP="UNKNOWN"; fi;
SAMPLE_PROJECT=$PROJECT; if [ "$SAMPLE_PROJECT" == "" ]; then SAMPLE_PROJECT="UNKNOWN"; fi;
SAMPLE_USER=$USER; if [ "$SAMPLE_USER" == "" ]; then SAMPLE_USER="UNKNOWN"; fi;
if [ -z "$APP" ]; then APP="DEFAULT"; fi;



# DESIGN
#########

MANIFEST_NAME_FILE=$RESULTS_FOLDER/$ANALYSIS/$SAMPLE/$SAMPLE.manifest_name
BED_NAME_FILE=$RESULTS_FOLDER/$ANALYSIS/$SAMPLE/$SAMPLE.bed_name
GENES_LIST_FILE=$RESULTS_FOLDER/$ANALYSIS/$SAMPLE/$SAMPLE.list.genes
MANIFEST_NAME=""
MANIFEST_SOURCE=""
BED_NAME=""
BED_SOURCE=""
if [ -s "$MANIFEST_NAME_FILE" ]; then
	MANIFEST_NAME=$(basename $(awk -F"\t" '{print $1}' $MANIFEST_NAME_FILE)) # awk -F\t '{print $2}'
	MANIFEST_SOURCE=$(awk -F"\t" '{print $2}' $MANIFEST_NAME_FILE)
fi;
if [ -s "$BED_NAME_FILE" ]; then
	BED_NAME=$(basename $(awk -F"\t" '{print $1}' $BED_NAME_FILE))
	BED_SOURCE=$(awk -F"\t" '{print $2}' $BED_NAME_FILE)
fi;
if [ -s "$GENES_LIST_FILE" ]; then
	GENES_LIST=$(cat $GENES_LIST_FILE | tr "\n" " ")
	#BED_SOURCE=$(awk -F"\t" '{print $2}' $BED_NAME_FILE)
fi;

if [ -z "$MANIFEST_NAME" ]; then
	MANIFEST_NAME="unknown";
fi;
if [ -z "$BED_NAME" ]; then
	BED_NAME="unknown";
fi;
if [ ! -z "$MANIFEST_SOURCE" ]; then
	MANIFEST_SOURCE=" ($MANIFEST_SOURCE)";
fi;
if [ ! -z "$BED_SOURCE" ]; then
	BED_SOURCE=" ($BED_SOURCE)";
fi;



### DEBUG ###

if (($DEBUG)); then
	echo "

	### DEBUG ###

	ANALYSIS:             $ANALYSIS
	SAMPLE:               $SAMPLE/$SAMPLEID
	APPLICATION:          $APP
	PIPELINES:            $PIPELINES
	   ALIGNERS:          $ALIGNERS
	   CALLERS:           $CALLERS
	   ALIGNERS_CALLERS   $ALIGNERS_CALLERS
	   ANNOTATORS:        $ANNOTATORS
	   ALIGNERS_CALLERS_A $ALIGNERS_CALLERS_ANNOTATORS
	GROUP:                $GROUP
	PROJECT:              $PROJECT
	USER:                 $USER
	RESULTS_FOLDER:       $RESULTS_FOLDER
	DATE:                 $DATE
	OUTPUT:               $OUTPUT
	   OUTPUT_BASENAME:   $OUTPUT_BASENAME
	   OUTPUT_HTMLFILE:   $OUTPUT_HTMLFILE
	   OUTPUT_HTMLDIR:    $OUTPUT_HTMLDIR
	   OUTPUT_TEXFILE:    $OUTPUT_TEXFILE
	   OUTPUT_PDFFILE:    $OUTPUT_PDFFILE
	OUTPUT_TYPE:          $OUTPUT_TYPE
   	SAMPLE_GROUP:         $SAMPLE_GROUP
	SAMPLE_PROJECT:       $SAMPLE_PROJECT
	SAMPLE_USER:          $SAMPLE_USER

	DESIGN
	MANIFEST_NAME:        $MANIFEST_NAME
	MANIFEST_SOURCE:      $MANIFEST_SOURCE
	BED_NAME:             $BED_NAME
	BED_SOURCE:           $BED_SOURCE
	GENES_LIST:           $GENES_LIST

	TMP_REPORT:           $TMP_REPORT
	   HTMLFILE:          $HTMLFILE
	   HTMLDIR:           $HTMLDIR
	   TEXFILE:           $TEXFILE
	   PDFFILE:           $PDFFILE
	NB_VARIANT_LIMIT:     $NB_VARIANT_LIMIT

	REPORTDIR:            $REPORTDIR
	LOGFILE:              $LOGFILE

	"
fi;


# HEADER
##########


HTMLFILE_HEADER=$HTMLFILE".header"



cp -R $STARK_FOLDER_BIN/html/assets/* $HTMLDIR/
cp $FAVICON $HTMLDIR/favicon.ico



echo '
	<!-- Site made with Mobirise Website Builder v4.10.3, https://mobirise.com -->
	<meta charset="UTF-8">
	<meta http-equiv="X-UA-Compatible" content="IE=edge">
	<meta name="generator" content="Mobirise v4.10.3, mobirise.com">
	<meta name="viewport" content="width=device-width, initial-scale=1, minimum-scale=1">
	<link rel="shortcut icon" href="'$HTMLFOLDER/favicon.ico'" type="image/x-icon">
	<meta name="description" content="STARK Report">

	<title>STARK Report - '$SAMPLEID'</title>
	<link rel="stylesheet" href="'$HTMLFOLDER'/web/assets/mobirise-icons/mobirise-icons.css">
	<link rel="stylesheet" href="'$HTMLFOLDER'/tether/tether.min.css">
	<link rel="stylesheet" href="'$HTMLFOLDER'/bootstrap/css/bootstrap.min.css">
	<link rel="stylesheet" href="'$HTMLFOLDER'/bootstrap/css/bootstrap-grid.min.css">
	<link rel="stylesheet" href="'$HTMLFOLDER'/bootstrap/css/bootstrap-reboot.min.css">
	<link rel="stylesheet" href="'$HTMLFOLDER'/dropdown/css/style.css">
	<link rel="stylesheet" href="'$HTMLFOLDER'/as-pie-progress/css/progress.min.css">
	<link rel="stylesheet" href="'$HTMLFOLDER'/datatables/data-tables.bootstrap4.min.css">
	<link rel="stylesheet" href="'$HTMLFOLDER'/theme/css/style.css">
	<link rel="stylesheet" href="'$HTMLFOLDER'/gallery/style.css">
	<link rel="stylesheet" href="'$HTMLFOLDER'/mobirise/css/mbr-additional.css" type="text/css">

' > $HTMLFILE_HEADER


# SCRIPTS
###########

HTMLFILE_SCRIPTS=$HTMLFILE".scripts"

echo '
	<script src="'$HTMLFOLDER'/web/assets/jquery/jquery.min.js"></script>
	<script src="'$HTMLFOLDER'/popper/popper.min.js"></script>
	<script src="'$HTMLFOLDER'/tether/tether.min.js"></script>
	<script src="'$HTMLFOLDER'/bootstrap/js/bootstrap.min.js"></script>
	<script src="'$HTMLFOLDER'/smoothscroll/smooth-scroll.js"></script>
	<script src="'$HTMLFOLDER'/dropdown/js/script.min.js"></script>
	<script src="'$HTMLFOLDER'/touchswipe/jquery.touch-swipe.min.js"></script>
	<script src="'$HTMLFOLDER'/viewportchecker/jquery.viewportchecker.js"></script>
	<script src="'$HTMLFOLDER'/as-pie-progress/jquery-as-pie-progress.min.js"></script>
	<script src="'$HTMLFOLDER'/vimeoplayer/jquery.mb.vimeo_player.js"></script>
	<script src="'$HTMLFOLDER'/datatables/jquery.data-tables.min.js"></script>
	<script src="'$HTMLFOLDER'/datatables/data-tables.bootstrap4.min.js"></script>
	<script src="'$HTMLFOLDER'/masonry/masonry.pkgd.min.js"></script>
	<script src="'$HTMLFOLDER'/imagesloaded/imagesloaded.pkgd.min.js"></script>
	<script src="'$HTMLFOLDER'/bootstrapcarouselswipe/bootstrap-carousel-swipe.js"></script>
	<script src="'$HTMLFOLDER'/mbr-switch-arrow/mbr-switch-arrow.js"></script>
	<script src="'$HTMLFOLDER'/theme/js/script.js"></script>
	<script src="'$HTMLFOLDER'/gallery/player.min.js"></script>
	<script src="'$HTMLFOLDER'/gallery/script.js"></script>
	<script src="'$HTMLFOLDER'/slidervideo/script.js"></script>
	<script src="'$HTMLFOLDER'/mbr-tabs/mbr-tabs.js"></script>
' > $HTMLFILE_SCRIPTS



# SECTIONS
############


# MENU
#######


HTMLFILE_MENU=$HTMLFILE".menu"

cp $LOGO $HTMLDIR/$(basename $LOGO)
HTML_LOGO="$HTMLFOLDER/$(basename $LOGO)"

cp $STARK_LOGO $HTMLDIR/$(basename $STARK_LOGO)
HTML_STARK_LOGO="$HTMLFOLDER/$(basename $STARK_LOGO)"


echo '
<section class="menu cid-qTkzRZLJNu" once="menu" id="menu1-3">
  <nav class="navbar navbar-expand beta-menu navbar-dropdown align-items-center navbar-fixed-top collapsed bg-color transparent">
	  <button class="navbar-toggler navbar-toggler-right" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
		  <div class="hamburger">
			  <span></span>
			  <span></span>
			  <span></span>
			  <span></span>
		  </div>
	  </button>
	  <div class="menu-logo">
		  <div class="navbar-brand">
			  <span class="navbar-logo">
				  <a href="">
					   <img src="'$HTML_LOGO'" alt="Mobirise" title="" style="height: 6rem;">
				  </a>
			  </span>
			  <span class="navbar-caption-wrap"><a class="navbar-caption text-secondary display-2" href="">'$SAMPLEID'</a></span>
		 </div>
	  </div>
	  <div class="collapse navbar-collapse align-center" id="navbarSupportedContent">
		  <p class="mbr-text pb-3 mbr-fonts-style display-5">
			  <img src="'$HTML_STARK_LOGO'" alt="STARK" title="" style="height: 24rem;">
		  </p>
		  <h1 class="mbr-section-title mbr-bold pb-3 mbr-fonts-style display-2">
			  '$ENV_NAME'
		  </h1>
		  <p class="mbr-text pb-3 mbr-fonts-style display-5">
			  '$ENV_RELEASE' - '$ENV_DATE'
			  <BR>
			  '$ENV_DESCRIPTION'
			  <BR>
			  Â© Copyright '$ENV_COPYRIGHT' - All Rights Reserved
			  <BR>
			  '$ENV_LICENCE' Licence
			  <BR>
			  <BR>
			  <BR>
		  </p>
		  <div class="navbar-buttons mbr-section-btn">
			  <!--
			  <a class="btn btn-sm btn-primary display-4" href="https://mobirise.com">
				  <span class="mbri-save mbr-iconfont mbr-iconfont-btn "></span>
				  Try It Now!
			  </a>
			  -->
		  </div>
	  </div>
  </nav>
</section>
' > $HTMLFILE_MENU

export ENV_NAME="STARK"
export ENV_DESCRIPTION="Stellar Tools for variants Analysis and RanKing"
export ENV_RELEASE="0.9.18d"
export ENV_DATE="14/01/2019"
export ENV_AUTHOR="Antony Le Bechec/Amandine Velt/Sinthuja Pachchek/Vincent Zilliox/Samuel Nicaise"
export ENV_COPYRIGHT="HUS"
export ENV_LICENCE="GNU GPLA V3"


# TITLE
####################

HTMLFILE_TITLE=$HTMLFILE".title"

SAMPLE_TAG=$(extract_tag $(cat $RESULTS_FOLDER/$ANALYSIS/$SAMPLE/$SAMPLE.tag) "" "#TAG")

#for TAG in $(cat $RESULTS_FOLDER/$ANALYSIS/$SAMPLE/$SAMPLE.tag | tr "!" " "); do
#done


echo '
<section class="engine"><a href="">bootstrap themes</a></section>

<section class="header1 cid-rtEVvxavic" id="header16-b">

    <div class="container">
        <div class="row justify-content-md-center">
            <div class="col-md-10 align-center">
                <h1 class="mbr-section-title mbr-bold pb-3 mbr-fonts-style display-2">
                    '$SAMPLEID'
                </h1>

				<p class="mbr-text pb-3 mbr-fonts-style display-5">
                    '$ANALYSIS'
					<BR>
					'$SAMPLE_TAG'
                </p>

            </div>
        </div>
    </div>

</section>


' > $HTMLFILE_TITLE



# MAIN INFORMATION
####################

HTMLFILE_MAIN=$HTMLFILE".main"

DESIGN_NAME=$(echo $MANIFEST_NAME"$(if [ "$MANIFEST_NAME" != "$BED_NAME" ]; then echo " / $BED_NAME"; fi)")

SAMPLE_TAG_HTML=""
for T in $(extract_tag $(cat $RESULTS_FOLDER/$ANALYSIS/$SAMPLE/$SAMPLE.tag) "" "TYPE#TAG"); do
	if (( $(echo $T | grep "#" -c) )); then
		#echo $T
		TYPE=$(echo "$T" | awk -F"#" '{print $1}' | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')
		TAG=$(echo "$T" | cut -d"#" -f2- | tr "#" " " | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')

		if [ "$TAG" != "" ]; then

			SAMPLE_TAG_HTML="$SAMPLE_TAG_HTML $TYPE<strong>#$TAG</strong>"
		fi;
	fi;
done;


echo '
<section class="mbr-section article content12 cid-rtEVPBXJ7Z" id="content12-g">
    <div class="container">
        <div class="media-container-row">
            <div class="mbr-text counter-container col-12 col-md-8 mbr-fonts-style display-7">
                <ul>
					<li><strong>'$APP_NAME'</strong> application</li>
					<li><strong>'$GROUP'</strong> group</li>
					<li><strong>'$PROJECT'</strong> project </li>
					<li><strong>'$ASSEMBLY'</strong> assembly </li>
					<li><strong>'$DESIGN_NAME'</strong> design </li>
					<li>'$SAMPLE_TAG_HTML'</li>

                </ul>
            </div>
        </div>
    </div>
</section>



' > $HTMLFILE_MAIN



# SEQUENCING
##############

HTMLFILE_SEQUENCING=$HTMLFILE".sequencing"


FASTQCDATA="$RESULTS_FOLDER/$ANALYSIS/$SAMPLE/$SAMPLE.fastqc/metrics.fastqc.txt"
FASTQCIMAGESDIR="$RESULTS_FOLDER/$ANALYSIS/$SAMPLE/$SAMPLE.fastqc/$SAMPLE.unaligned_fastqc/Images"

Filename=$(grep "Filename" $FASTQCDATA | cut -f2  | sed "s/\_/\\\_/gi")
TotalSequences=`grep "Total Sequences" $FASTQCDATA | cut -f2`
SequenceLength=`grep "Sequence length" $FASTQCDATA | cut -f2`
SequenceLength_min=`grep "Sequence length" $FASTQCDATA | cut -f2 | cut -d- -f1`
SequenceLength_max=`grep "Sequence length" $FASTQCDATA | cut -f2 | cut -d- -f2`

if [ -s $RESULTS_FOLDER/$ANALYSIS/$SAMPLE/$SAMPLE.fastqc/metrics.counts.txt ]; then
	UniqueNumberReads=$(grep "^unique" $RESULTS_FOLDER/$ANALYSIS/$SAMPLE/$SAMPLE.fastqc/metrics.counts.txt | cut -f2);
	PercentUniqueNumberReads=$(grep "^%unique" $RESULTS_FOLDER/$ANALYSIS/$SAMPLE/$SAMPLE.fastqc/metrics.counts.txt | cut -f2);
elif [ -s $RESULTS_FOLDER/$ANALYSIS/$SAMPLE/$SAMPLE.unaligned.bam ]; then
	UniqueNumberReads=$( $SAMTOOLS view $RESULTS_FOLDER/$ANALYSIS/$SAMPLE/$SAMPLE.unaligned.bam | cut -f10 | sort -T "$TMP_FOLDER_TMP" -u | wc -l )
	PercentUniqueNumberReads=$( echo "scale=2; $UniqueNumberReads*100/$TotalSequences" | bc )
else
	UniqueNumberReads=$(zcat $RESULTS_FOLDER/$ANALYSIS/$SAMPLE/$SAMPLE*.fastq.gz 2>/dev/null | awk 'NR % 4 == 2' | sort -T "$TMP_FOLDER_TMP" -u | wc -l);
	PercentUniqueNumberReads=$( echo "scale=2; $UniqueNumberReads*100/$TotalSequences" | bc )
#else
#	UniqueNumberReads=0
fi;
#UniqueNumberReads=$(grep "Total Sequences" $FASTQCDATA | cut -f2)
#HORIZON_bam_env_CPSGEN_sh.fastqc\HORIZON_bam_env_CPSGEN_sh.unaligned_fastqc

# Q30
Q30_ALL=$(cat $FASTQCDATA | awk '/>>Per sequence quality scores/,/>>END_MODULE/' | head -n -1 | tail -n+3 | awk '{s+=$2}END{print s}');
Q30_UNTIL=$(cat $FASTQCDATA | awk '/>>Per sequence quality scores/,/>>END_MODULE/' | awk '/>>Per sequence quality scores/,/30\t/' | head -n -1 | tail -n+3 | awk '{s+=$2}END{print s}');
Q30=$(bc <<< "scale = 4; (($Q30_ALL - $Q30_UNTIL) / $Q30_ALL * 100)");
Q30_print=$(echo $Q30 | sed s/00$//)"\%"



echo '
	<section class="counters1 counters cid-rtEUywf1HK" id="counters1-4">

    <div class="container">
        <h2 class="mbr-section-title pb-3 align-center mbr-fonts-style display-2">
            Sequencing
        </h2>
        <h3 class="mbr-section-subtitle mbr-fonts-style display-5">
            FastQC performs analyses to assess the quality of the data. Informative controls are shown in Figure 1 to 5. Table 1 shows general information
        </h3>

        <div class="container pt-4 mt-2">
            <div class="media-container-row">

                <div class="card p-3 align-center col-12 col-md-6 col-lg-4">
                    <div class="panel-item p-3">
                        <div class="card-img pb-3">
                            <span class="mbri-info mbr-iconfont"></span>
                        </div>

                        <div class="card-text">
                            <h3 class="count pt-3 pb-3 mbr-fonts-style display-2">
                                  '$TotalSequences'
                            </h3>
                            <h4 class="mbr-content-title mbr-bold mbr-fonts-style display-7">
                                Total number of reads
                            </h4>
                            <p class="mbr-content-text mbr-fonts-style display-7">
                                blablabla.
                            </p>
                        </div>
                    </div>
                </div>


                <div class="card p-3 align-center col-12 col-md-6 col-lg-4">
                    <div class="panel-item p-3">
                        <div class="card-img pb-3">
                            <span class="mbri-info mbr-iconfont"></span>
                        </div>
                        <div class="card-text">
                            <h3 class="count pt-3 pb-3 mbr-fonts-style display-2">
                                  '$UniqueNumberReads'
                            </h3>
                            <h4 class="mbr-content-title mbr-bold mbr-fonts-style display-7">
                                Unique number of reads
                            </h4>
                            <p class="mbr-content-text mbr-fonts-style display-7">
                                blablabla.
                            </p>
                        </div>
                    </div>
                </div>

				<div class="card p-3 align-center col-12 col-md-6 col-lg-4">
					<div class="panel-item p-3">
						<div class="card-img pb-3">
							<span class="mbri-info mbr-iconfont"></span>
						</div>
						<div class="card-text">
							<h3 class="count pt-3 pb-3 mbr-fonts-style display-2">
								  '$SequenceLength_min'
							</h3>
							<h4 class="mbr-content-title mbr-bold mbr-fonts-style display-7">
								Sequence length Min
							</h4>
							<p class="mbr-content-text mbr-fonts-style display-7">
								blablabla.
							</p>
						</div>
					</div>
				</div>

				<div class="card p-3 align-center col-12 col-md-6 col-lg-4">
					<div class="panel-item p-3">
						<div class="card-img pb-3">
							<span class="mbri-info mbr-iconfont"></span>
						</div>
						<div class="card-text">
							<h3 class="count pt-3 pb-3 mbr-fonts-style display-2">
								  '$SequenceLength_max'
							</h3>
							<h4 class="mbr-content-title mbr-bold mbr-fonts-style display-7">
								Sequence length Max
							</h4>
							<p class="mbr-content-text mbr-fonts-style display-7">
								blablabla.
							</p>
						</div>
					</div>
				</div>


            </div>

        </div>

   </div>


</section>



<section class="progress-bars1 cid-rtQbHOap4a" id="progress-bars1-n">





    <div class="container">
        <!--
		<h2 class="mbr-section-title pb-2 align-center mbr-fonts-style display-2">
            Horizontal progress bars
        </h2>
		-->
		<!--
        <h3 class="mbr-section-subtitle pb-5 mbr-fonts-style display-5">
            Click blue "Gear" icon in the top right corner to hide/show progress bars and change them color and value. Click text to edit or style it.
        </h3>
		-->
        <div class="progress_elements">
            <div class="progress1 pb-5">
                <div class="title-wrap">
                    <div class="progressbar-title mbr-fonts-style display-7">
                        <p>
                            Q30
                        </p>
                    </div>
                    <div class="progress_value mbr-fonts-style display-7">
                        <!--<div class="progressbar-number"></div>-->
                        <span>'$Q30'%</span>
                    </div>
                </div>
                <progress class="progress progress-primary" max="100" value="'$Q30'">
                </progress>
            </div>

            <div class="progress2 pb-5">
                <div class="title-wrap">
                    <div class="progressbar-title mbr-fonts-style display-7">
                        <p>
                           Publick transport
                        </p>
                    </div>
                <div class="progress_value mbr-fonts-style display-7">
                    <!--<div class="progressbar-number"></div>-->
                    <span>'$PercentUniqueNumberReads'%</span>
                </div>
                </div>
                <progress class="progress progress-primary" max="100" value="'$PercentUniqueNumberReads'">
                </progress>
            </div>


        </div>
    </div>
</section>



' > $HTMLFILE_SEQUENCING





# FOOTER
##########




# BODY
#######

HTMLFILE_BODY=$HTMLFILE".body"

echo '
	'"$(cat $HTMLFILE_MENU)"'
	'"$(cat $HTMLFILE_TITLE)"'
	'"$(cat $HTMLFILE_MAIN)"'
	'"$(cat $HTMLFILE_SEQUENCING)"'
	'"$(cat $HTMLFILE_SCRIPTS)"'
' > $HTMLFILE_BODY


# OUTPUT
##########





# HTML

echo -ne '

<!DOCTYPE html>

<html>

	<head>

		'"$(cat $HTMLFILE_HEADER)"'

	</head>

	<body>

		'"$(cat $HTMLFILE_BODY)"'

	</body>

</html>

' > $HTMLFILE



#cp $STARK_FOLDER_BIN/test.html $HTMLFILE
#mkdir -p $(dirname $OUTPUT)/assets
#cp -R $HTMLDIR/* $(dirname $OUTPUT)/assets/



(($DEBUG)) && cat $HTMLFILE







# WRITE FILES
###############

mkdir -p $(dirname $OUTPUT)

if [ "$OUTPUT_TYPE" == "html" ]; then

	cp $HTMLFILE $OUTPUT_HTMLFILE
	mkdir -p $OUTPUT_HTMLDIR
	cp -Rf $HTMLDIR/* $OUTPUT_HTMLDIR/


fi;



# cleaning
rm -rf $REPORTDIR
