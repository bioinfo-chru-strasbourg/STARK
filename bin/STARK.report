#!/bin/bash
#################################
##
## NGS environment
##
#################################

SCRIPT_NAME="STARKReport"
SCRIPT_DESCRIPTION="STARK Report"
SCRIPT_RELEASE="0.9b"
SCRIPT_DATE="19/06/2019"
SCRIPT_AUTHOR="Antony Le Bechec"
SCRIPT_COPYRIGHT="HUS"
SCRIPT_LICENCE="GNU-AGPL"

# Realse note
RELEASE_NOTES=$RELEASE_NOTES"# 0.9b-19/06/2019: Script creation\n";

# Script folder
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# Configuration
ENV_CONFIG=$(find $SCRIPT_DIR/.. -name config.app)
source $ENV_CONFIG 1>/dev/null 2>/dev/null


# Header
function header () {
	echo "#######################################";
	echo "# $SCRIPT_NAME [$SCRIPT_RELEASE-$SCRIPT_DATE]";
	echo "# $SCRIPT_DESCRIPTION ";
	echo "# $SCRIPT_AUTHOR @ $SCRIPT_COPYRIGHT Â© $SCRIPT_LICENCE";
	echo "#######################################";
}

# Release
function release () {
	echo "# RELEASE NOTES:";
	echo -e $RELEASE_NOTES
}

# Usage
function usage {
	echo "# USAGE: $(basename $0) -f analysis -p project -g group -u user -s sample -e env -d date [-h] [options...]";
	echo "#";
	echo "### This script generates a readable report with quality and metrics for a sample.";
	echo "#";
	echo "# -f|--analysis=<STRING>                         Analysis name (required).";
	echo "# -p|--project=<STRING>                          Project name (not required)";
	echo "# -g|--group=<STRING>                            Group name (not required)";
	echo "# -u|--user=<STRING>                             User name (not required)";
	echo "# -s|--sample=<STRING>                           Sample name (required)";
	echo "# -e|--application=<STRING>                      Application (required)";
	echo "# -r|--results=<FOLDER>                          Result folder (not required)";
	echo "# -i|--pipelines=<STRING>                        Pipelines if different from Pipelines option in the application (not required)";
	echo "# -k|--date=<STRING>                             Release/ID/Date of the current analysis (not required)";
	echo "# -o|--output=<STRING>                           Output file pattern (not required)";
	echo "# -t|--output_type=<STRING>                      Output type file, either html (default html)";
	echo "# -v|--verbose                                   Verbose mode";
	echo "# -d|--debug                                     Debug mode";
	echo "# -n|--release                                   Script Release";
	echo "# -h|--help                                      Help message";
	echo "#";
	#echo -e "#\n# RUN Analysis\n################";
	#$STARK_FOLDER_BIN/launch.sh -h | grep "# [ |-]";
	#echo -e "#\n# SAMPLE Analysis\n###################";
	#$STARK_FOLDER_BIN/launch.sample.sh -h | grep "# [ |-]";
}


####################################################################################################################################
# Getting parameters from the input
#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# ":" tells that the option has a required argument, "::" tells that the option has an optional argument, no ":" tells no argument
ARGS=$(getopt -o "f:p:g:u:s:e:r:i:k:o:t:vdnh" --long "analysis:,project:,group:,user:,sample:,env:,app:,application:,results:,pipelines:,date:,output:,output_type:,verbose,debug,release,help" -- "$@" 2> /dev/null)
if [ $? -ne 0 ]; then
	:
	echo "#[ERROR] Error in the argument list:";
	echo "#[ERROR] $@"
	echo ""
	usage;
	exit;
fi;


PARAM=$@
DEBUG=0
VERBOSE=0

eval set -- "$ARGS"
while true
do
	#echo "$1=$2"
	#echo "Eval opts";
	case "$1" in
		-r|--results)
			RESULTS_FOLDER_INPUT="$2"
			shift 2
			;;
		-f|--analysis)
			ANALYSIS="$2"
			shift 2
			;;
		-p|--project)
			PROJECT_INPUT="$2"
			shift 2
			;;
		-g|--group)
			GROUP_INPUT="$2"
			shift 2
			;;
		-u|--user)
			USER_INPUT="$2"
			shift 2
			;;
		-s|--sample)
			SAMPLE="$2"
			shift 2
			;;
		-e|--env|--app|--application)
			APP="$2"
			shift 2
			;;
		-i|--pipelines)
			PIPELINES_INPUT="$2"
			PIPELINES_INPUT=$(echo $PIPELINES_INPUT | tr "," " ")
			shift 2
			;;
		-k|--date)
			DATE="$2"
			shift 2
			;;
		-o|--output)
			OUTPUT_INPUT="$2"
			shift 2
			;;
		-t|--output_type)
			OUTPUT_TYPE_INPUT="$2"
			shift 2
			;;
		-h|--help)
			usage
			exit 0
			;;
		-v|--verbose)
			VERBOSE=1
			shift 1
			;;
		-d|--debug)
			DEBUG=1
			shift 1
			;;
		--) shift
			break
			;;
		*) 	echo "Option $1 is not recognized. " "Use -h or --help to display the help." && \
			exit 1
			;;
	esac
done

# header
(($NO_HEADER)) || header;


# Example:
# STARK.report -f "RUN_TEST_TAG7" -s "P1408" -e "/STARK/tools/stark/0.9.18d/config/apps/SOLIDTUMOR.app" -i "bwamem.gatkUG_SOLIDTUMOR.howard,bwamem.gatkHC_SOLIDTUMOR.howard,bwamem.VarScan_SOLIDTUMOR.howard" -k test -r /STARK/output/results

####################################################################################################################################
# Checking the input parameter
#--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
if [ -z "$ANALYSIS" ] && [ -z "$SAMPLE" ] && [ -z "$APP" ] && ((!$DEBUG)); then
	echo "#[ERROR] Required parameter: --analysis, --sample, and --application. Use --help to display the help." && echo "" && usage && exit 1;
fi
#--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


# APPLICATION
###############

# Default APP
[ -z $APP ] && APP="default";


#echo "APP=$APP"; exit;
(($VERBOSE)) && [ ! -z "$APP" ] && echo "#[INFO] Search Application '$APP'"

ENV=$(find_app "$APP" "$STARK_FOLDER_APPS")
source_app "$APP" "$STARK_FOLDER_APPS" 1
APP_NAME=$(name_app "$APP" "$STARK_FOLDER_APPS");

#export ENV
#export APP

(($VERBOSE)) && [ ! -z "$APP" ] && [ ! -z "$ENV" ] && echo "#[INFO] Application '$APP' found ('$ENV')"
(($VERBOSE)) && [ ! -z "$APP" ] && [ -z "$ENV" ] && echo "#[INFO] Application '$APP' NOT found"



# Parameters
#############

# PIPELINES
if [ "$PIPELINES_INPUT" != "" ]; then
	PIPELINES=$PIPELINES_INPUT
fi;

if [ -z "$LATEX" ]; then
	LATEX="latex";
fi;

if [ ! -z $GROUP_INPUT ]; then
	GROUP=$GROUP_INPUT
fi;
if [ -z $GROUP ]; then
	GROUP="UNKNOWN"
fi;

if [ ! -z $PROJECT_INPUT ]; then
	PROJECT=$PROJECT_INPUT
fi;
if [ -z $PROJECT ]; then
	PROJECT="UNKNOWN"
fi;

if [ ! -z $USER_INPUT ]; then
	USER=$USER_INPUT
fi;
if [ -z $USER ]; then
	USER="UNKNOWN"
fi;

if [ -z $DATE ]; then
	DATE=$(date '+%Y%m%d-%H%M%S')
fi;

if [ ! -z $TMP_FOLDER_TMP ]; then
	TMP_REPORT=$TMP_FOLDER_TMP;
else
	TMP_REPORT=/tmp;
fi;

if [ ! -z $NB_VARIANT_LIMIT ]; then
	NB_VARIANT_LIMIT=$NB_VARIANT_LIMIT;
else
	NB_VARIANT_LIMIT=20;
fi;

if [ ! -z $RESULTS_FOLDER_INPUT ] && [ -d $RESULTS_FOLDER_INPUT ]; then
	RESULTS_FOLDER=$RESULTS_FOLDER_INPUT;
fi;

if [ ! -z $OUTPUT_INPUT ]; then
	OUTPUT=$OUTPUT_INPUT
else
	OUTPUT=$RESULTS_FOLDER/$ANALYSIS/$SAMPLE/$SAMPLE.reports/$SAMPLE.$DATE.stark.report
fi;

if [ -z $OUTPUT_TYPE_INPUT ]; then
	OUTPUT_TYPE="html";
fi;


# Other param


# LOGO
########
# STARK_LOGO_small_1.png

STARK_LOGO="$STARK_FOLDER_DOCS/logo/STARK_LOGO_medium_1.png"

[ ! -e "$LOGO" ] && LOGO="$STARK_FOLDER_DOCS/logo/STARK_LOGO_medium_1.png"
if [ ! -e $LOGO ]; then LOGO=""; fi;

# FAVICON
FAVICON="$STARK_FOLDER_DOCS/logo/favicon.png"


# REPORT TMP DIR
##################
# creation and verification of the directory containing the sample report

REPORTDIR="$TMP_REPORT/STARK_REPORT_$RANDOM"
mkdir -p $REPORTDIR;
[ ! -e $REPORTDIR ] && echo "$REPORTDIR can't be created ! Exit.";


# LOG FILE
###########
# creation and verification of the log file

LOGFILE="$REPORTDIR/latex_report.$DATE.log"
if [ ! -e "$LOGFILE" ] ; then
    touch "$LOGFILE" || (echo "$LOGFILE can't be created ! Exit." && exit 1);
fi

# OUTPUT FILES
################
# creation and verification of the tex file report

HTMLFOLDER_EXT=".folder"
ANNEX_PATTERN="annex"

# OUTPUT files
OUTPUT_HTMLFILE="$OUTPUT.html"
OUTPUT_TEXFILE="$OUTPUT.tex"
OUTPUT_PDFFILE="$OUTPUT.pdf"

# OUTPUT annexe files
OUTPUT_ANNEX_HTMLFILE="$OUTPUT.$ANNEX_PATTERN.html"
OUTPUT_ANNEX_TEXFILE="$OUTPUT.$ANNEX_PATTERN.tex"
OUTPUT_ANNEX_PDFFILE="$OUTPUT.$ANNEX_PATTERN.pdf"

# OUTPUT FOLDER
OUTPUT_HTMLFOLDER="$(basename $OUTPUT_HTMLFILE)$HTMLFOLDER_EXT"
#OUTPUT_HTMLDIR=$OUTPUT.html$HTMLFOLDER_EXT
OUTPUT_HTMLDIR="$(dirname $OUTPUT_HTMLFILE)/$OUTPUT_HTMLFOLDER"

# BASENAME
OUTPUT_BASENAME=$(basename $OUTPUT)

# TMP files
HTMLFILE="$REPORTDIR/$OUTPUT_BASENAME.html"
TEXFILE="$REPORTDIR/$OUTPUT_BASENAME.tex"
PDFFILE="$REPORTDIR/$OUTPUT_BASENAME.pdf"

HTMLFILE_ANNEX="$REPORTDIR/$OUTPUT_BASENAME.$ANNEX_PATTERN.html"
TEXFILE_ANNEX="$REPORTDIR/$OUTPUT_BASENAME.$ANNEX_PATTERN.tex"
PDFFILE_ANNEX="$REPORTDIR/$OUTPUT_BASENAME.$ANNEX_PATTERN.pdf"

HTMLFOLDER=$(basename $HTMLFILE)$HTMLFOLDER_EXT
HTMLDIR="$REPORTDIR/$HTMLFOLDER"

mkdir -p $HTMLDIR $OUTPUT_HTMLDIR

# PIPELINES
##############

ALIGNERS=$(echo $PIPELINES | tr " " "\n"  | cut -d. -f1 | sort -u | tr "\n" " " | sed "s/^ //" | sed "s/ $//")
ALIGNERS_NUMBER=$(echo $PIPELINES | tr " " "\n"  | cut -d. -f1 | sort -u  | wc -l)
CALLERS=$(echo $PIPELINES | tr " " "\n"  | cut -d. -f2 | sort -u | tr "\n" " " | sed "s/^ //" | sed "s/ $//")
CALLERS_NUMBER=$(echo $PIPELINES | tr " " "\n"  | cut -d. -f2 | sort -u  | wc -l)
ALIGNERS_CALLERS=$(echo $PIPELINES | tr " " "\n"  | cut -d. -f1-2 | sort -u | tr "\n" " " | sed "s/^ //" | sed "s/ $//")
ALIGNERS_CALLERS_NUMBER=$(echo $PIPELINES | tr " " "\n"  | cut -d. -f1-2 | sort -u | wc -l)
ANNOTATORS=$(echo $PIPELINES | tr " " "\n"  | cut -d. -f3 | sort -u | tr "\n" " " | sed "s/^ //" | sed "s/ $//")
ANNOTATORS_NUMBER=$(echo $PIPELINES | tr " " "\n"  | cut -d. -f3 | sort -u | wc -l)
ALIGNERS_CALLERS_ANNOTATORS=$(echo $PIPELINES | tr " " "\n"  | cut -d. -f1-3 | sort -u | tr "\n" " " | sed "s/^ //" | sed "s/ $//")
PIPELINES_NUMBER=$(echo $PIPELINES | tr " " "\n" | sort -u | wc -l)

# SAMPLEID
###########

SAMPLEID=$SAMPLE


# GROUP/PROJECT/USER
######################

SAMPLE_GROUP=$GROUP; if [ "$SAMPLE_GROUP" == "" ]; then SAMPLE_GROUP="UNKNOWN"; fi;
SAMPLE_PROJECT=$PROJECT; if [ "$SAMPLE_PROJECT" == "" ]; then SAMPLE_PROJECT="UNKNOWN"; fi;
SAMPLE_USER=$USER; if [ "$SAMPLE_USER" == "" ]; then SAMPLE_USER="UNKNOWN"; fi;
if [ -z "$APP" ]; then APP="DEFAULT"; fi;



# DESIGN
#########

MANIFEST_NAME_FILE=$RESULTS_FOLDER/$ANALYSIS/$SAMPLE/$SAMPLE.manifest_name
BED_NAME_FILE=$RESULTS_FOLDER/$ANALYSIS/$SAMPLE/$SAMPLE.bed_name
GENES_LIST_FILE=$RESULTS_FOLDER/$ANALYSIS/$SAMPLE/$SAMPLE.list.genes
MANIFEST_NAME=""
MANIFEST_SOURCE=""
BED_NAME=""
BED_SOURCE=""
if [ -s "$MANIFEST_NAME_FILE" ]; then
	MANIFEST_NAME=$(basename $(awk -F"\t" '{print $1}' $MANIFEST_NAME_FILE)) # awk -F\t '{print $2}'
	MANIFEST_SOURCE=$(awk -F"\t" '{print $2}' $MANIFEST_NAME_FILE)
fi;
if [ -s "$BED_NAME_FILE" ]; then
	BED_NAME=$(basename $(awk -F"\t" '{print $1}' $BED_NAME_FILE))
	BED_SOURCE=$(awk -F"\t" '{print $2}' $BED_NAME_FILE)
fi;
if [ -s "$GENES_LIST_FILE" ]; then
	GENES_LIST=$(cat $GENES_LIST_FILE | tr "\n" " ")
	#BED_SOURCE=$(awk -F"\t" '{print $2}' $BED_NAME_FILE)
fi;

if [ -z "$MANIFEST_NAME" ]; then
	MANIFEST_NAME="unknown";
fi;
if [ -z "$BED_NAME" ]; then
	BED_NAME="unknown";
fi;
if [ ! -z "$MANIFEST_SOURCE" ]; then
	MANIFEST_SOURCE=" ($MANIFEST_SOURCE)";
fi;
if [ ! -z "$BED_SOURCE" ]; then
	BED_SOURCE=" ($BED_SOURCE)";
fi;


# VARIABLES

PAGE_BREAK_AFTER=' style="page-break-after: always;"'
PAGE_BREAK_BEFORE=' style="page-break-before: always;"'

# BAM Validation texts
#uniq reads, with quality higher than 10, aligned on Target Design, and clipped overlapped bases
BAM_VALIDATION_TEXT_HTML='Minimum Mapping Quality >= '$METRICS_MINIMUM_MAPPING_QUALITY','
BAM_VALIDATION_TEXT_HTML=$BAM_VALIDATION_TEXT_HTML' Minimum Base Quality >= '$METRICS_MINIMUM_BASE_QUALITY','
(($CLIP_OVERLAPPING_READS)) && BAM_VALIDATION_TEXT_HTML=$BAM_VALIDATION_TEXT_HTML' Clipping overlapping reads,'
[ "$METRICS_FLAGS" != "" ] && BAM_VALIDATION_TEXT_HTML=$BAM_VALIDATION_TEXT_HTML' exclude Reads with flags '$METRICS_FLAGS || BAM_VALIDATION_TEXT_HTML=$BAM_VALIDATION_TEXT_HTML' no Reads excluded'



### DEBUG ###

if (($DEBUG)); then
	echo "

	### DEBUG ###

	ANALYSIS:             $ANALYSIS
	SAMPLE:               $SAMPLE/$SAMPLEID
	APPLICATION:          $APP
	PIPELINES:            $PIPELINES
	   ALIGNERS:          $ALIGNERS
	   CALLERS:           $CALLERS
	   ALIGNERS_CALLERS   $ALIGNERS_CALLERS
	   ANNOTATORS:        $ANNOTATORS
	   ALIGNERS_CALLERS_A $ALIGNERS_CALLERS_ANNOTATORS
	GROUP:                $GROUP
	PROJECT:              $PROJECT
	USER:                 $USER
	RESULTS_FOLDER:       $RESULTS_FOLDER
	DATE:                 $DATE
	OUTPUT:               $OUTPUT
	   OUTPUT_BASENAME:   $OUTPUT_BASENAME
	   OUTPUT_HTMLFILE:   $OUTPUT_HTMLFILE
	   OUTPUT_HTMLDIR:    $OUTPUT_HTMLDIR
	   OUTPUT_TEXFILE:    $OUTPUT_TEXFILE
	   OUTPUT_PDFFILE:    $OUTPUT_PDFFILE
	OUTPUT_TYPE:          $OUTPUT_TYPE
   	SAMPLE_GROUP:         $SAMPLE_GROUP
	SAMPLE_PROJECT:       $SAMPLE_PROJECT
	SAMPLE_USER:          $SAMPLE_USER

	DESIGN
	MANIFEST_NAME:        $MANIFEST_NAME
	MANIFEST_SOURCE:      $MANIFEST_SOURCE
	BED_NAME:             $BED_NAME
	BED_SOURCE:           $BED_SOURCE
	GENES_LIST:           $GENES_LIST

	TMP_REPORT:           $TMP_REPORT
	   HTMLFILE:          $HTMLFILE
	   HTMLDIR:           $HTMLDIR
	   TEXFILE:           $TEXFILE
	   PDFFILE:           $PDFFILE
	NB_VARIANT_LIMIT:     $NB_VARIANT_LIMIT

	REPORTDIR:            $REPORTDIR
	LOGFILE:              $LOGFILE

	"
fi;


# HEADER
##########


HTMLFILE_HEADER=$HTMLFILE".header"



cp -R $STARK_FOLDER_BIN/html/assets/* $HTMLDIR/
cp $FAVICON $HTMLDIR/favicon.ico



echo '
	<!-- Site made with Mobirise Website Builder v4.10.3, https://mobirise.com -->
	<meta charset="UTF-8">
	<meta http-equiv="X-UA-Compatible" content="IE=edge">
	<meta name="generator" content="Mobirise v4.10.3, mobirise.com">
	<meta name="viewport" content="width=device-width, initial-scale=1, minimum-scale=1">
	<link rel="shortcut icon" href="'$HTMLFOLDER/favicon.ico'" type="image/x-icon">
	<meta name="description" content="STARK Report">

	<title>STARK Report - '$SAMPLEID'</title>
	<link rel="stylesheet" href="'$HTMLFOLDER'/web/assets/mobirise-icons/mobirise-icons.css">
	<link rel="stylesheet" href="'$HTMLFOLDER'/tether/tether.min.css">
	<link rel="stylesheet" href="'$HTMLFOLDER'/bootstrap/css/bootstrap.min.css">
	<link rel="stylesheet" href="'$HTMLFOLDER'/bootstrap/css/bootstrap-grid.min.css">
	<link rel="stylesheet" href="'$HTMLFOLDER'/bootstrap/css/bootstrap-reboot.min.css">
	<link rel="stylesheet" href="'$HTMLFOLDER'/dropdown/css/style.css">
	<link rel="stylesheet" href="'$HTMLFOLDER'/as-pie-progress/css/progress.min.css">
	<link rel="stylesheet" href="'$HTMLFOLDER'/datatables/data-tables.bootstrap4.min.css">
	<link rel="stylesheet" href="'$HTMLFOLDER'/theme/css/style.css">
	<link rel="stylesheet" href="'$HTMLFOLDER'/gallery/style.css">
	<link rel="stylesheet" href="'$HTMLFOLDER'/mobirise/css/mbr-additional.css" type="text/css">

' > $HTMLFILE_HEADER


# SCRIPTS
###########

HTMLFILE_SCRIPTS=$HTMLFILE".scripts"

echo '
	<script src="'$HTMLFOLDER'/web/assets/jquery/jquery.min.js"></script>
	<script src="'$HTMLFOLDER'/popper/popper.min.js"></script>
	<script src="'$HTMLFOLDER'/tether/tether.min.js"></script>
	<script src="'$HTMLFOLDER'/bootstrap/js/bootstrap.min.js"></script>
	<script src="'$HTMLFOLDER'/smoothscroll/smooth-scroll.js"></script>
	<script src="'$HTMLFOLDER'/dropdown/js/script.min.js"></script>
	<script src="'$HTMLFOLDER'/touchswipe/jquery.touch-swipe.min.js"></script>
	<script src="'$HTMLFOLDER'/viewportchecker/jquery.viewportchecker.js"></script>
	<script src="'$HTMLFOLDER'/as-pie-progress/jquery-as-pie-progress.min.js"></script>
	<script src="'$HTMLFOLDER'/vimeoplayer/jquery.mb.vimeo_player.js"></script>
	<script src="'$HTMLFOLDER'/datatables/jquery.data-tables.min.js"></script>
	<script src="'$HTMLFOLDER'/datatables/data-tables.bootstrap4.min.js"></script>
	<script src="'$HTMLFOLDER'/masonry/masonry.pkgd.min.js"></script>
	<script src="'$HTMLFOLDER'/imagesloaded/imagesloaded.pkgd.min.js"></script>
	<script src="'$HTMLFOLDER'/bootstrapcarouselswipe/bootstrap-carousel-swipe.js"></script>
	<script src="'$HTMLFOLDER'/mbr-switch-arrow/mbr-switch-arrow.js"></script>
	<script src="'$HTMLFOLDER'/theme/js/script.js"></script>
	<script src="'$HTMLFOLDER'/gallery/player.min.js"></script>
	<script src="'$HTMLFOLDER'/gallery/script.js"></script>
	<script src="'$HTMLFOLDER'/slidervideo/script.js"></script>
	<script src="'$HTMLFOLDER'/mbr-tabs/mbr-tabs.js"></script>
' > $HTMLFILE_SCRIPTS


# PLAN
##########

#(($VERBOSE)) && echo "[INFO] PLAN section"

HTMLFILE_PLAN_LINKS=$HTMLFILE".plan.links"
> $HTMLFILE_PLAN_LINKS


HTMLFILE_ANNEX_PLAN_LINKS=$HTMLFILE_ANNEX".plan.links"
> $HTMLFILE_ANNEX_PLAN_LINKS


# SECTIONS
############


# MENU
#######

(($VERBOSE)) && echo "#[INFO] MENU section"

HTMLFILE_MENU=$HTMLFILE".menu"

cp $LOGO $HTMLDIR/$(basename $LOGO)
HTML_LOGO="$HTMLFOLDER/$(basename $LOGO)"

cp $STARK_LOGO $HTMLDIR/$(basename $STARK_LOGO)
HTML_STARK_LOGO="$HTMLFOLDER/$(basename $STARK_LOGO)"


echo '
<section class="menu cid-qTkzRZLJNu" once="menu" id="menu1-3">
  <nav class="navbar navbar-expand beta-menu navbar-dropdown align-items-center navbar-fixed-top collapsed bg-color transparent">
	  <button class="navbar-toggler navbar-toggler-right" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
		  <div class="hamburger">
			  <span></span>
			  <span></span>
			  <span></span>
			  <span></span>
		  </div>
	  </button>
	  <div class="menu-logo">
		  <div class="navbar-brand">
			  <span class="navbar-logo">
				  <a href="">
					   <img src="'$HTML_LOGO'" alt="Mobirise" title="" style="height: 6rem;">
				  </a>
			  </span>
			  <span class="navbar-caption-wrap"><a class="navbar-caption text-secondary display-2" href="">'$SAMPLEID'</a></span>
		 </div>
	  </div>
	  <div class="collapse navbar-collapse align-center" id="navbarSupportedContent">
		  <p class="mbr-text pb-3 mbr-fonts-style display-5">
			  <img src="'$HTML_STARK_LOGO'" alt="STARK" title="" style="height: 24rem;">
		  </p>
		  <h1 class="mbr-section-title mbr-bold pb-3 mbr-fonts-style display-2">
			  '$ENV_NAME'
		  </h1>
		  <p class="mbr-text pb-3 mbr-fonts-style display-5">
			  '$ENV_RELEASE' - '$ENV_DATE'
			  <BR>
			  '$ENV_DESCRIPTION'
			  <BR>
			  Â© Copyright '$ENV_COPYRIGHT' - All Rights Reserved
			  <BR>
			  '$ENV_LICENCE' Licence
			  <BR>
			  <BR>
			  <BR>
		  </p>
		  <div class="navbar-buttons mbr-section-btn">
			  <!--
			  <a class="btn btn-sm btn-primary display-4" href="https://mobirise.com">
				  <span class="mbri-save mbr-iconfont mbr-iconfont-btn "></span>
				  Try It Now!
			  </a>
			  -->
		  </div>
	  </div>
  </nav>
</section>
' > $HTMLFILE_MENU

export ENV_NAME="STARK"
export ENV_DESCRIPTION="Stellar Tools for variants Analysis and RanKing"
export ENV_RELEASE="0.9.18d"
export ENV_DATE="14/01/2019"
export ENV_AUTHOR="Antony Le Bechec/Amandine Velt/Sinthuja Pachchek/Vincent Zilliox/Samuel Nicaise"
export ENV_COPYRIGHT="HUS"
export ENV_LICENCE="GNU GPLA V3"


# TITLE
####################

(($VERBOSE)) && echo "#[INFO] TITLE section"

HTMLFILE_TITLE=$HTMLFILE".title"

# SAMPLE TAG
SAMPLE_TAG=$(extract_tag $(cat $RESULTS_FOLDER/$ANALYSIS/$SAMPLE/$SAMPLE.tag) "" "TYPE#TAG")
SAMPLE_TAG_HTML=""
for TYPETAG in $SAMPLE_TAG; do
	TYPE=$(echo "$TYPETAG" | awk -F"#" '{print $1}' | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')
	TAG=$(echo "$TYPETAG" | cut -d"#" -f2- | tr "#" " " | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')
	SAMPLE_TAG_HTML="$SAMPLE_TAG_HTML&nbsp;&nbsp;&nbsp; <small>$TYPE</small><strong>#$TAG</strong>"
done

# ANALYSIS TAG
ANALYSIS_TAG=$(extract_tag $(cat $RESULTS_FOLDER/$ANALYSIS/$SAMPLE/$SAMPLE.analysis.tag) "" "TYPE#TAG")
ANALYSIS_TAG_HTML=""
for TYPETAG in $ANALYSIS_TAG; do
	TYPE=$(echo "$TYPETAG" | awk -F"#" '{print $1}' | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')
	TAG=$(echo "$TYPETAG" | cut -d"#" -f2- | tr "#" " " | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')
	ANALYSIS_TAG_HTML="$ANALYSIS_TAG_HTML<small>$TYPE</small><strong>#$TAG</strong>&nbsp;&nbsp;&nbsp; "
done


echo '

<section class="header1 cid-ru7OEConn1" id="header16-1k">

		<div class="container">

		   	 <div class="row justify-content-center  align-center">

		   		 <div class="card p-6 col-12 col-md-12">
		   			 <div class="card-box">
		   				 <h1 class="mbr-section-title mbr-bold pb-3 mbr-fonts-style display-2">
			   					<img src="'$HTML_LOGO'" width="128">
		   				 </h1>
		   			 </div>
		   		 </div>

			 </div>

		 </div>

	    <div class="container">

	        <div class="row justify-content-center  align-left">

	            <div class="card p-6 col-12 col-md-6" style="border-style: none solid none none ; border-color: rgb(20, 157, 204); border-radius: 0px;">
					<div class="card-box">
						<h1 class="mbr-section-title mbr-bold pb-3 mbr-fonts-style display-2 align-right">
							'$SAMPLEID'
						</h1>
	                    <p class="mbr-text pb-3 mbr-fonts-style display-7 align-right">
							'$SAMPLE_TAG_HTML'
						</p>
	                </div>
	            </div>

	            <div class="card p-6 col-12 col-md-6">

	                <div class="card-box">
						<h1 class="mbr-section-title pb-3 mbr-fonts-style display-2 align-left">
								<small><small><small><small>'$ANALYSIS'</small></small></small></small>
						</h1>
						<p class="mbr-section-subtitle mbr-fonts-style display-7 align-left">
							'$ANALYSIS_TAG_HTML'
						</p>
	                </div>

	            </div>

	        </div>

	    </div>

</section>



' > $HTMLFILE_TITLE



# MAIN INFORMATION
####################

(($VERBOSE)) && echo "#[INFO] MAIN section"


HTMLFILE_MAIN=$HTMLFILE".main"

DESIGN_NAME=$(echo $MANIFEST_NAME"$(if [ "$MANIFEST_NAME" != "$BED_NAME" ]; then echo " / $BED_NAME"; fi)")

BED="$RESULTS_FOLDER/$ANALYSIS/$SAMPLE/$SAMPLE.bed"
MANIFEST="$RESULTS_FOLDER/$ANALYSIS/$SAMPLE/$SAMPLE.manifest"

DESIGN_NUMBER_REGIONS=$(grep -vc "^#" $BED)
DESIGN_NUMBER_BASES=$(cat $BED | awk '{for(i=$2;i<$3;i++) print $1"\t"i}' | sort -u | wc -l)

# GENE PANEL
LIST_GENE_PANEL="$RESULTS_FOLDER/$ANALYSIS/$SAMPLE/$SAMPLE.list.genes"
GENE_PANEL_NUMBER=$(grep -vc "^#" $LIST_GENE_PANEL)
#GENE_PANEL_NUMBER=0
#(($GENE_PANEL_NUMBER)) && GENE_PANEL_HTML="$GENE_PANEL_NUMBER Gene Panel"$([ $GENE_PANEL_NUMBER -gt 1 ] && echo "s")" defined:<br><strong>"$(grep -v "^#" $LIST_GENE_PANEL)"</strong>" || GENE_PANEL_HTML="Gene Panel defined using Design and RefSeq"
(($GENE_PANEL_NUMBER)) && GENE_PANEL_HTML="$GENE_PANEL_NUMBER Gene Panel"$([ $GENE_PANEL_NUMBER -gt 1 ] && echo "s")" defined" || GENE_PANEL_HTML="Gene Panel defined using Design and RefSeq"


echo '

<section class="features10 cid-ru7OEDbxhA" id="features10-1l">

    <div class="container">
        <div class="row justify-content-center">
            <div class="card p-3 col-12 col-md-6">
                <div class="media mb-3">
                    <div class="card-img align-self-center">
                        <span class="mbr-iconfont mbri-setting3" style="color: rgb(20, 157, 204); fill: rgb(20, 157, 204);"></span>
                    </div>
                    <h4 class="card-title media-body py-3 mbr-fonts-style display-7">'$APP_NAME'</h4>
                </div>
                <div class="card-box">
                    <p class="mbr-text mbr-fonts-style display-7">
						'$APP_DESCRIPTION'<br>
						Application designed for <strong>'$GROUP'</strong> group and <strong>'$PROJECT'</strong> project, with <strong>'$ASSEMBLY'</strong> assembly.
						Analysis performed by <strong>'$ENV_NAME':'$ENV_RELEASE'</strong> with databases release <strong>'$DATABASES_RELEASE'</strong>.<br>
					</p>
                </div>
            </div>

            <div class="card p-3 col-12 col-md-6">
                <div class="media mb-3">
                    <div class="card-img align-self-center">
                        <span class="mbr-iconfont mbri-target" style="color: rgb(20, 157, 204); fill: rgb(20, 157, 204);"></span>
                    </div>
                    <h4 class="card-title media-body py-3 mbr-fonts-style display-7">Target Design &amp; Gene Panel</h4>
                </div>
                <div class="card-box">
                    <p class="mbr-text mbr-fonts-style display-7">
						Target design contains '$DESIGN_NUMBER_REGIONS' regions ('$DESIGN_NUMBER_BASES' bases):<br>
						<strong>'$DESIGN_NAME'</strong><br>
						'$GENE_PANEL_HTML'
					</p>
                </div>
            </div>

        </div>
    </div>

</section>

' > $HTMLFILE_MAIN



# SUMMARY
##############

HTMLFILE_SUMMARY=$HTMLFILE".summary"

SECTION_NAME="Results Summary"
SECTION_ID="results_summary"

# FILES
FASTQR1="$RESULTS_FOLDER/$ANALYSIS/$SAMPLE/$SAMPLE.R1.fastq.gz"
FASTQR2="$RESULTS_FOLDER/$ANALYSIS/$SAMPLE/$SAMPLE.R2.fastq.gz"
FASTQCDATA="$RESULTS_FOLDER/$ANALYSIS/$SAMPLE/$SAMPLE.sequencing/metrics.fastqc.txt"
SEQUENCING_COUNTS="$RESULTS_FOLDER/$ANALYSIS/$SAMPLE/$SAMPLE.sequencing/metrics.counts.txt"
SEQUENCING_INFOS="$RESULTS_FOLDER/$ANALYSIS/$SAMPLE/$SAMPLE.sequencing/metrics.infos.txt"
SEQUENCING_Q30="$RESULTS_FOLDER/$ANALYSIS/$SAMPLE/$SAMPLE.sequencing/metrics.Q30.txt"

# READS and BASES count
TOTAL_SEQUENCES=$(grep "^total" $SEQUENCING_COUNTS | cut -f2)
TOTAL_SEQUENCES_HTML=$(echo $TOTAL_SEQUENCES | sed ':a;s/\B[0-9]\{3\}\>/,&/;ta')
TOTAL_BASES=$(grep "^count_bases" $SEQUENCING_COUNTS | cut -f2)
TOTAL_BASES_HTML=$(echo $TOTAL_BASES | sed ':a;s/\B[0-9]\{3\}\>/,&/;ta')

# SEQUENCING TECHNOLOGY
SEQUENCING_MODE_HTML=$(grep "^mode" $SEQUENCING_INFOS | cut -f2)
SEQUENCING_TECHNOLOGY_HTML=$(grep "^technology" $SEQUENCING_INFOS | cut -f2)

# Q30
Q30_HTML=$(grep "^Q30" $SEQUENCING_Q30 | cut -f2)

# GENES count
GENES_NUMBER=$(cd $RESULTS_FOLDER/$ANALYSIS/$SAMPLE/; cat $(cat $LIST_GENE_PANEL) | cut -f5 | sort -u | wc -l)

GENES_BASES_NUMBER=$(cd $RESULTS_FOLDER/$ANALYSIS/$SAMPLE/; cat $(cat $LIST_GENE_PANEL) | awk '{for(i=$2;i<$3;i++) print $1"\t"i}' | sort -u | wc -l)
GENES_BASES_HTML=$(echo $GENES_BASES_NUMBER | sed ':a;s/\B[0-9]\{3\}\>/,&/;ta')

# VARIANTS count
FINAL_VCF="$RESULTS_FOLDER/$ANALYSIS/$SAMPLE/$SAMPLE.reports/$SAMPLE.final.vcf"
VARIANT_NUMBER=$(grep -cv "^#" $FINAL_VCF)

# PIPELINES count
#PIPELINES_NUMBER=$(echo $PIPELINES | wc -w)
#ALIGNERS_NUMBER=$(echo $ALIGNERS | wc -w)
ALIGNERS_HTML="$ALIGNERS_NUMBER aligner"$([ $ALIGNERS_NUMBER -gt 1 ] && echo "s")
#CALLERS_NUMBER=$(echo $CALLERS | wc -w)
CALLERS_HTML="$CALLERS_NUMBER caller"$([ $CALLERS_NUMBER -gt 1 ] && echo "s")
#ANNOTATORS_NUMBER=$(echo $ANNOTATORS | wc -w)
ANNOTATORS_HTML="$ANNOTATORS_NUMBER annotator"$([ $ANNOTATORS_NUMBER -gt 1 ] && echo "s")
PIPELINES_HTML="<strong>$PIPELINES_NUMBER pipeline"$([ $PIPELINES_NUMBER -gt 1 ] && echo "s")"</strong>"
ALIGNERS_CALLERS_ANNOTATORS_HTML="($ALIGNERS_HTML, $CALLERS_HTML, $ANNOTATORS_HTML)"


# PLAN
echo '<a class="btn btn-primary-outline display-4" href="#'$SECTION_ID'">'$SECTION_NAME'</a>' >> $HTMLFILE_PLAN_LINKS


echo '

	<section class="counters1 counters cid-ru7OEFnzpz" id="'$SECTION_ID'" '$PAGE_BREAK_BEFORE'>
	<br>

		<div class="container">
			<h2 class="mbr-section-title pb-3 align-center mbr-fonts-style display-2">
				'$SECTION_NAME'</h2>
			<h3 class="mbr-section-subtitle mbr-fonts-style display-5">

				<!--Main information of results, on sequenced reads, quality of bases on all reads, total number of genes targeted, and total number of variants found-->

			</h3>

			<div class="container pt-4 mt-2">
				<div class="media-container-row">
					<div class="card p-3 align-center col-12 col-md-6 col-lg-3">
						<div class="panel-item p-3">
							<div class="card-img pb-3">
								<span class="mbr-iconfont mbri-align-center"></span>
							</div>
							<div class="card-text">
								<h3 class=" pt-3 pb-3 mbr-fonts-style display-2">
									  '$TOTAL_SEQUENCES_HTML'</h3>
								<h4 class="mbr-content-title mbr-bold mbr-fonts-style display-7">Number of reads</h4>
								<p class="mbr-content-text mbr-fonts-style display-7">
									corresponding to <strong>'$TOTAL_BASES_HTML'</strong> bases sequenced in <strong>'$SEQUENCING_MODE_HTML'</strong> with <strong>'$SEQUENCING_TECHNOLOGY_HTML'</strong> technology</p>
							</div>
						</div>
					</div>


					<div class="card p-3 align-center col-12 col-md-6 col-lg-3">
						<div class="panel-item p-3">
							<div class="card-img pb-3">
								<span class="mbr-iconfont mbri-like"></span>
							</div>
							<div class="card-text">
								<h3 class=" pt-3 pb-3 mbr-fonts-style display-2">'$Q30_HTML'%</h3>
								<h4 class="mbr-content-title mbr-bold mbr-fonts-style display-7">
									Q30</h4>
								<p class="mbr-content-text mbr-fonts-style display-7">Percentage of bases with <strong>quality score >30</strong> <br>(average across the whole read length)</p>
							</div>
						</div>
					</div>

					<div class="card p-3 align-center col-12 col-md-6 col-lg-3">
						<div class="panel-item p-3">
							<div class="card-img pb-3">
								<span class="mbr-iconfont mbri-menu"></span>
							</div>
							<div class="card-text">
								<h3 class=" pt-3 pb-3 mbr-fonts-style display-2">
									  '$GENES_NUMBER'</h3>
								<h4 class="mbr-content-title mbr-bold mbr-fonts-style display-7">Genes</h4>
								<p class="mbr-content-text mbr-fonts-style display-7">defined in '$(echo "$GENE_PANEL_NUMBER Gene Panel"$([ $GENE_PANEL_NUMBER -gt 1 ] && echo "s"))', corresponding to <br><strong>'$GENES_BASES_HTML' bases</strong></p>
							</div>
						</div>
					</div>


					<div class="card p-3 align-center col-12 col-md-6 col-lg-3">
						<div class="panel-item p-3">
							<div class="card-img pb-3">
								<span class="mbr-iconfont mbri-bulleted-list"></span>
							</div>

							<div class="card-texts">
								 <h3 class=" pt-3 pb-3 mbr-fonts-style display-2">
									  '$VARIANT_NUMBER'</h3>
								<h4 class="mbr-content-title mbr-bold mbr-fonts-style display-7">
									Variants</h4>
								<p class="mbr-content-text mbr-fonts-style display-7">
										SNV, InDel, Other<br>called with '$PIPELINES_HTML'<br>'$ALIGNERS_CALLERS_ANNOTATORS_HTML'</p>
							</div>
						</div>
					</div>

				</div>
			</div>
	   </div>
	</section>

' > $HTMLFILE_SUMMARY



# SEQUENCING
##############

(($VERBOSE)) && echo "#[INFO] SEQUENCING section"


HTMLFILE_SEQUENCING=$HTMLFILE".sequencing"

SECTION_NAME="Sequencing &amp; Mapping"
SECTION_ID="sequencing_mapping"

# FILES
FASTQCDATA="$RESULTS_FOLDER/$ANALYSIS/$SAMPLE/$SAMPLE.sequencing/metrics.fastqc.txt"
FASTQCIMAGESDIR="$RESULTS_FOLDER/$ANALYSIS/$SAMPLE/$SAMPLE.sequencing/"$SAMPLE"_fastqc/Images"

PER_BASE_QUALITY_FILE="$FASTQCIMAGESDIR/per_base_quality.png"
cp $PER_BASE_QUALITY_FILE $HTMLDIR/$(basename $PER_BASE_QUALITY_FILE)
HTML_LOGO="$HTMLFOLDER/$(basename $LOGO)"
PER_BASE_QUALITY_FILE_HTML="$HTMLFOLDER/$(basename $PER_BASE_QUALITY_FILE)"


echo '
<div class="progress1 pb-5">
	<div class="title-wrap">
		<div class="progressbar-title mbr-fonts-style display-7">
			<p>
				Total number of reads | '$TOTAL_SEQUENCES_HTML'
			</p>
		</div>
		<div class="progress_value mbr-fonts-style display-7">
			<span>100.00%</span>
		</div>
	</div>
	<progress class="progress progress-primary " max="'$TOTAL_SEQUENCES'" value="'$TOTAL_SEQUENCES'">
	</progress>
</div>
' > $HTMLFILE_SEQUENCING.total_sequences


# ALIGNERS

> $HTMLFILE_SEQUENCING.aligners

for ALIGNER in $ALIGNERS; do

	(($DEBUG)) && echo "ALIGNER: $ALIGNER";

	# Files
	DESIGN_FLAGSTAT="$RESULTS_FOLDER/$ANALYSIS/$SAMPLE/$SAMPLE.$ALIGNER.bam.metrics/$SAMPLE.$ALIGNER.flagstat"
	DESIGN_ON_TARGET="$RESULTS_FOLDER/$ANALYSIS/$SAMPLE/$SAMPLE.$ALIGNER.bam.metrics/$SAMPLE.$ALIGNER.$SAMPLE.$ALIGNER.design.bed.on.target"

	#(($DEBUG)) && cat $DESIGN_FLAGSTAT;

	# Uniq reads
	UNIQ_READS=$(grep " duplicates" $DESIGN_FLAGSTAT | awk '{print '$TOTAL_SEQUENCES'-$1-$2}')
	UNIQ_READS_HTML=$(echo $UNIQ_READS | sed ':a;s/\B[0-9]\{3\}\>/,&/;ta')
	UNIQ_READS_PERCENT=$(awk 'BEGIN{printf("%.2f\n",('$UNIQ_READS'/'$TOTAL_SEQUENCES')*100)}')

	# Aligned reads
	ALIGNED_READS=$(grep " mapped (" $DESIGN_FLAGSTAT | awk '{print $1+$2}')
	ALIGNED_READS_HTML=$(echo $ALIGNED_READS | sed ':a;s/\B[0-9]\{3\}\>/,&/;ta')
	ALIGNED_READS_PERCENT=$(awk 'BEGIN{printf("%.2f\n",('$ALIGNED_READS'/'$TOTAL_SEQUENCES')*100)}')

	# On target reads
	ON_TARGET_READS=$(cat $DESIGN_ON_TARGET)
	ON_TARGET_READS_HTML=$(echo $ON_TARGET_READS | sed ':a;s/\B[0-9]\{3\}\>/,&/;ta')
	ON_TARGET_READS_PERCENT=$(awk 'BEGIN{printf("%.2f\n",('$ON_TARGET_READS'/'$TOTAL_SEQUENCES')*100)}')


	echo '

		<div class="progress2 pb-5">
			<div class="title-wrap">
				<div class="progressbar-title mbr-fonts-style display-7">
					<p>
						'$ALIGNER' - Uniq reads | '$UNIQ_READS_HTML'
					</p>
				</div>
				<div class="progress_value mbr-fonts-style display-7">
					<span>'$UNIQ_READS_PERCENT'%</span>
				</div>
			</div>
			<progress class="progress progress-primary" max="'$TOTAL_SEQUENCES'" value="'$UNIQ_READS'">
			</progress>
		</div>

		<div class="progress3 pb-5">
			<div class="title-wrap">
				<div class="progressbar-title mbr-fonts-style display-7">
					<p>
						'$ALIGNER' - Aligned reads | '$ALIGNED_READS_HTML'
					</p>
				</div>
				<div class="progress_value mbr-fonts-style display-7">
					<span>'$ALIGNED_READS_PERCENT'%</span>
				</div>
			</div>
			<progress class="progress progress-primary" max="'$TOTAL_SEQUENCES'" value="'$ALIGNED_READS'">
			</progress>
		</div>

		<div class="progress4 pb-5">
			<div class="title-wrap">
				<div class="progressbar-title mbr-fonts-style display-7">
					<p>
						'$ALIGNER' - On target reads | '$ON_TARGET_READS_HTML'
					</p>
				</div>
				<div class="progress_value mbr-fonts-style display-7">
					<span>'$ON_TARGET_READS_PERCENT'%</span>
				</div>
			</div>
			<progress class="progress progress-primary" max="'$TOTAL_SEQUENCES'" value="'$ON_TARGET_READS'">
			</progress>
		</div>

	' >> $HTMLFILE_SEQUENCING.aligners

done;


# PLAN
echo '<a class="btn btn-primary-outline display-4" href="#'$SECTION_ID'">'$SECTION_NAME'</a>' >> $HTMLFILE_PLAN_LINKS


echo '

	<section class="progress-bars2 cid-ru7OEG5hcO" id="'$SECTION_ID'" '$PAGE_BREAK_BEFORE'>
	<br>

		<div class="container">
			<h2 class="mbr-section-title pb-3 align-center mbr-fonts-style display-2">
				'$SECTION_NAME'
			</h2>

			<p class="mbr-section-subtitle mbr-fonts-style display-6 align-center">
				Sequenced reads were mapped to <strong>'$ASSEMBLY'</strong> assembly using aligner'$( [ $(echo $ALIGNERS | wc -w) -gt 1 ] && echo "s")': <strong>'$ALIGNERS'</strong>.
				Reads statistics were determined with <strong>FastQC</strong> (fastq) and <strong>Samtools flagstat</strong> (BAM).
				<strong>On target</strong> calculated on BAM for validation ('$BAM_VALIDATION_TEXT_HTML').
			</p>

			<div class="row pt-1 mt-5">

				<div class="col-md-6 text-elements">

					<h4 class="section-content-title pb-3 align-left mbr-fonts-style display-5">Per base quality</h4>
					<p class="section-content-text align-left mbr-fonts-style display-7">
						<img src="'$PER_BASE_QUALITY_FILE_HTML'" width=100%>
					</p>

				</div>

				<div class="progress_elements col-md-6">

					<h4 class="section-content-title pb-3 align-left mbr-fonts-style display-5">Reads metrics</h4>

					'"$(cat $HTMLFILE_SEQUENCING.total_sequences)"'

					'"$(cat $HTMLFILE_SEQUENCING.aligners)"'

				</div>

			</div>



		</div>

	</section>

' > $HTMLFILE_SEQUENCING




# COVERAGE
############

(($VERBOSE)) && echo "#[INFO] COVERAGE section"

HTMLFILE_COVERAGE=$HTMLFILE".coverage"

SECTION_NAME="Depth &amp; Coverage"
SECTION_ID="depth_coverage"

# FLAGS
PASS_FLAG_ICON='class="mbr-iconfont mbri-smile-face" style="color: rgb(0, 255, 0); fill: rgb(0, 255, 0);"'
WARN_FLAG_ICON='class="mbr-iconfont mbri-sad-face" style="color: rgb(252, 161, 6); fill: rgb(252, 161, 6);"'
FAIL_FLAG_ICON='class="mbr-iconfont mbri-sad-face" style="color: rgb(255, 0, 0); fill: rgb(255, 0, 0);"'


# FILES
HTMLFILE_GENES_PANEL=$HTMLFILE".genes_panel"

GENES_PANEL_NUM=0

for ALIGNER in $ALIGNERS; do

	(($DEBUG)) && echo "ALIGNER: $ALIGNER";

	# FILES
	LIST_GENES_PANEL="$RESULTS_FOLDER/$ANALYSIS/$SAMPLE/$SAMPLE.list.genes"
	#TARGET_DESIGN_FILE="$RESULTS_FOLDER/$ANALYSIS/$SAMPLE/$SAMPLE.$ALIGNER.design.bed"
	TARGET_DESIGN_NAME="$SAMPLE.$ALIGNER.design.bed"

	for GENES_PANEL in $TARGET_DESIGN_NAME $(cat $LIST_GENES_PANEL); do

		# FILES
		GENES_PANEL_FILE="$RESULTS_FOLDER/$ANALYSIS/$SAMPLE/$SAMPLE.$ALIGNER.bam.metrics/$GENES_PANEL"
		GENES_PANEL_GENES_MSG="$RESULTS_FOLDER/$ANALYSIS/$SAMPLE/$SAMPLE.$ALIGNER.bam.metrics/$SAMPLE.$ALIGNER.$GENES_PANEL.genes.msg"
		GENES_PANEL_DEPTHBED_COVS="$RESULTS_FOLDER/$ANALYSIS/$SAMPLE/$SAMPLE.$ALIGNER.bam.metrics/$SAMPLE.$ALIGNER.$GENES_PANEL.coverage"

		if [ -s $GENES_PANEL_FILE ]; then

			((GENES_PANEL_NUM++))

			if [ "$GENES_PANEL" == "$TARGET_DESIGN_NAME" ]; then
				GENES_PANEL_NAME="Target Design"
				GENE_PANEL_NAME_HTML="$GENES_PANEL_NAME"
				GENE_PANEL_TYPE_HTML="Target<br>Regions"
				GENE_PANEL_TYPE_NAME_HTML="Region"
			else
				GENES_PANEL_NAME=$(echo $GENES_PANEL | sed "s/^$SAMPLE.//" | sed "s/.genes$//")
				GENE_PANEL_NAME_HTML="Gene Panel<br>$GENES_PANEL_NAME"
				GENE_PANEL_TYPE_HTML="Gene<br>Panel"
				GENE_PANEL_TYPE_NAME_HTML="Gene"
			fi;


			(($DEBUG)) && echo "GENES_PANEL: $GENES_PANEL";
			(($DEBUG)) && echo "GENES_PANEL_NAME: $GENES_PANEL_NAME";
			(($DEBUG)) && echo "GENES_PANEL_NUM: "$GENES_PANEL_NUM



			#(($DEBUG)) && cat $GENES_PANEL_DEPTHBED_COVS

			# GENES PANEL INFO
			GENES_PANEL_GENES_NUMBER=$(cat $GENES_PANEL_FILE | grep -v "^#" | grep -v "^@" | cut -f5 | sort -u | wc -l)
			GENES_PANEL_GENES_NUMBER_HTML=$(echo $GENES_PANEL_GENES_NUMBER | sed ':a;s/\B[0-9]\{3\}\>/,&/;ta')

			GENES_PANEL_REGIONS_NUMBER=$(cat $GENES_PANEL_FILE | grep -v "^#" | grep -v "^@" | wc -l)
			GENES_PANEL_REGIONS_NUMBER_HTML=$(echo $GENES_PANEL_REGIONS_NUMBER | sed ':a;s/\B[0-9]\{3\}\>/,&/;ta')
			[ "$GENES_PANEL" == "$TARGET_DESIGN_NAME" ] && GENES_PANEL_GENES_NUMBER=$GENES_PANEL_REGIONS_NUMBER && GENES_PANEL_GENES_NUMBER_HTML=$GENES_PANEL_REGIONS_NUMBER_HTML


			GENES_PANEL_BASES_NUMBER=$(cat $GENES_PANEL_FILE | grep -v "^#" | grep -v "^@" | awk '{for(i=$2;i<$3;i++) print $1"\t"i}' | sort -u | wc -l)
			GENES_PANEL_BASES_NUMBER_HTML=$(echo $GENES_PANEL_BASES_NUMBER | sed ':a;s/\B[0-9]\{3\}\>/,&/;ta')

			GENES_PANEL_ALIGNER=$ALIGNER
			GENES_PANEL_ALIGNER_HTML=$GENES_PANEL_ALIGNER

			# GENES PANEL SEQUENCING PANEL COVERAGE
			GENES_PANEL_SEQUENCING_PANEL_COVERAGE=$(grep "^"$SEQUENCING_DEPTH"X" $GENES_PANEL_DEPTHBED_COVS | cut -f4)
			GENES_PANEL_SEQUENCING_PANEL_COVERAGE_HTML=$(awk 'BEGIN{printf("%.1f\n",'$GENES_PANEL_SEQUENCING_PANEL_COVERAGE'*100)}')"%"
			#GENES_PANEL_SEQUENCING_PANEL_COVERAGE_MESSAGE="$GENES_PANEL_SEQUENCING_PANEL_COVERAGE"
			[ $GENES_PANEL_SEQUENCING_PANEL_COVERAGE_HTML == "100.0%" ] && GENES_PANEL_SEQUENCING_PANEL_COVERAGE_HTML="100%"
			(( $(echo "$GENES_PANEL_SEQUENCING_PANEL_COVERAGE >= $SEQUENCING_COVERAGE_THRESHOLD" |bc -l) )) && GENES_PANEL_SEQUENCING_PANEL_COVERAGE_FLAG=$PASS_FLAG_ICON || GENES_PANEL_SEQUENCING_PANEL_COVERAGE_FLAG=$FAIL_FLAG_ICON

			# GENES PANEL MINIMUM PANEL COVERAGE
			GENES_PANEL_MINIMUM_PANEL_COVERAGE=$(grep "^"$MINIMUM_DEPTH"X" $GENES_PANEL_DEPTHBED_COVS | cut -f4)
			GENES_PANEL_MINIMUM_PANEL_COVERAGE_HTML=$(awk 'BEGIN{printf("%.1f\n",'$GENES_PANEL_MINIMUM_PANEL_COVERAGE'*100)}')"%"
			#GENES_PANEL_MINIMUM_PANEL_COVERAGE_MESSAGE="$GENES_PANEL_MINIMUM_PANEL_COVERAGE"
			[ $GENES_PANEL_MINIMUM_PANEL_COVERAGE_HTML == "100.0%" ] && GENES_PANEL_MINIMUM_PANEL_COVERAGE_HTML="100%"
			(( $(echo "$GENES_PANEL_MINIMUM_PANEL_COVERAGE >= $DEPTH_COVERAGE_THRESHOLD" |bc -l) )) && GENES_PANEL_MINIMUM_PANEL_COVERAGE_FLAG=$PASS_FLAG_ICON || GENES_PANEL_MINIMUM_PANEL_COVERAGE_FLAG=$FAIL_FLAG_ICON

			# GENES PANEL EXPECTED PANEL COVERAGE
			GENES_PANEL_EXPECTED_PANEL_COVERAGE=$(grep "^"$EXPECTED_DEPTH"X" $GENES_PANEL_DEPTHBED_COVS | cut -f4)
			GENES_PANEL_EXPECTED_PANEL_COVERAGE_HTML=$(awk 'BEGIN{printf("%.1f\n",'$GENES_PANEL_EXPECTED_PANEL_COVERAGE'*100)}')"%"
			#GENES_PANEL_EXPECTED_PANEL_COVERAGE_MESSAGE="$GENES_PANEL_EXPECTED_PANEL_COVERAGE"
			[ $GENES_PANEL_EXPECTED_PANEL_COVERAGE_HTML == "100.0%" ] && GENES_PANEL_EXPECTED_PANEL_COVERAGE_HTML="100%"
			(( $(echo "$GENES_PANEL_EXPECTED_PANEL_COVERAGE >= $DEPTH_COVERAGE_THRESHOLD" |bc -l) )) && GENES_PANEL_EXPECTED_PANEL_COVERAGE_FLAG=$PASS_FLAG_ICON || GENES_PANEL_EXPECTED_PANEL_COVERAGE_FLAG=$WARN_FLAG_ICON

			# GENES PANEL FAIL GENES COVERAGE
			GENES_PANEL_FAIL_GENES_NUMBER=$(cat $GENES_PANEL_GENES_MSG | cut -f2 | grep "^FAIL$" -c)
			GENES_PANEL_FAIL_GENES_NUMBER_HTML=$GENES_PANEL_FAIL_GENES_NUMBER
			#GENES_PANEL_FAIL_GENES_NUMBER_MESSAGE="$GENES_PANEL_FAIL_GENES_NUMBER"
			(( $GENES_PANEL_FAIL_GENES_NUMBER )) && GENES_PANEL_FAIL_GENES_NUMBER_FLAG=$FAIL_FLAG_ICON || GENES_PANEL_FAIL_GENES_NUMBER_FLAG=$PASS_FLAG_ICON

			# GENES PANEL WARN GENES COVERAGE
			#GENES_PANEL_WARN_GENES_NUMBER=$(cat $GENES_PANEL_GENES_MSG | cut -f2 | grep "^WARN$" -c)
			GENES_PANEL_WARN_GENES_NUMBER=$(cat $GENES_PANEL_GENES_MSG | cut -f2 | grep -e "^WARN$" -e "^FAIL$" -c) #
			GENES_PANEL_WARN_GENES_NUMBER_HTML=$GENES_PANEL_WARN_GENES_NUMBER
			#GENES_PANEL_WARN_GENES_NUMBER_MESSAGE="$GENES_PANEL_WARN_GENES_NUMBER"
			(( $GENES_PANEL_WARN_GENES_NUMBER )) && GENES_PANEL_WARN_GENES_NUMBER_FLAG=$WARN_FLAG_ICON || GENES_PANEL_WARN_GENES_NUMBER_FLAG=$PASS_FLAG_ICON

			# BREAK
			(( $(echo "$GENES_PANEL_NUM >= 2" |bc -l) )) && GENES_PANEL_BREAK=$PAGE_BREAK_BEFORE || GENES_PANEL_BREAK=""



			echo '

				<h3 class="mbr-section-subtitle mbr-fonts-style display-5" '$GENES_PANEL_BREAK'>
				<br>
					'$GENE_PANEL_NAME_HTML'
				</h3>

				<div class="container pt-4 mt-2">
					<div class="media-container-row">

						<div class="card p-3 align-center col-12 col-md-6 col-lg-2">
							<div class="panel-item">
								<div class="card-img pb-3">
									<span class="mbr-iconfont mbri-info"></span>
								</div>

								<div class="card-text">
									<h3 class=" pt-3 pb-3 mbr-fonts-style display-2">
										'$GENES_PANEL_GENES_NUMBER_HTML'
									</h3>
									<h4 class="mbr-content-title mbr-bold mbr-fonts-style display-7">
										'$GENE_PANEL_TYPE_HTML'
										<br>
										&nbsp;
									</h4>
									<p class="mbr-content-text mbr-fonts-style display-7">
										'$GENES_PANEL_BASES_NUMBER_HTML' bases
										<br>
										'$GENES_PANEL_REGIONS_NUMBER_HTML' '$GENE_PANEL_TYPE_NAME_HTML's
										<br>
										'$GENES_PANEL_ALIGNER_HTML' aligner
									</p>
								</div>
							</div>
						</div>

						<div class="card p-3 align-center col-12 col-md-6 col-lg-2">
							<div class="panel-item">
								<div class="card-img pb-3">
									<span '$GENES_PANEL_SEQUENCING_PANEL_COVERAGE_FLAG'></span>
								</div>

								<div class="card-text">
									<h3 class=" pt-3 pb-3 mbr-fonts-style display-2">
										'$GENES_PANEL_SEQUENCING_PANEL_COVERAGE_HTML'
									</h3>
									<h4 class="mbr-content-title mbr-bold mbr-fonts-style display-7">
										Sequencing
										<br>
										Panel coverage
										<br>
										'$SEQUENCING_DEPTH'X
									</h4>
									<p class="mbr-content-text mbr-fonts-style display-7">
										% of sequenced bases
									</p>
								</div>
							</div>
						</div>

						<div class="card p-3 align-center col-12 col-md-6 col-lg-2">
							<div class="panel-item">
								<div class="card-img pb-3">
									<span '$GENES_PANEL_MINIMUM_PANEL_COVERAGE_FLAG'></span>
								</div>
								<div class="card-text">
									<h3 class=" pt-3 pb-3 mbr-fonts-style display-2">
										'$GENES_PANEL_MINIMUM_PANEL_COVERAGE_HTML'
									</h3>
									<h4 class="mbr-content-title mbr-bold mbr-fonts-style display-7">
										Minimum
										<br>
										Panel coverage
										<br>
										'$MINIMUM_DEPTH'X
									</h4>
									<p class="mbr-content-text mbr-fonts-style display-7">
										% of bases with minimum depth
									</p>
								</div>
							</div>
						</div>

						<div class="card p-3 align-center col-12 col-md-6 col-lg-2">
							<div class="panel-item">
								<div class="card-img pb-3">
									<span '$GENES_PANEL_EXPECTED_PANEL_COVERAGE_FLAG'></span>
								</div>

								<div class="card-text">
									<h3 class=" pt-3 pb-3 mbr-fonts-style display-2">
										'$GENES_PANEL_EXPECTED_PANEL_COVERAGE_HTML'
									</h3>
									<h4 class="mbr-content-title mbr-bold mbr-fonts-style display-7">
										Expected
										<br>
										Panel coverage
										<br>
										'$EXPECTED_DEPTH'X
									</h4>
									<p class="mbr-content-text mbr-fonts-style display-7">
										% of bases with expected depth
									</p>
								</div>
							</div>
						</div>

						<div class="card p-3 align-center col-12 col-md-6 col-lg-2">
							<div class="panel-item">
								<div class="card-img pb-3">
									<span '$GENES_PANEL_FAIL_GENES_NUMBER_FLAG'></span>
								</div>

								<div class="card-texts">
									 <h3 class=" pt-3 pb-3 mbr-fonts-style display-2">
										'$GENES_PANEL_FAIL_GENES_NUMBER_HTML'
									</h3>
									<h4 class="mbr-content-title mbr-bold mbr-fonts-style display-7">
										Failed
										<br>
										'$GENE_PANEL_TYPE_NAME_HTML' coverage
										<br>
										'$MINIMUM_DEPTH'X
									</h4>
									<p class="mbr-content-text mbr-fonts-style display-7">
										# of '$GENE_PANEL_TYPE_NAME_HTML's with failed coverage
									</p>
								</div>
							</div>
						</div>

						<div class="card p-3 align-center col-12 col-md-6 col-lg-2">
							<div class="panel-item">
								<div class="card-img pb-3">
									<span '$GENES_PANEL_WARN_GENES_NUMBER_FLAG'></span>
								</div>
								<div class="card-text">
									<h3 class=" pt-3 pb-3 mbr-fonts-style display-2">
										'$GENES_PANEL_WARN_GENES_NUMBER_HTML'
									</h3>
									<h4 class="mbr-content-title mbr-bold mbr-fonts-style display-7">
										Warning
										<br>
										'$GENE_PANEL_TYPE_NAME_HTML' coverage
										<br>
										'$EXPECTED_DEPTH'X
									</h4>
									<p class="mbr-content-text mbr-fonts-style display-7">
										# of '$GENE_PANEL_TYPE_NAME_HTML's with warning coverage
									</p>
							</div>
						</div>

					</div>
				</div>

			' >> $HTMLFILE_GENES_PANEL

		fi;

	done;


done;


# PLAN
echo '<a class="btn btn-primary-outline display-4" href="#'$SECTION_ID'">'$SECTION_NAME'</a>' >> $HTMLFILE_PLAN_LINKS


echo '

	<section class="counters1 counters cid-ru7OEH6r7i" id="'$SECTION_ID'" '$PAGE_BREAK_BEFORE'>
	<br>

	    <div class="container">
	        <h2 class="mbr-section-title pb-3 align-center mbr-fonts-style display-2">
	            '$SECTION_NAME'
			</h2>

			<p class="mbr-section-subtitle mbr-fonts-style display-6 align-center">
				Depth and coverage generated with <strong>Samtools mpileup</strong> and <strong>Picard CollectHsMetrics</strong>
				<br>
				on BAM for validation ('$BAM_VALIDATION_TEXT_HTML').
				<br>
				Minimum depth <strong>'$MINIMUM_DEPTH'X</strong>,
				Expected depth <strong>'$EXPECTED_DEPTH'X</strong>,
				Sequencing coverage threshold <strong>'$(awk 'BEGIN{printf("%.1f\n",'$SEQUENCING_COVERAGE_THRESHOLD'*100)}')'%</strong>,
				Minimum & Expected depth coverage threshold <strong>'$(awk 'BEGIN{printf("%.1f\n",'$DEPTH_COVERAGE_THRESHOLD'*100)}')'%</strong>
			</p>

			'"$(cat $HTMLFILE_GENES_PANEL)"'



	   </div>
	</section>

' > $HTMLFILE_COVERAGE




# AMPLICON CLIPPING
###################

(($VERBOSE)) && echo "#[INFO] AMPLICON CLIPPING section"

HTMLFILE_AMPLICON_CLIPPING=$HTMLFILE".amplicon_clipping"

SECTION_NAME="Amplicon Clipping"
SECTION_ID="amplicon_clipping"

# FLAGS
PASS_FLAG_ICON='class="mbr-iconfont mbri-smile-face" style="color: rgb(0, 255, 0); fill: rgb(0, 255, 0);"'
WARN_FLAG_ICON='class="mbr-iconfont mbri-sad-face" style="color: rgb(252, 161, 6); fill: rgb(252, 161, 6);"'
FAIL_FLAG_ICON='class="mbr-iconfont mbri-sad-face" style="color: rgb(255, 0, 0); fill: rgb(255, 0, 0);"'


# FILES
HTMLFILE_AMPLICON_CLIPPING_ALIGNERS=$HTMLFILE".amplicon_clipping.aligners"

GENES_PANEL_NUM=0

for ALIGNER in $ALIGNERS; do

	(($DEBUG)) && echo "ALIGNER: $ALIGNER";

	# FILES
	GENES_PANEL="$SAMPLE.$ALIGNER.design.bed"
	GENES_PANEL_FILE="$RESULTS_FOLDER/$ANALYSIS/$SAMPLE/$SAMPLE.$ALIGNER.bam.metrics/$GENES_PANEL"
	AMPLICON_COVERAGE="$RESULTS_FOLDER/$ANALYSIS/$SAMPLE/$SAMPLE.$ALIGNER.bam.metrics/$SAMPLE.$ALIGNER.amplicon_coverage"


	if [ -s $GENES_PANEL_FILE ] && [ -s $AMPLICON_COVERAGE ]; then

		((GENES_PANEL_NUM++))


		GENES_PANEL_NAME="Target Design"
		GENE_PANEL_NAME_HTML="$GENES_PANEL_NAME"
		GENE_PANEL_TYPE_HTML="Target<br>Regions"


		#(($DEBUG)) && cat $GENES_PANEL_DEPTHBED_COVS

		# GENES PANEL INFO
		GENES_PANEL_GENES_NUMBER=$(cat $GENES_PANEL_FILE | grep -v "^#" | grep -v "^@" | cut -f5 | sort -u | wc -l)
		GENES_PANEL_GENES_NUMBER_HTML=$(echo $GENES_PANEL_GENES_NUMBER | sed ':a;s/\B[0-9]\{3\}\>/,&/;ta')

		GENES_PANEL_REGIONS_NUMBER=$(cat $GENES_PANEL_FILE | grep -v "^#" | grep -v "^@" | wc -l)
		GENES_PANEL_REGIONS_NUMBER_HTML=$(echo $GENES_PANEL_REGIONS_NUMBER | sed ':a;s/\B[0-9]\{3\}\>/,&/;ta')
		#[ "$GENES_PANEL_NAME" == "Target Design" ] && GENES_PANEL_GENES_NUMBER=$GENES_PANEL_REGIONS_NUMBER && GENES_PANEL_GENES_NUMBER_HTML=$GENES_PANEL_REGIONS_NUMBER_HTML

		GENES_PANEL_BASES_NUMBER=$(cat $GENES_PANEL_FILE | grep -v "^#" | grep -v "^@" | awk '{for(i=$2;i<$3;i++) print $1"\t"i}' | sort -u | wc -l)
		GENES_PANEL_BASES_NUMBER_HTML=$(echo $GENES_PANEL_BASES_NUMBER | sed ':a;s/\B[0-9]\{3\}\>/,&/;ta')

		GENES_PANEL_ALIGNER=$ALIGNER
		GENES_PANEL_ALIGNER_HTML=$GENES_PANEL_ALIGNER


		# AMPLICON COVERAGE
		AMPLICON_COVERAGE_AVERAGE_DEPTH=$(tail -n +1 $AMPLICON_COVERAGE | awk -F"\t" '
			BEGIN {
				sum=0
			}
			{
			    sum+=$7
			    # The script should NOT print out a value for each line
			}
			# The END block is processed after the last line is read
			END {
			    # NR is a variable equal to the number of rows in the file
			    printf("%.0f\n",sum/ NR)
			    # Change this to print the Average instead of just the number of rows
			}' )

		(( $(echo "$AMPLICON_COVERAGE_AVERAGE_DEPTH >= $MINIMUM_DEPTH" | bc -l) )) && AMPLICON_COVERAGE_AVERAGE_DEPTH_FLAG=$PASS_FLAG_ICON || AMPLICON_COVERAGE_AVERAGE_DEPTH_FLAG=$FAIL_FLAG_ICON

		AMPLICON_COVERAGE_FAIL_MINIMUM_DEPTH_NUMBER=$(tail -n +1 $AMPLICON_COVERAGE | awk -F"\t" '
			BEGIN {
				num=0
			}
			{
			    if ($11<'$MINIMUM_DEPTH') {num+=1}
			    # The script should NOT print out a value for each line
			}
			# The END block is processed after the last line is read
			END {
			    # NR is a variable equal to the number of rows in the file
			    print num
			    # Change this to print the Average instead of just the number of rows
			}' )

		(( $AMPLICON_COVERAGE_FAIL_MINIMUM_DEPTH_NUMBER )) && AMPLICON_COVERAGE_FAIL_MINIMUM_DEPTH_NUMBER_FLAG=$FAIL_FLAG_ICON || AMPLICON_COVERAGE_FAIL_MINIMUM_DEPTH_NUMBER_FLAG=$PASS_FLAG_ICON

		AMPLICON_COVERAGE_WARN_MINIMUM_DEPTH_NUMBER=$(tail -n +1 $AMPLICON_COVERAGE | awk -F"\t" '
			BEGIN {
				num=0
			}
			{
				if ($11<'$EXPECTED_DEPTH') {num+=1}
				# The script should NOT print out a value for each line
			}
			# The END block is processed after the last line is read
			END {
				# NR is a variable equal to the number of rows in the file
				print num
				# Change this to print the Average instead of just the number of rows
			}' )

		(( $AMPLICON_COVERAGE_WARN_MINIMUM_DEPTH_NUMBER )) && AMPLICON_COVERAGE_WARN_MINIMUM_DEPTH_NUMBER_FLAG=$WARN_FLAG_ICON || AMPLICON_COVERAGE_WARN_MINIMUM_DEPTH_NUMBER_FLAG=$PASS_FLAG_ICON

		AMPLICON_COVERAGE_FAIL_AVERAGE_DEPTH_NUMBER=$(tail -n +1 $AMPLICON_COVERAGE | awk -F"\t" '
			BEGIN {
				num=0
			}
			{
				if ($7<'$MINIMUM_DEPTH') {num+=1}
				# The script should NOT print out a value for each line
			}
			# The END block is processed after the last line is read
			END {
				# NR is a variable equal to the number of rows in the file
				print num
				# Change this to print the Average instead of just the number of rows
			}' )

		(( $AMPLICON_COVERAGE_FAIL_AVERAGE_DEPTH_NUMBER )) && AMPLICON_COVERAGE_FAIL_AVERAGE_DEPTH_NUMBER_FLAG=$FAIL_FLAG_ICON || AMPLICON_COVERAGE_FAIL_AVERAGE_DEPTH_NUMBER_FLAG=$PASS_FLAG_ICON

		AMPLICON_COVERAGE_WARN_AVERAGE_DEPTH_NUMBER=$(tail -n +1 $AMPLICON_COVERAGE | awk -F"\t" '
			BEGIN {
				num=0
			}
			{
				if ($7<'$EXPECTED_DEPTH') {num+=1}
				# The script should NOT print out a value for each line
			}
			# The END block is processed after the last line is read
			END {
				# NR is a variable equal to the number of rows in the file
				print num
				# Change this to print the Average instead of just the number of rows
			}' )

		(( $AMPLICON_COVERAGE_WARN_AVERAGE_DEPTH_NUMBER )) && AMPLICON_COVERAGE_WARN_AVERAGE_DEPTH_NUMBER_FLAG=$WARN_FLAG_ICON || AMPLICON_COVERAGE_WARN_AVERAGE_DEPTH_NUMBER_FLAG=$PASS_FLAG_ICON

		# BREAK
		(( $(echo "$GENES_PANEL_NUM >= 2" |bc -l) )) && GENES_PANEL_BREAK=$PAGE_BREAK_BEFORE || GENES_PANEL_BREAK=""

		echo '

			<h3 class="mbr-section-subtitle mbr-fonts-style display-5" '$GENES_PANEL_BREAK'>
			<br>
				'$GENE_PANEL_NAME_HTML'
			</h3>

			<div class="container pt-4 mt-2">
				<div class="media-container-row">

					<div class="card p-3 align-center col-12 col-md-6 col-lg-2">
						<div class="panel-item">
							<div class="card-img pb-3">
								<span class="mbr-iconfont mbri-info"></span>
							</div>

							<div class="card-text">
								<h3 class=" pt-3 pb-3 mbr-fonts-style display-2">
									'$GENES_PANEL_REGIONS_NUMBER_HTML'
								</h3>
								<h4 class="mbr-content-title mbr-bold mbr-fonts-style display-7">
									'$GENE_PANEL_TYPE_HTML'
									<br>
									&nbsp;
								</h4>
								<p class="mbr-content-text mbr-fonts-style display-7">
									'$GENES_PANEL_BASES_NUMBER_HTML' bases
									<br>
									'$GENES_PANEL_REGIONS_NUMBER_HTML' regions
									<br>
									'$GENES_PANEL_ALIGNER_HTML' aligner
								</p>
							</div>
						</div>
					</div>

					<div class="card p-3 align-center col-12 col-md-6 col-lg-2">
						<div class="panel-item">
							<div class="card-img pb-3">
								<span '$AMPLICON_COVERAGE_AVERAGE_DEPTH_FLAG'></span>
							</div>

							<div class="card-text">
								<h3 class=" pt-3 pb-3 mbr-fonts-style display-2">
									'$AMPLICON_COVERAGE_AVERAGE_DEPTH'
								</h3>
								<h4 class="mbr-content-title mbr-bold mbr-fonts-style display-7">
									Whole Design
									<br>
									Average Depth
									<br>
									'$MINIMUM_DEPTH'X
								</h4>
								<p class="mbr-content-text mbr-fonts-style display-7">
									for all target regions
									<br>
									in the design
								</p>
							</div>
						</div>
					</div>

					<div class="card p-3 align-center col-12 col-md-6 col-lg-2">
						<div class="panel-item">
							<div class="card-img pb-3">
								<span '$AMPLICON_COVERAGE_FAIL_MINIMUM_DEPTH_NUMBER_FLAG'></span>
							</div>

							<div class="card-texts">
								 <h3 class=" pt-3 pb-3 mbr-fonts-style display-2">
									'$AMPLICON_COVERAGE_FAIL_MINIMUM_DEPTH_NUMBER'
								</h3>
								<h4 class="mbr-content-title mbr-bold mbr-fonts-style display-7">
									Failed Minimum
									<br>
									Amplicon Depth
									<br>
									'$MINIMUM_DEPTH'X
								</h4>
								<p class="mbr-content-text mbr-fonts-style display-7">
									# of amplicon with failed minimum depth
								</p>
							</div>
						</div>
					</div>

					<div class="card p-3 align-center col-12 col-md-6 col-lg-2">
						<div class="panel-item">
							<div class="card-img pb-3">
								<span '$AMPLICON_COVERAGE_WARN_MINIMUM_DEPTH_NUMBER_FLAG'></span>
							</div>
							<div class="card-text">
								<h3 class=" pt-3 pb-3 mbr-fonts-style display-2">
									'$AMPLICON_COVERAGE_WARN_MINIMUM_DEPTH_NUMBER'
								</h3>
								<h4 class="mbr-content-title mbr-bold mbr-fonts-style display-7">
									Warning Minimum
									<br>
									Amplicon Depth
									<br>
									'$EXPECTED_DEPTH'X
								</h4>
								<p class="mbr-content-text mbr-fonts-style display-7">
									# of amplicon with warning minimum depth
								</p>
							</div>
						</div>
					</div>

					<div class="card p-3 align-center col-12 col-md-6 col-lg-2">
						<div class="panel-item">
							<div class="card-img pb-3">
								<span '$AMPLICON_COVERAGE_FAIL_AVERAGE_DEPTH_NUMBER_FLAG'></span>
							</div>

							<div class="card-texts">
								 <h3 class=" pt-3 pb-3 mbr-fonts-style display-2">
									'$AMPLICON_COVERAGE_FAIL_AVERAGE_DEPTH_NUMBER'
								</h3>
								<h4 class="mbr-content-title mbr-bold mbr-fonts-style display-7">
									Failed Average
									<br>
									Amplicon Depth
									<br>
									'$MINIMUM_DEPTH'X
								</h4>
								<p class="mbr-content-text mbr-fonts-style display-7">
									# of amplicon with failed average depth
								</p>
							</div>
						</div>
					</div>

					<div class="card p-3 align-center col-12 col-md-6 col-lg-2">
						<div class="panel-item">
							<div class="card-img pb-3">
								<span '$AMPLICON_COVERAGE_WARN_AVERAGE_DEPTH_NUMBER_FLAG'></span>
							</div>
							<div class="card-text">
								<h3 class=" pt-3 pb-3 mbr-fonts-style display-2">
									'$AMPLICON_COVERAGE_WARN_AVERAGE_DEPTH_NUMBER'
								</h3>
								<h4 class="mbr-content-title mbr-bold mbr-fonts-style display-7">
									Warning Average
									<br>
									Amplicon Depth
									<br>
									'$EXPECTED_DEPTH'X
								</h4>
								<p class="mbr-content-text mbr-fonts-style display-7">
									# of amplicon with warning average depth
								</p>
							</div>
						</div>
					</div>
				</div>
			</div>

		' >> $HTMLFILE_AMPLICON_CLIPPING_ALIGNERS

	fi;

done;


if (($GENES_PANEL_NUM)); then

	# PLAN
	echo '<a class="btn btn-primary-outline display-4" href="#'$SECTION_ID'">'$SECTION_NAME'</a>' >> $HTMLFILE_PLAN_LINKS

	echo '

		<section class="counters1 counters cid-ru7OEH6r7i" id="'$SECTION_ID'" '$PAGE_BREAK_BEFORE'>
		<br>

		    <div class="container">
		        <h2 class="mbr-section-title pb-3 align-center mbr-fonts-style display-2">
		            '$SECTION_NAME'
				</h2>

				<p class="mbr-section-subtitle mbr-fonts-style display-6 align-center">
					Amplicon clipping generated with <strong>CAP</strong> and depth metrics with <strong>Picard CollectHsMetrics</strong> on all <strong>Target Design</strong>
					<br>
					Minimum depth <strong>'$MINIMUM_DEPTH'X</strong>,
					Expected depth <strong>'$EXPECTED_DEPTH'X</strong>
				</p>

				'"$(cat $HTMLFILE_AMPLICON_CLIPPING_ALIGNERS)"'



		   </div>
		</section>

	' > $HTMLFILE_AMPLICON_CLIPPING

else

	> $HTMLFILE_AMPLICON_CLIPPING

fi;



# VARIANT CALLING
###################

(($VERBOSE)) && echo "#[INFO] VARIANT CALLING section"

HTMLFILE_CALLING=$HTMLFILE".calling"

SECTION_NAME="Variant Calling"
SECTION_ID="variant_calling"

ALIGNERS_NUMBER_HTML=$ALIGNERS_NUMBER" aligner"$( [ $ALIGNERS_NUMBER -gt 1 ] && echo "s" )
CALLERS_NUMBER_HTML=$CALLERS_NUMBER" caller"$( [ $CALLERS_NUMBER -gt 1 ] && echo "s" )


HTMLFILE_CALLING_PIPELINES=$HTMLFILE".calling.pipelines"

> $HTMLFILE_CALLING_PIPELINES

for PIPELINE in $PIPELINES; do

	(($DEBUG)) && echo "PIPELINE: $PIPELINE";

	ALIGNERS_CALLERS_HTML=$(echo $PIPELINE | cut -d. -f1,2 --output-delimiter=. | sed "s/\./<br>/gi")


	# FILES
	VCF="$RESULTS_FOLDER/$ANALYSIS/$SAMPLE/$SAMPLE.$PIPELINE.vcf"
	VCF_BCFTOOLS_STATS="$RESULTS_FOLDER/$ANALYSIS/$SAMPLE/$SAMPLE.$PIPELINE.vcf.metrics/metrics.bcftools.stats"

	VARIANTS_PIPELINE_NUMBER=$(grep "number of records:" $VCF_BCFTOOLS_STATS | cut -f4)
	VARIANTS_PIPELINE_PERCENT=$(awk 'BEGIN{printf("%.2f\n",('$VARIANTS_PIPELINE_NUMBER'/'$VARIANT_NUMBER')*100)}')"%"

	echo '

		<div class="card p-3 align-center">
			<div class="wrap">
				<div class="pie_progress progress1" role="progressbar" data-goal="'$VARIANTS_PIPELINE_PERCENT'">
					<p class="pie_progress__number mbr-fonts-style display-5">'$VARIANTS_PIPELINE_NUMBER'</p>
				</div>
			</div>
			<div class="mbr-crt-title pt-3">
				<h4 class="mbr-content-title mbr-bold mbr-fonts-style display-7">
					'$VARIANTS_PIPELINE_NUMBER' variants
				</h4>
				<p class="mbr-content-text mbr-fonts-style display-7">
					'$ALIGNERS_CALLERS_HTML'
				</p>
			</div>
		</div>

	' >> $HTMLFILE_CALLING_PIPELINES


done;

# PLAN
echo '<a class="btn btn-primary-outline display-4" href="#'$SECTION_ID'">'$SECTION_NAME'</a>' >> $HTMLFILE_PLAN_LINKS

echo '

	<section class="progress-bars3 cid-ru7OEIGjX3" id="'$SECTION_ID'" '$PAGE_BREAK_BEFORE'>
	<br>
	    <div class="container">
	        <h2 class="mbr-section-title pb-3 align-center mbr-fonts-style display-2">
				'$SECTION_NAME'
			</h2>

			<p class="mbr-section-subtitle mbr-fonts-style display-6 align-center">
			<strong>'$VARIANT_NUMBER' Variants</strong> were identified with '$ALIGNERS_NUMBER_HTML' and '$CALLERS_NUMBER_HTML'
			</p>

	        <div class="media-container-row pt-2 mt-2">

			'"$(cat $HTMLFILE_CALLING_PIPELINES)"'

	        </div>
		</div>
	</section>

' > $HTMLFILE_CALLING



if ((1)); then

# VARIANT CALLING STATS
###################

(($VERBOSE)) && echo "#[INFO] VARIANT CALLING STATS section"

HTMLFILE_VARIANTS_STATS=$HTMLFILE".variants.stats"

SECTION_NAME="Variant Stats"
SECTION_ID="variant_stats"


HTMLFILE_VARIANTS_STATS_GENES_PANEL=$HTMLFILE".variants.genes_panel"
> $HTMLFILE_VARIANTS_STATS_GENES_PANEL


# FILES
LIST_GENES_PANEL="$RESULTS_FOLDER/$ANALYSIS/$SAMPLE/$SAMPLE.list.genes"
#TARGET_DESIGN_FILE="$RESULTS_FOLDER/$ANALYSIS/$SAMPLE/$SAMPLE.$ALIGNER.design.bed"
TARGET_DESIGN_NAME="$SAMPLE.$ALIGNER.design.bed"


GENES_PANEL_NUM=0

for GENES_PANEL in "Target Design" $(cat $LIST_GENES_PANEL); do

	((GENES_PANEL_NUM++))

	if [ "$GENES_PANEL" == "Target Design" ]; then
		GENES_PANEL_NAME="Target Design"
		GENE_PANEL_NAME_HTML="$GENES_PANEL_NAME"
		GENE_PANEL_TYPE_HTML="Target<br>Regions"
		GENE_PANEL_TYPE_NAME_HTML="Region"
		GENES_PANEL_FILE="$RESULTS_FOLDER/$ANALYSIS/$SAMPLE/$SAMPLE.bed"
	else
		GENES_PANEL_NAME=$(echo $GENES_PANEL | sed "s/^$SAMPLE.//" | sed "s/.genes$//")
		GENE_PANEL_NAME_HTML="Gene Panel<br>$GENES_PANEL_NAME"
		GENE_PANEL_TYPE_HTML="Gene<br>Panel"
		GENE_PANEL_TYPE_NAME_HTML="Gene"
		GENES_PANEL_FILE="$RESULTS_FOLDER/$ANALYSIS/$SAMPLE/$GENES_PANEL"
	fi;


	# FILES
	#GENES_PANEL_FILE="$RESULTS_FOLDER/$ANALYSIS/$SAMPLE/$GENES_PANEL"

	# FILES
	if [ "$GENES_PANEL" == "Target Design" ]; then
		BCFTOOLS_STATS=$RESULTS_FOLDER/$ANALYSIS/$SAMPLE/$SAMPLE.reports/$SAMPLE.final.vcf.metrics/metrics.bcftools.stats
	else
		#ls $RESULTS_FOLDER/$ANALYSIS/$SAMPLE/$SAMPLE.reports/$SAMPLE.final.vcf.metrics/metrics*$GENES_PANEL*.bcftools.stats
		BCFTOOLS_STATS=$(ls $RESULTS_FOLDER/$ANALYSIS/$SAMPLE/$SAMPLE.reports/$SAMPLE.final.vcf.metrics/metrics*$GENES_PANEL*.bcftools.stats 2>/dev/null)
	fi;

	# GENES PANEL INFO
	GENES_PANEL_GENES_NUMBER=$(cat $GENES_PANEL_FILE | grep -v "^#" | grep -v "^@" | cut -f5 | sort -u | wc -l)
	GENES_PANEL_GENES_NUMBER_HTML=$(echo $GENES_PANEL_GENES_NUMBER | sed ':a;s/\B[0-9]\{3\}\>/,&/;ta')

	GENES_PANEL_REGIONS_NUMBER=$(cat $GENES_PANEL_FILE | grep -v "^#" | grep -v "^@" | wc -l)
	GENES_PANEL_REGIONS_NUMBER_HTML=$(echo $GENES_PANEL_REGIONS_NUMBER | sed ':a;s/\B[0-9]\{3\}\>/,&/;ta')
	[ "$GENES_PANEL" == "Target Design" ] && GENES_PANEL_GENES_NUMBER=$GENES_PANEL_REGIONS_NUMBER && GENES_PANEL_GENES_NUMBER_HTML=$GENES_PANEL_REGIONS_NUMBER_HTML

	GENES_PANEL_BASES_NUMBER=$(cat $GENES_PANEL_FILE | grep -v "^#" | grep -v "^@" | awk '{for(i=$2;i<$3;i++) print $1"\t"i}' | sort -u | wc -l)
	GENES_PANEL_BASES_NUMBER_HTML=$(echo $GENES_PANEL_BASES_NUMBER | sed ':a;s/\B[0-9]\{3\}\>/,&/;ta')

	#GENES_PANEL_ALIGNER=$ALIGNER
	#GENES_PANEL_ALIGNER_HTML=$GENES_PANEL_ALIGNER

	#echo "GENES_PANEL: "$GENES_PANEL
	#echo "BCFTOOLS_STATS: "$BCFTOOLS_STATS


	GENES_PANEL_TOTAL_VARIANT_NUMBER=$(grep "^SN	.*	number of records" $BCFTOOLS_STATS | awk -F"\t" '{print $4}')
	GENES_PANEL_TOTAL_VARIANT_LEGEND=$(grep "^#   number of records   .." $BCFTOOLS_STATS | sed "s/^#   number of records   .. //gi")

	GENES_PANEL_SNPs_VARIANT_NUMBER=$(grep "^SN	.*	number of SNPs" $BCFTOOLS_STATS | awk -F"\t" '{print $4}')
	GENES_PANEL_SNPs_VARIANT_LEGEND=$(grep "^#   number of SNPs   .." $BCFTOOLS_STATS | sed "s/^#   number of SNPs      .. //gi")

	GENES_PANEL_MNPs_VARIANT_NUMBER=$(grep "^SN	.*	number of MNPs" $BCFTOOLS_STATS | awk -F"\t" '{print $4}')
	GENES_PANEL_MNPs_VARIANT_LEGEND=$(grep "^#   number of MNPs   .." $BCFTOOLS_STATS | sed "s/^#   number of MNPs      .. //gi")

	GENES_PANEL_indels_VARIANT_NUMBER=$(grep "^SN	.*	number of indels" $BCFTOOLS_STATS | awk -F"\t" '{print $4}')
	GENES_PANEL_indels_VARIANT_LEGEND=$(grep "^#   number of indels   .." $BCFTOOLS_STATS | sed "s/^#   number of indels    .. //gi")

	GENES_PANEL_others_VARIANT_NUMBER=$(grep "^SN	.*	number of others" $BCFTOOLS_STATS | awk -F"\t" '{print $4}')
	GENES_PANEL_others_VARIANT_LEGEND=$(grep "^#   number of others   .." $BCFTOOLS_STATS -A1 | sed "s/^#   number of others    .. //gi" | sed "s/^#                          //gi"  )



	#GENE_PANEL_NAME_HTML="$GENES_PANEL"

	# BREAK
	(( $(echo "$GENES_PANEL_NUM >= 2" | bc -l) )) && GENES_PANEL_BREAK=$PAGE_BREAK_BEFORE || GENES_PANEL_BREAK=""

	echo '

		<h3 class="mbr-section-subtitle mbr-fonts-style display-5" '$GENES_PANEL_BREAK'>
		<br>
			'$GENE_PANEL_NAME_HTML'
		</h3>

		<div class="container pt-4 mt-2">
			<div class="media-container-row">

				<div class="card p-3 align-center col-12 col-md-6 col-lg-2">
					<div class="panel-item">
						<div class="card-img pb-3">
							<span class="mbr-iconfont mbri-info"></span>
						</div>

						<div class="card-text">
							<h3 class=" pt-3 pb-3 mbr-fonts-style display-2">
								'$GENES_PANEL_GENES_NUMBER_HTML'
							</h3>
							<h4 class="mbr-content-title mbr-bold mbr-fonts-style display-7">
								'$GENE_PANEL_TYPE_HTML'
							</h4>
							<p class="mbr-content-text mbr-fonts-style display-7">
								'$GENES_PANEL_BASES_NUMBER_HTML' bases
								<br>
								'$GENES_PANEL_REGIONS_NUMBER_HTML' '$GENE_PANEL_TYPE_NAME_HTML's

							</p>
						</div>
					</div>
				</div>

				<div class="card p-3 align-center col-12 col-md-6 col-lg-2">
					<div class="panel-item">
						<div class="card-img pb-3">
							<span class="mbr-iconfont mbri-info"></span>
						</div>

						<div class="card-text">
							<h3 class=" pt-3 pb-3 mbr-fonts-style display-2">
								'$GENES_PANEL_TOTAL_VARIANT_NUMBER'
							</h3>
							<h4 class="mbr-content-title mbr-bold mbr-fonts-style display-7">
								Total
								<br>
								Variants
							</h4>
							<p class="mbr-content-text mbr-fonts-style display-7">
								'$GENES_PANEL_TOTAL_VARIANT_LEGEND'
							</p>
						</div>
					</div>
				</div>

				<div class="card p-3 align-center col-12 col-md-6 col-lg-2">
					<div class="panel-item">
						<div class="card-img pb-3">
							<span class="mbr-iconfont mbri-info"></span>
						</div>

						<div class="card-texts">
							 <h3 class=" pt-3 pb-3 mbr-fonts-style display-2">
								'$GENES_PANEL_SNPs_VARIANT_NUMBER'
							</h3>
							<h4 class="mbr-content-title mbr-bold mbr-fonts-style display-7">
								SNV
								<br>
								Variants
							</h4>
							<p class="mbr-content-text mbr-fonts-style display-7">
								'$GENES_PANEL_SNPs_VARIANT_LEGEND'
							</p>
						</div>
					</div>
				</div>

				<div class="card p-3 align-center col-12 col-md-6 col-lg-2">
					<div class="panel-item">
						<div class="card-img pb-3">
							<span class="mbr-iconfont mbri-info"></span>
						</div>

						<div class="card-texts">
							 <h3 class=" pt-3 pb-3 mbr-fonts-style display-2">
								'$GENES_PANEL_MNPs_VARIANT_NUMBER'
							</h3>
							<h4 class="mbr-content-title mbr-bold mbr-fonts-style display-7">
								MNP
								<br>
								Variants
							</h4>
							<p class="mbr-content-text mbr-fonts-style display-7">
								'$GENES_PANEL_MNPs_VARIANT_LEGEND'
							</p>
						</div>
					</div>
				</div>


				<div class="card p-3 align-center col-12 col-md-6 col-lg-2">
					<div class="panel-item">
						<div class="card-img pb-3">
							<span class="mbr-iconfont mbri-info"></span>
						</div>

						<div class="card-texts">
							 <h3 class=" pt-3 pb-3 mbr-fonts-style display-2">
								'$GENES_PANEL_indels_VARIANT_NUMBER'
							</h3>
							<h4 class="mbr-content-title mbr-bold mbr-fonts-style display-7">
								Indel
								<br>
								Variants
							</h4>
							<p class="mbr-content-text mbr-fonts-style display-7">
								'$GENES_PANEL_indels_VARIANT_LEGEND'
							</p>
						</div>
					</div>
				</div>


				<div class="card p-3 align-center col-12 col-md-6 col-lg-2">
					<div class="panel-item">
						<div class="card-img pb-3">
							<span class="mbr-iconfont mbri-info"></span>
						</div>

						<div class="card-texts">
							 <h3 class=" pt-3 pb-3 mbr-fonts-style display-2">
								'$GENES_PANEL_others_VARIANT_NUMBER'
							</h3>
							<h4 class="mbr-content-title mbr-bold mbr-fonts-style display-7">
								Other
								<br>
								Variants
							</h4>
							<p class="mbr-content-text mbr-fonts-style display-7">
								'$GENES_PANEL_others_VARIANT_LEGEND'
							</p>
						</div>
					</div>
				</div>

				</div>
			</div>
		</div>

	' >> $HTMLFILE_VARIANTS_STATS_GENES_PANEL

done;


# PLAN
echo '<a class="btn btn-primary-outline display-4" href="#'$SECTION_ID'">'$SECTION_NAME'</a>' >> $HTMLFILE_PLAN_LINKS

echo '

	<section class="counters1 counters cid-ru7OEH6r7i" id="'$SECTION_ID'" '$PAGE_BREAK_BEFORE'>
	<br>

		<div class="container">
			<h2 class="mbr-section-title pb-3 align-center mbr-fonts-style display-2">
				'$SECTION_NAME'
			</h2>

			<p class="mbr-section-subtitle mbr-fonts-style display-6 align-center">
				Variant statistics generated with <strong>BCFTOOLS stats</strong> from '$PIPELINES_NUMBER' pipelines:
				<br>
				'$(echo $ALIGNERS_CALLERS_ANNOTATORS | sed "s/ /<br>/gi")'
			</p>

			'"$(cat $HTMLFILE_VARIANTS_STATS_GENES_PANEL)"'



	   </div>
	</section>

' > $HTMLFILE_VARIANTS_STATS




fi;




# PLAN
##########

(($VERBOSE)) && echo "#[INFO] PLAN section"


HTMLFILE_PLAN=$HTMLFILE".plan"


echo '
<section class="mbr-section content8 cid-ruitEAjBmu" id="content8-1z">
    <div class="container">
        <div class="media-container-row title">
            <div class="col-12 col-md-40">
                <div class="mbr-section-btn align-center">
				'$(cat $HTMLFILE_PLAN_LINKS)'
				<!--<a class="btn btn-primary-outline display-4" href="#counters1-1u">Variant Annotation</a>-->
				<a class="btn btn-primary-outline display-4" href="'$(basename $HTMLFILE_ANNEX)'">Annex</a></div>
            </div>
        </div>
    </div>
</section>
' > $HTMLFILE_PLAN




#########
# ANNEX #
#########



# COVERAGE
############

(($VERBOSE)) && echo "#[INFO] ANNEX DEPTH COVERAGE section"

HTMLFILE_ANNEX_COVERAGE=$HTMLFILE_ANNEX".coverage"
HTMLFILE_ANNEX_GENES_COVERAGE=$HTMLFILE_ANNEX".genes_coverage"
HTMLFILE_ANNEX_DEPTH=$HTMLFILE_ANNEX".depth"
HTMLFILE_ANNEX_AMPLICON=$HTMLFILE_ANNEX".amplicon"


# FILES



# FLAGS
#PASS_FLAG_ICON='class="mbr-iconfont mbri-smile-face" style="color: rgb(0, 255, 0); fill: rgb(0, 255, 0);"'
#WARN_FLAG_ICON='class="mbr-iconfont mbri-sad-face" style="color: rgb(252, 161, 6); fill: rgb(252, 161, 6);"'
#FAIL_FLAG_ICON='class="mbr-iconfont mbri-sad-face" style="color: rgb(255, 0, 0); fill: rgb(255, 0, 0);"'


# FILES
HTMLFILE_ANNEX_GENES_PANEL_COVERAGE=$HTMLFILE_ANNEX".genes_panel_coverage"
HTMLFILE_ANNEX_GENES_PANEL_GENES_COVERAGE=$HTMLFILE_ANNEX".genes_panel_genes_coverage"
HTMLFILE_ANNEX_GENES_PANEL_DEPTH=$HTMLFILE_ANNEX".genes_panel_depth"
HTMLFILE_ANNEX_GENES_PANEL_AMPLICON=$HTMLFILE_ANNEX".amplicon_clipping"


# LINKS
HTMLFILE_ANNEX_PLAN_LINKS_COVERAGE=$HTMLFILE_ANNEX_PLAN_LINKS".coverage"
> $HTMLFILE_ANNEX_PLAN_LINKS_COVERAGE
HTMLFILE_ANNEX_PLAN_LINKS_GENES_COVERAGE=$HTMLFILE_ANNEX_PLAN_LINKS".genes_coverage"
> $HTMLFILE_ANNEX_PLAN_LINKS_GENES_COVERAGE
HTMLFILE_ANNEX_PLAN_LINKS_DEPTH=$HTMLFILE_ANNEX_PLAN_LINKS".depth"
> $HTMLFILE_ANNEX_PLAN_LINKS_DEPTH
HTMLFILE_ANNEX_PLAN_LINKS_AMPLICON=$HTMLFILE_ANNEX_PLAN_LINKS".amplicon"
> $HTMLFILE_ANNEX_PLAN_LINKS_AMPLICON


GENES_PANEL_NUM=0

for ALIGNER in $ALIGNERS; do

	(($DEBUG)) && echo "ALIGNER: $ALIGNER";

	# FILES
	LIST_GENES_PANEL="$RESULTS_FOLDER/$ANALYSIS/$SAMPLE/$SAMPLE.list.genes"
	#TARGET_DESIGN_FILE="$RESULTS_FOLDER/$ANALYSIS/$SAMPLE/$SAMPLE.$ALIGNER.design.bed"
	TARGET_DESIGN_NAME="$SAMPLE.$ALIGNER.design.bed"

	# FILES
	GENES_PANEL_AMPLICON="$RESULTS_FOLDER/$ANALYSIS/$SAMPLE/$SAMPLE.$ALIGNER.bam.metrics/$SAMPLE.$ALIGNER.amplicon_coverage"


	# GENES_PANEL_HSMETRICS_PER_TARGET_DEPTH

	GENES_PANEL_AMPLICON_HTML=""

	if [ -s $GENES_PANEL_AMPLICON ]; then

		#cat $GENES_PANEL_HSMETRICS_PER_TARGET_DEPTH;

		print_header=true

		while read INPUT ; do
			if $print_header;then
				GENES_PANEL_AMPLICON_HTML=$GENES_PANEL_AMPLICON_HTML"<thead><tr class=\"table-heads\"><th class=\"head-item mbr-fonts-style display-7\">"$( echo -e "$INPUT" | tr ",;" " " | sed -e 's/\t/<\/th><th class=\"head-item mbr-fonts-style display-7\">/g')"</th></tr></thead><tbody>"
				print_header=false
			else
				#echo "<tr><td>${INPUT//\t/</td><td>}</td></tr>" ;
				GENES_PANEL_AMPLICON_HTML=$GENES_PANEL_AMPLICON_HTML"<tr><td class=\"body-item mbr-fonts-style display-7\">"$(echo -e "$INPUT" | tr ",;" " " | sed -e 's/\t/<\/td><td class=\"body-item mbr-fonts-style display-7\">/g')"</td></tr>"
			fi;
		done < $GENES_PANEL_AMPLICON ;
		GENES_PANEL_AMPLICON_HTML=$GENES_PANEL_AMPLICON_HTML"</tbody>"

	fi;

	#echo $GENES_PANEL_AMPLICON_HTML

	# LINKS
	echo '<a class="btn display-4 mbr-section-subtitle mbr-fonts-style display-6 align-center" href="#AMPLICON-'$ALIGNER'"><small>'$GENE_PANEL_NAME_HTML' ('$ALIGNER')</small></a>' >> $HTMLFILE_ANNEX_PLAN_LINKS_AMPLICON



	for GENES_PANEL in $TARGET_DESIGN_NAME $(cat $LIST_GENES_PANEL); do

		# FILES
		GENES_PANEL_FILE="$RESULTS_FOLDER/$ANALYSIS/$SAMPLE/$SAMPLE.$ALIGNER.bam.metrics/$GENES_PANEL"
		GENES_PANEL_HSMETRICS_PER_TARGET_COVERAGE="$RESULTS_FOLDER/$ANALYSIS/$SAMPLE/$SAMPLE.$ALIGNER.bam.metrics/$SAMPLE.$ALIGNER.$GENES_PANEL.coverage"
		GENES_PANEL_HSMETRICS_PER_TARGET_GENES_COVERAGE="$RESULTS_FOLDER/$ANALYSIS/$SAMPLE/$SAMPLE.$ALIGNER.bam.metrics/$SAMPLE.$ALIGNER.$GENES_PANEL.genes.txt"
		GENES_PANEL_HSMETRICS_PER_TARGET_DEPTH="$RESULTS_FOLDER/$ANALYSIS/$SAMPLE/$SAMPLE.$ALIGNER.bam.metrics/$SAMPLE.$ALIGNER.$GENES_PANEL.HsMetrics.per_target_coverage"



		if [ -s $GENES_PANEL_FILE ]; then

			((GENES_PANEL_NUM++))

			if [ "$GENES_PANEL" == "$TARGET_DESIGN_NAME" ]; then
				GENES_PANEL_NAME="Target Design"
				GENE_PANEL_NAME_HTML="$GENES_PANEL_NAME"
				GENE_PANEL_TYPE_HTML="Target<br>Regions"
			else
				GENES_PANEL_NAME=$(echo $GENES_PANEL | sed "s/^$SAMPLE.//" | sed "s/.genes$//")
				GENE_PANEL_NAME_HTML="Gene Panel<br>$GENES_PANEL_NAME"
				GENE_PANEL_TYPE_HTML="Gene<br>Panel"
			fi;


			(($DEBUG)) && echo "GENES_PANEL: $GENES_PANEL";
			(($DEBUG)) && echo "GENES_PANEL_NAME: $GENES_PANEL_NAME";
			(($DEBUG)) && echo "GENES_PANEL_NUM: "$GENES_PANEL_NUM


			# GENES_PANEL_HSMETRICS_PER_TARGET_COVERAGE
			if [ -s $GENES_PANEL_HSMETRICS_PER_TARGET_COVERAGE ]; then

				#cat $GENES_PANEL_HSMETRICS_PER_TARGET_COVERAGE;

				print_header=true
				GENES_PANEL_HSMETRICS_PER_TARGET_COVERAGE_HTML=""
				#GENES_PANEL_HSMETRICS_PER_TARGET_COVERAGE_HTML="<tbody>"
				while read INPUT ; do
					#echo $INPUT
				  	if $print_header;then
					    GENES_PANEL_HSMETRICS_PER_TARGET_COVERAGE_HTML=$GENES_PANEL_HSMETRICS_PER_TARGET_COVERAGE_HTML"<thead><tr class=\"table-heads\"><th class=\"head-item mbr-fonts-style display-7\">"$(echo -e "$INPUT" | tr ",;" " " | sed -e 's/\t/<\/th><th class=\"head-item mbr-fonts-style display-7\">/g')"</th></tr></thead><tbody>"
					    print_header=false
					else
				  		#echo "<tr><td>${INPUT//\t/</td><td>}</td></tr>" ;
				  		GENES_PANEL_HSMETRICS_PER_TARGET_COVERAGE_HTML=$GENES_PANEL_HSMETRICS_PER_TARGET_COVERAGE_HTML"<tr><td class=\"body-item mbr-fonts-style display-7\">"$(echo -e "$INPUT" | tr ",;" " " | sed -e 's/\t/<\/td><td class=\"body-item mbr-fonts-style display-7\">/g')"</td></tr>"
					fi;
				done < $GENES_PANEL_HSMETRICS_PER_TARGET_COVERAGE ;
				GENES_PANEL_HSMETRICS_PER_TARGET_COVERAGE_HTML=$GENES_PANEL_HSMETRICS_PER_TARGET_COVERAGE_HTML"</tbody>"

			fi;


			# GENES_PANEL_HSMETRICS_PER_TARGET_COVERAGE
			if [ -s $GENES_PANEL_HSMETRICS_PER_TARGET_COVERAGE ]; then

				#cat $GENES_PANEL_HSMETRICS_PER_TARGET_COVERAGE;

				print_header=true
				GENES_PANEL_HSMETRICS_PER_TARGET_GENES_COVERAGE_HTML=""
				#GENES_PANEL_HSMETRICS_PER_TARGET_GENES_COVERAGE_HTML="<tbody>"
				while read INPUT ; do
					#echo -e $INPUT
					if $print_header;then
						GENES_PANEL_HSMETRICS_PER_TARGET_GENES_COVERAGE_HTML=$GENES_PANEL_HSMETRICS_PER_TARGET_GENES_COVERAGE_HTML"<thead><tr class=\"table-heads\"><th class=\"head-item mbr-fonts-style display-7\">"$(echo -e "$INPUT" | tr ",;" " " | sed -e 's/\t/<\/th><th class=\"head-item mbr-fonts-style display-7\">/g')"</th></tr></thead><tbody>"
						print_header=false
					else
						#echo "<tr><td>${INPUT//\t/</td><td>}</td></tr>" ;
						GENES_PANEL_HSMETRICS_PER_TARGET_GENES_COVERAGE_HTML=$GENES_PANEL_HSMETRICS_PER_TARGET_GENES_COVERAGE_HTML"<tr><td class=\"body-item mbr-fonts-style display-7\">"$(echo -e "$INPUT" | tr ",;" " " | sed -e 's/\t/<\/td><td class=\"body-item mbr-fonts-style display-7\">/g')"</td></tr>"
					fi;
				done < $GENES_PANEL_HSMETRICS_PER_TARGET_GENES_COVERAGE ;
				GENES_PANEL_HSMETRICS_PER_TARGET_GENES_COVERAGE_HTML=$GENES_PANEL_HSMETRICS_PER_TARGET_GENES_COVERAGE_HTML"</tbody>"

			fi;

			# GENES_PANEL_HSMETRICS_PER_TARGET_DEPTH
			if [ -s $GENES_PANEL_HSMETRICS_PER_TARGET_DEPTH ]; then

				#cat $GENES_PANEL_HSMETRICS_PER_TARGET_DEPTH;

				print_header=true
				GENES_PANEL_HSMETRICS_PER_TARGET_DEPTH_HTML=""
				while read INPUT ; do
				  	if $print_header;then
					    GENES_PANEL_HSMETRICS_PER_TARGET_DEPTH_HTML=$GENES_PANEL_HSMETRICS_PER_TARGET_DEPTH_HTML"<thead><tr class=\"table-heads\"><th class=\"head-item mbr-fonts-style display-7\">"$( echo -e "$INPUT" | tr ",;" " " | sed -e 's/\t/<\/th><th class=\"head-item mbr-fonts-style display-7\">/g')"</th></tr></thead><tbody>"
					    print_header=false
					else
				  		#echo "<tr><td>${INPUT//\t/</td><td>}</td></tr>" ;
				  		GENES_PANEL_HSMETRICS_PER_TARGET_DEPTH_HTML=$GENES_PANEL_HSMETRICS_PER_TARGET_DEPTH_HTML"<tr><td class=\"body-item mbr-fonts-style display-7\">"$(echo -e "$INPUT" | tr ",;" " " | sed -e 's/\t/<\/td><td class=\"body-item mbr-fonts-style display-7\">/g')"</td></tr>"
					fi;
				done < $GENES_PANEL_HSMETRICS_PER_TARGET_DEPTH ;
				GENES_PANEL_HSMETRICS_PER_TARGET_DEPTH_HTML=$GENES_PANEL_HSMETRICS_PER_TARGET_DEPTH_HTML"</tbody>"

			fi;


			# BREAK
			(( $(echo "$GENES_PANEL_NUM >= 2" |bc -l) )) && GENES_PANEL_BREAK=$PAGE_BREAK_BEFORE || GENES_PANEL_BREAK=""

			# PLAN
			#echo '<a class="btn btn-primary-outline display-4 mbr-section-subtitle mbr-fonts-style display-6 align-center" href="#'$GENES_PANEL'-'$ALIGNER'"><small>'$GENE_PANEL_NAME_HTML' ('$ALIGNER')</small></a>' >> $HTMLFILE_ANNEX_PLAN_LINKS_COVERAGE
			#echo '<a class="btn display-4 mbr-section-subtitle mbr-fonts-style display-6 align-center" href="#'$GENES_PANEL'-'$ALIGNER'">'$GENE_PANEL_NAME_HTML' ('$ALIGNER')</a>' >> $HTMLFILE_ANNEX_PLAN_LINKS_COVERAGE
			echo '<a class="btn display-4 mbr-section-subtitle mbr-fonts-style display-6 align-center" href="#COVERAGE_'$GENES_PANEL'-'$ALIGNER'"><small>'$GENE_PANEL_NAME_HTML' ('$ALIGNER')</small></a>' >> $HTMLFILE_ANNEX_PLAN_LINKS_COVERAGE
			echo '<a class="btn display-4 mbr-section-subtitle mbr-fonts-style display-6 align-center" href="#GENES_COVERAGE_'$GENES_PANEL'-'$ALIGNER'"><small>'$GENE_PANEL_NAME_HTML' ('$ALIGNER')</small></a>' >> $HTMLFILE_ANNEX_PLAN_LINKS_GENES_COVERAGE
			echo '<a class="btn display-4 mbr-section-subtitle mbr-fonts-style display-6 align-center" href="#DEPTH_'$GENES_PANEL'-'$ALIGNER'"><small>'$GENE_PANEL_NAME_HTML' ('$ALIGNER')</small></a>' >> $HTMLFILE_ANNEX_PLAN_LINKS_DEPTH


			echo '

			<section class="section-table cid-ruiBoanIwc" id="COVERAGE_'$GENES_PANEL'-'$ALIGNER'" >


			  <div class="container container-table">

				  <h3 class="mbr-section-subtitle mbr-fonts-style align-center mbr-light display-5" '$GENES_PANEL_BREAK'>
				  <br>
				  	'$GENE_PANEL_NAME_HTML' ('$ALIGNER')
				  </h3>


				  <div class="table-wrapper">
					<div class="container">
					  <div class="row search">
						<div class="col-md-6"></div>
						<div class="col-md-6">
							<div class="dataTables_filter">
							  <label class="searchInfo mbr-fonts-style display-7">Search:</label>
							  <input class="form-control input-sm" disabled="">
							</div>
						</div>
					  </div>
					</div>

					<div class="container scroll">
					  	<table class="table isSearch" cellspacing="0">
							'$GENES_PANEL_HSMETRICS_PER_TARGET_COVERAGE_HTML'
					  	</table>

					</div>

					<div class="container table-info-container">
					  <div class="row info">
						<div class="col-md-6">
						  <div class="dataTables_info mbr-fonts-style display-7">
							<span class="infoBefore">Showing</span>
							<span class="inactive infoRows"></span>
							<span class="infoAfter">entries</span>
							<span class="infoFilteredBefore">(filtered from</span>
							<span class="inactive infoRows"></span>
							<span class="infoFilteredAfter"> total entries)</span>
						  </div>
						</div>
						<div class="col-md-6"></div>
					  </div>
					</div>


				  </div>
				</div>

			</section>

			' >> $HTMLFILE_ANNEX_GENES_PANEL_COVERAGE

			echo '

			<section class="section-table cid-ruiBoanIwc" id="GENES_COVERAGE_'$GENES_PANEL'-'$ALIGNER'">


			  <div class="container container-table">

				  <h3 class="mbr-section-subtitle mbr-fonts-style align-center mbr-light display-5" '$GENES_PANEL_BREAK'>
				  <br>
					'$GENE_PANEL_NAME_HTML' ('$ALIGNER')
				  </h3>


				  <div class="table-wrapper">
					<div class="container">
					  <div class="row search">
						<div class="col-md-6"></div>
						<div class="col-md-6">
							<div class="dataTables_filter">
							  <label class="searchInfo mbr-fonts-style display-7">Search:</label>
							  <input class="form-control input-sm" disabled="">
							</div>
						</div>
					  </div>
					</div>

					<div class="container scroll">
						<table class="table isSearch" cellspacing="0">
							'$GENES_PANEL_HSMETRICS_PER_TARGET_GENES_COVERAGE_HTML'
						</table>

					</div>

					<div class="container table-info-container">
					  <div class="row info">
						<div class="col-md-6">
						  <div class="dataTables_info mbr-fonts-style display-7">
							<span class="infoBefore">Showing</span>
							<span class="inactive infoRows"></span>
							<span class="infoAfter">entries</span>
							<span class="infoFilteredBefore">(filtered from</span>
							<span class="inactive infoRows"></span>
							<span class="infoFilteredAfter"> total entries)</span>
						  </div>
						</div>
						<div class="col-md-6"></div>
					  </div>
					</div>


				  </div>
				</div>

			</section>

			' >> $HTMLFILE_ANNEX_GENES_PANEL_GENES_COVERAGE


			echo '

			<section class="section-table cid-ruiBoanIwc" id="DEPTH_'$GENES_PANEL'-'$ALIGNER'">


			  <div class="container container-table">

				  <h3 class="mbr-section-subtitle mbr-fonts-style align-center mbr-light display-5" '$GENES_PANEL_BREAK'>
				  <br>
					'$GENE_PANEL_NAME_HTML' ('$ALIGNER')
				  </h3>


				  <div class="table-wrapper">
					<div class="container">
					  <div class="row search">
						<div class="col-md-6"></div>
						<div class="col-md-6">
							<div class="dataTables_filter">
							  <label class="searchInfo mbr-fonts-style display-7">Search:</label>
							  <input class="form-control input-sm" disabled="">
							</div>
						</div>
					  </div>
					</div>

					<div class="container scroll">
						<table class="table isSearch" cellspacing="0">
							'$GENES_PANEL_HSMETRICS_PER_TARGET_DEPTH_HTML'
						</table>

					</div>

					<div class="container table-info-container">
					  <div class="row info">
						<div class="col-md-6">
						  <div class="dataTables_info mbr-fonts-style display-7">
							<span class="infoBefore">Showing</span>
							<span class="inactive infoRows"></span>
							<span class="infoAfter">entries</span>
							<span class="infoFilteredBefore">(filtered from</span>
							<span class="inactive infoRows"></span>
							<span class="infoFilteredAfter"> total entries)</span>
						  </div>
						</div>
						<div class="col-md-6"></div>
					  </div>
					</div>


				  </div>
				</div>

			</section>

			' >> $HTMLFILE_ANNEX_GENES_PANEL_DEPTH

		fi;

	done;


	if [ -s $GENES_PANEL_AMPLICON ]; then

		echo '

		<section class="section-table cid-ruiBoanIwc" id="AMPLICON-'$ALIGNER'">


		  <div class="container container-table">

			  <h3 class="mbr-section-subtitle mbr-fonts-style align-center mbr-light display-5" '$GENES_PANEL_BREAK'>
			  <br>
					Target Design ('$ALIGNER')
			  </h3>


			  <div class="table-wrapper">
				<div class="container">
				  <div class="row search">
					<div class="col-md-6"></div>
					<div class="col-md-6">
						<div class="dataTables_filter">
						  <label class="searchInfo mbr-fonts-style display-7">Search:</label>
						  <input class="form-control input-sm" disabled="">
						</div>
					</div>
				  </div>
				</div>

				<div class="container scroll">
					<table class="table isSearch" cellspacing="0">
						'$GENES_PANEL_AMPLICON_HTML'
					</table>

				</div>

				<div class="container table-info-container">
				  <div class="row info">
					<div class="col-md-6">
					  <div class="dataTables_info mbr-fonts-style display-7">
						<span class="infoBefore">Showing</span>
						<span class="inactive infoRows"></span>
						<span class="infoAfter">entries</span>
						<span class="infoFilteredBefore">(filtered from</span>
						<span class="inactive infoRows"></span>
						<span class="infoFilteredAfter"> total entries)</span>
					  </div>
					</div>
					<div class="col-md-6"></div>
				  </div>
				</div>


			  </div>
			</div>

		</section>

		' >> $HTMLFILE_ANNEX_GENES_PANEL_AMPLICON
	fi;


done;



SECTION_NAME="Coverage"
SECTION_ID="annex_coverage"

# PLAN
echo '<a class="btn btn-primary-outline display-4" href="#'$SECTION_ID'">'$SECTION_NAME'</a>' >> $HTMLFILE_ANNEX_PLAN_LINKS

echo '

	<section class="cid-ruiBoanIwc" id="'$SECTION_ID'" '$PAGE_BREAK_BEFORE'>
	<br>

	    <div class="container">
	        <h2 class="mbr-section-title pb-3 align-center mbr-fonts-style display-2">
	            '$SECTION_NAME'
			</h2>

			<p class="mbr-section-subtitle mbr-fonts-style display-6 align-center">
				Coverage generated with <strong>Samtools mpileup</strong>
				<br>
				on BAM for validation ('$BAM_VALIDATION_TEXT_HTML').
			</p>

			<section class="mbr-section content8 cid-ruitEAjBmu" id="content8-1z">
			    <div class="container">
			        <div class="media-container-row title">
			            <div class="col-12 col-md-40">
			                <div class="mbr-section-btn align-center">
							'$(cat $HTMLFILE_ANNEX_PLAN_LINKS_COVERAGE)'
			            </div>
			        </div>
			    </div>
			</section>

			'"$(cat $HTMLFILE_ANNEX_GENES_PANEL_COVERAGE)"'



	   </div>
	</section>

' > $HTMLFILE_ANNEX_COVERAGE



SECTION_NAME="Target & Genes Coverage"
SECTION_ID="annex_genes_coverage"

# PLAN
echo '<a class="btn btn-primary-outline display-4" href="#'$SECTION_ID'">'$SECTION_NAME'</a>' >> $HTMLFILE_ANNEX_PLAN_LINKS

echo '

	<section class="cid-ruiBoanIwc" id="'$SECTION_ID'" '$PAGE_BREAK_BEFORE'>
	<br>

	    <div class="container">
	        <h2 class="mbr-section-title pb-3 align-center mbr-fonts-style display-2">
	            '$SECTION_NAME'
			</h2>

			<p class="mbr-section-subtitle mbr-fonts-style display-6 align-center">
				Coverage generated with <strong>Samtools mpileup</strong>
				<br>
				on BAM for validation ('$BAM_VALIDATION_TEXT_HTML').
			</p>

			<section class="mbr-section content8 cid-ruitEAjBmu" id="content8-1z">
				<div class="container">
					<div class="media-container-row title">
						<div class="col-12 col-md-40">
							<div class="mbr-section-btn align-center">
							'$(cat $HTMLFILE_ANNEX_PLAN_LINKS_GENES_COVERAGE)'
						</div>
					</div>
				</div>
			</section>

			'"$(cat $HTMLFILE_ANNEX_GENES_PANEL_GENES_COVERAGE)"'



	   </div>
	</section>

' > $HTMLFILE_ANNEX_GENES_COVERAGE



SECTION_NAME="Depth"
SECTION_ID="annex_depth"

# PLAN
echo '<a class="btn btn-primary-outline display-4" href="#'$SECTION_ID'">'$SECTION_NAME'</a>' >> $HTMLFILE_ANNEX_PLAN_LINKS

echo '

	<section class="cid-ruiBoanIwc" id="'$SECTION_ID'" '$PAGE_BREAK_BEFORE'>
	<br>

	    <div class="container">
	        <h2 class="mbr-section-title pb-3 align-center mbr-fonts-style display-2">
	            '$SECTION_NAME'
			</h2>

			<p class="mbr-section-subtitle mbr-fonts-style display-6 align-center">
				Depth generated with <strong>Samtools mpileup</strong> and <strong>Picard CollectHsMetrics</strong>
				<br>
				on BAM for validation ('$BAM_VALIDATION_TEXT_HTML').
			</p>

			<section class="mbr-section content8 cid-ruitEAjBmu" id="content8-1z">
				<div class="container">
					<div class="media-container-row title">
						<div class="col-12 col-md-40">
							<div class="mbr-section-btn align-center">
							'$(cat $HTMLFILE_ANNEX_PLAN_LINKS_DEPTH)'
						</div>
					</div>
				</div>
			</section>

			'"$(cat $HTMLFILE_ANNEX_GENES_PANEL_DEPTH)"'



	   </div>
	</section>

' > $HTMLFILE_ANNEX_DEPTH



SECTION_NAME="Amplicon Clipping"
SECTION_ID="amplicon_clipping"

#if (($GENES_PANEL_NUM)); then
if [ -s $GENES_PANEL_AMPLICON ] && [ "$GENES_PANEL_AMPLICON_HTML" != "" ]; then

	# PLAN
	echo '<a class="btn btn-primary-outline display-4" href="#'$SECTION_ID'">'$SECTION_NAME'</a>' >> $HTMLFILE_ANNEX_PLAN_LINKS

	echo '

		<section class="cid-ruiBoanIwc" id="'$SECTION_ID'" '$PAGE_BREAK_BEFORE'>
		<br>

		    <div class="container">
		        <h2 class="mbr-section-title pb-3 align-center mbr-fonts-style display-2">
		            '$SECTION_NAME'
				</h2>

				<p class="mbr-section-subtitle mbr-fonts-style display-6 align-center">
				Amplicon clipping generated with <strong>CAP</strong> and depth metrics with <strong>Picard CollectHsMetrics</strong> on all <strong>Target Design</strong>.
				</p>

				<section class="mbr-section content8 cid-ruitEAjBmu" id="content8-1z">
					<div class="container">
						<div class="media-container-row title">
							<div class="col-12 col-md-40">
								<div class="mbr-section-btn align-center">
								'$(cat $HTMLFILE_ANNEX_PLAN_LINKS_AMPLICON)'
							</div>
						</div>
					</div>
				</section>

				'"$(cat $HTMLFILE_ANNEX_GENES_PANEL_AMPLICON)"'



		   </div>
		</section>

	' > $HTMLFILE_ANNEX_AMPLICON

else

	> $HTMLFILE_ANNEX_AMPLICON

fi;



# REPORT GENES VARIANTS
############

(($VERBOSE)) && echo "#[INFO] ANNEX VARIANTS section"

HTMLFILE_ANNEX_VARIANTS=$HTMLFILE_ANNEX".variants"

# FILES
HTMLFILE_ANNEX_GENES_PANEL_VARIANTS=$HTMLFILE_ANNEX".genes_panel_variants"
HTMLFILE_ANNEX_GENES_PANEL_VARIANTS_TSV=$HTMLFILE_ANNEX".genes_panel_variants.tsv"


# LINKS
HTMLFILE_ANNEX_PLAN_LINKS_VARIANTS=$HTMLFILE_ANNEX_PLAN_LINKS".variants"
> $HTMLFILE_ANNEX_PLAN_LINKS_VARIANTS


GENES_PANEL_NUM=0


	# FILES
	LIST_GENES_PANEL="$RESULTS_FOLDER/$ANALYSIS/$SAMPLE/$SAMPLE.list.genes"
	#TARGET_DESIGN_FILE="$RESULTS_FOLDER/$ANALYSIS/$SAMPLE/$SAMPLE.$ALIGNER.design.bed"
	#TARGET_DESIGN_NAME="$SAMPLE.bed"


	for GENES_PANEL in $(cat $LIST_GENES_PANEL); do

		# FILES
		GENES_PANEL_FILE="$RESULTS_FOLDER/$ANALYSIS/$SAMPLE/$GENES_PANEL"
		#GENES_PANEL_HSMETRICS_PER_TARGET_COVERAGE="$RESULTS_FOLDER/$ANALYSIS/$SAMPLE/$SAMPLE.$ALIGNER.bam.metrics/$SAMPLE.$ALIGNER.$GENES_PANEL.coverage"
		#GENES_PANEL_HSMETRICS_PER_TARGET_GENES_COVERAGE="$RESULTS_FOLDER/$ANALYSIS/$SAMPLE/$SAMPLE.$ALIGNER.bam.metrics/$SAMPLE.$ALIGNER.$GENES_PANEL.genes.txt"
		#GENES_PANEL_HSMETRICS_PER_TARGET_DEPTH="$RESULTS_FOLDER/$ANALYSIS/$SAMPLE/$SAMPLE.$ALIGNER.bam.metrics/$SAMPLE.$ALIGNER.$GENES_PANEL.HsMetrics.per_target_coverage"
		GENES_PANEL_VCF="$RESULTS_FOLDER/$ANALYSIS/$SAMPLE/$SAMPLE.reports/$SAMPLE.final.vcf.metrics/metrics.genes.$GENES_PANEL.vcf"
		GENES_PANEL_TSV="$RESULTS_FOLDER/$ANALYSIS/$SAMPLE/$SAMPLE.reports/$SAMPLE.final.vcf.metrics/metrics.genes.$GENES_PANEL.tsv"
		GENES_PANEL_REPORT_TSV="$RESULTS_FOLDER/$ANALYSIS/$SAMPLE/$SAMPLE.reports/$SAMPLE.final.vcf.metrics/metrics.genes.$GENES_PANEL.report.tsv"
		GENES_PANEL_INFO_FIELD_STATS="$RESULTS_FOLDER/$ANALYSIS/$SAMPLE/$SAMPLE.reports/$SAMPLE.final.vcf.metrics/metrics.genes.$GENES_PANEL.vcf.info_field.stats"

		#head -n 10 $GENES_PANEL_VCF


		if [ -s $GENES_PANEL_FILE ]; then

			((GENES_PANEL_NUM++))

			if [ "$GENES_PANEL" == "$TARGET_DESIGN_NAME" ]; then
				GENES_PANEL_NAME="Target Design"
				GENE_PANEL_NAME_HTML="$GENES_PANEL_NAME"
				GENE_PANEL_TYPE_HTML="Target<br>Regions"
			else
				GENES_PANEL_NAME=$(echo $GENES_PANEL | sed "s/^$SAMPLE.//" | sed "s/.genes$//")
				GENE_PANEL_NAME_HTML="Gene Panel<br>$GENES_PANEL_NAME"
				GENE_PANEL_TYPE_HTML="Gene<br>Panel"
			fi;


			(($DEBUG)) && echo "GENES_PANEL: $GENES_PANEL";
			(($DEBUG)) && echo "GENES_PANEL_NAME: $GENES_PANEL_NAME";
			(($DEBUG)) && echo "GENES_PANEL_NUM: "$GENES_PANEL_NUM


			# GENES_PANEL_HSMETRICS_PER_TARGET_COVERAGE
			if [ -s $GENES_PANEL_VCF ]; then

				#cat $GENES_PANEL_HSMETRICS_PER_TARGET_COVERAGE;


				if [ ! -s $GENES_PANEL_MINIMAL_TSV ] || ((0)); then
					if [ "$HOWARD_FIELDS_REPORT" == "" ]; then
						HOWARD_FIELDS_REPORT=$(echo $HOWARD_FIELDS | sed "s/ALL//")
					fi;
					#$HOWARD --config=$HOWARD_CONFIG --config=$HOWARD_CONFIG --config_prioritization=$HOWARD_CONFIG_PRIORITIZATION --config_annotation=$HOWARD_CONFIG_ANNOTATION --pzfields="PZScore,PZFlag,PZComment,PZInfos" --format=tab  --fields="$HOWARD_FIELDS" --sort=$HOWARD_SORT --sort_by="$HOWARD_SORT_BY" --order_by="$HOWARD_ORDER_BY"  --multithreading --threads=$THREADS --snpeff_threads=$THREADS_BY_SAMPLE --tmp=$TMP_FOLDER_TMP --env=$CONFIG_TOOLS --input=$GENES_PANEL_VCF --output=$GENES_PANEL_TSV --force;
					$HOWARD --config=$HOWARD_CONFIG --config=$HOWARD_CONFIG --config_prioritization=$HOWARD_CONFIG_PRIORITIZATION --config_annotation=$HOWARD_CONFIG_ANNOTATION --pzfields="PZScore,PZFlag,PZComment,PZInfos" --format=tab  --fields="$HOWARD_FIELDS_REPORT" --sort=$HOWARD_SORT --sort_by="$HOWARD_SORT_BY" --order_by="$HOWARD_ORDER_BY"  --multithreading --threads=$THREADS --snpeff_threads=$THREADS_BY_SAMPLE --tmp=$TMP_FOLDER_TMP --env=$CONFIG_TOOLS --input=$GENES_PANEL_VCF --output=$HTMLFILE_ANNEX_GENES_PANEL_VARIANTS_TSV.tmp --force;
					GENES_PANEL_REPORT_TSV=$HTMLFILE_ANNEX_GENES_PANEL_VARIANTS_TSV.tmp
				fi;

				if ((0)); then
					#cut -f 8- $GENES_PANEL_REPORT_TSV | rev | cut -f 3- | rev
					cut -f 8- $GENES_PANEL_REPORT_TSV | rev | cut -f 3- | rev >$HTMLFILE_ANNEX_GENES_PANEL_VARIANTS_TSV
					#cp $HTMLFILE_ANNEX_GENES_PANEL_VARIANTS_TSV.tmp $HTMLFILE_ANNEX_GENES_PANEL_VARIANTS_TSV

					#echo $HTMLFILE_ANNEX_GENES_PANEL_VARIANTS_TSV
					#cat $HTMLFILE_ANNEX_GENES_PANEL_VARIANTS_TSV
				elif ((1)); then
					cut -f 8- $GENES_PANEL_REPORT_TSV | rev | cut -f 3- | rev >$HTMLFILE_ANNEX_GENES_PANEL_VARIANTS_TSV.INFO
					cut -f -7 $GENES_PANEL_REPORT_TSV >$HTMLFILE_ANNEX_GENES_PANEL_VARIANTS_TSV.CHROMPOSREFALT
					rev $GENES_PANEL_REPORT_TSV | cut -f -2 | rev >$HTMLFILE_ANNEX_GENES_PANEL_VARIANTS_TSV.FORMATSAMPLE
					paste $HTMLFILE_ANNEX_GENES_PANEL_VARIANTS_TSV.INFO $HTMLFILE_ANNEX_GENES_PANEL_VARIANTS_TSV.CHROMPOSREFALT $HTMLFILE_ANNEX_GENES_PANEL_VARIANTS_TSV.FORMATSAMPLE > $HTMLFILE_ANNEX_GENES_PANEL_VARIANTS_TSV
				else
					HTMLFILE_ANNEX_GENES_PANEL_VARIANTS_TSV=$GENES_PANEL_REPORT_TSV
				fi;
				#exit 0

				print_header=true
				GENES_PANEL_VARIANTS_HTML=""
				#GENES_PANEL_HSMETRICS_PER_TARGET_COVERAGE_HTML="<tbody>"
				while read INPUT ; do
					#echo $INPUT
				  	if $print_header;then
					    GENES_PANEL_VARIANTS_HTML=$GENES_PANEL_VARIANTS_HTML"<thead><tr class=\"table-heads\"><th class=\"head-item mbr-fonts-style display-7\">"$(echo -e "$INPUT" | tr ",;" " " | sed -e 's/\t/<\/th><th class=\"head-item mbr-fonts-style display-7\">/g')"</th></tr></thead><tbody>"
					    print_header=false
					else
				  		#echo "<tr><td>${INPUT//\t/</td><td>}</td></tr>" ;
				  		GENES_PANEL_VARIANTS_HTML=$GENES_PANEL_VARIANTS_HTML"<tr><td class=\"body-item mbr-fonts-style display-7\">"$(echo -e "$INPUT" | tr ",;" " " | sed -e 's/\t/<\/td><td class=\"body-item mbr-fonts-style display-7\">/g')"</td></tr>"
					fi;
				done < $HTMLFILE_ANNEX_GENES_PANEL_VARIANTS_TSV ;
				GENES_PANEL_VARIANTS_HTML=$GENES_PANEL_VARIANTS_HTML"</tbody>"

			fi;

			#echo $GENES_PANEL_VARIANTS_HTML

			# BREAK
			(( $(echo "$GENES_PANEL_NUM >= 2" |bc -l) )) && GENES_PANEL_BREAK=$PAGE_BREAK_BEFORE || GENES_PANEL_BREAK=""

			# PLAN
			echo '<a class="btn display-4 mbr-section-subtitle mbr-fonts-style display-6 align-center" href="#VARIANTS_'$GENES_PANEL'"><small>'$GENE_PANEL_NAME_HTML'</small></a>' >> $HTMLFILE_ANNEX_PLAN_LINKS_VARIANTS


			echo '

			<section class="section-table cid-ruiBoanIwc" id="VARIANTS_'$GENES_PANEL'" >


			  <div class="container container-table">

				  <h3 class="mbr-section-subtitle mbr-fonts-style align-center mbr-light display-5" '$GENES_PANEL_BREAK'>
				  <br>
				  	'$GENE_PANEL_NAME_HTML'
				  </h3>


				  <div class="table-wrapper">
					<div class="container">
					  <div class="row search">
						<div class="col-md-6"></div>
						<div class="col-md-6">
							<div class="dataTables_filter">
							  <label class="searchInfo mbr-fonts-style display-7">Search:</label>
							  <input class="form-control input-sm" disabled="">
							</div>
						</div>
					  </div>
					</div>

					<div class="container scroll">
					  	<table class="table isSearch" cellspacing="0">
							'$GENES_PANEL_VARIANTS_HTML'
					  	</table>

					</div>

					<div class="container table-info-container">
					  <div class="row info">
						<div class="col-md-6">
						  <div class="dataTables_info mbr-fonts-style display-7">
							<span class="infoBefore">Showing</span>
							<span class="inactive infoRows"></span>
							<span class="infoAfter">entries</span>
							<span class="infoFilteredBefore">(filtered from</span>
							<span class="inactive infoRows"></span>
							<span class="infoFilteredAfter"> total entries)</span>
						  </div>
						</div>
						<div class="col-md-6"></div>
					  </div>
					</div>


				  </div>
				</div>

			</section>

			' >> $HTMLFILE_ANNEX_GENES_PANEL_VARIANTS

		fi;

	done;


#done;



SECTION_NAME="Variants"
SECTION_ID="annex_variants"

# PLAN
echo '<a class="btn btn-primary-outline display-4" href="#'$SECTION_ID'">'$SECTION_NAME'</a>' >> $HTMLFILE_ANNEX_PLAN_LINKS

echo '

	<section class="cid-ruiBoanIwc" id="'$SECTION_ID'" '$PAGE_BREAK_BEFORE'>
	<br>

	    <div class="container">
	        <h2 class="mbr-section-title pb-3 align-center mbr-fonts-style display-2">
	            '$SECTION_NAME'
			</h2>

			<p class="mbr-section-subtitle mbr-fonts-style display-6 align-center">
				Variant calling from '$PIPELINES_NUMBER' pipelines:
				<br>
				'$(echo $ALIGNERS_CALLERS_ANNOTATORS | sed "s/ /<br>/gi")'
				<br>

			</p>

			<section class="mbr-section content8 cid-ruitEAjBmu" id="content8-1z">
			    <div class="container">
			        <div class="media-container-row title">
			            <div class="col-12 col-md-40">
			                <div class="mbr-section-btn align-center">
							'$(cat $HTMLFILE_ANNEX_PLAN_LINKS_VARIANTS)'
			            </div>
			        </div>
			    </div>
			</section>

			'"$(cat $HTMLFILE_ANNEX_GENES_PANEL_VARIANTS)"'



	   </div>
	</section>

' > $HTMLFILE_ANNEX_VARIANTS






# PLAN
##########

(($VERBOSE)) && echo "#[INFO] ANNEX PLAN section"


HTMLFILE_ANNEX_PLAN=$HTMLFILE".annex.plan"


echo '
<section class="mbr-section content8 cid-ruitEAjBmu" id="content8-1z">
    <div class="container">
        <div class="media-container-row title">
            <div class="col-12 col-md-40">
                <div class="mbr-section-btn align-center">
				'$(cat $HTMLFILE_ANNEX_PLAN_LINKS)'
            </div>
        </div>
    </div>
</section>
' > $HTMLFILE_ANNEX_PLAN







# FOOTER
##########




# BODY
#######

HTMLFILE_BODY=$HTMLFILE".body"

#'"$(cat $HTMLFILE_MENU)"'

echo '

	'"$(cat $HTMLFILE_TITLE)"'
	'"$(cat $HTMLFILE_MAIN)"'
	'"$(cat $HTMLFILE_PLAN)"'
	'"$(cat $HTMLFILE_SUMMARY)"'
	'"$(cat $HTMLFILE_SEQUENCING)"'
	'"$(cat $HTMLFILE_COVERAGE)"'
	'"$(cat $HTMLFILE_AMPLICON_CLIPPING)"'
	'"$(cat $HTMLFILE_CALLING)"'
	'"$(cat $HTMLFILE_VARIANTS_STATS)"'
	'"$(cat $HTMLFILE_SCRIPTS)"'
' > $HTMLFILE_BODY


# ANNEX

HTMLFILE_ANNEX_BODY=$HTMLFILE_ANNEX".body"

#'"$(cat $HTMLFILE_MENU)"'

echo '

	'"$(cat $HTMLFILE_TITLE)"'
	'"$(cat $HTMLFILE_MAIN)"'
	'"$(cat $HTMLFILE_ANNEX_PLAN)"'
	'"$(cat $HTMLFILE_ANNEX_COVERAGE)"'
	'"$(cat $HTMLFILE_ANNEX_GENES_COVERAGE)"'
	'"$(cat $HTMLFILE_ANNEX_DEPTH)"'
	'"$(cat $HTMLFILE_ANNEX_AMPLICON)"'
	'"$(cat $HTMLFILE_ANNEX_VARIANTS)"'
	'"$(cat $HTMLFILE_SCRIPTS)"'
' > $HTMLFILE_ANNEX_BODY



# OUTPUT
##########


# HTML

echo -ne '

<!DOCTYPE html>

<html>

	<head>

		'"$(cat $HTMLFILE_HEADER)"'

	</head>

	<body>

		'"$(cat $HTMLFILE_BODY)"'

	</body>

</html>

' > $HTMLFILE



# HTML ANNEX

echo -ne '

<!DOCTYPE html>

<html>

	<head>

		'"$(cat $HTMLFILE_HEADER)"'

	</head>

	<body>

		'"$(cat $HTMLFILE_ANNEX_BODY)"'

	</body>

</html>

' > $HTMLFILE_ANNEX





#cp $STARK_FOLDER_BIN/test.html $HTMLFILE
#mkdir -p $(dirname $OUTPUT)/assets
#cp -R $HTMLDIR/* $(dirname $OUTPUT)/assets/



(($DEBUG)) && cat $HTMLFILE
(($DEBUG)) && cat $HTMLFILE_ANNEX





# WRITE FILES
###############

mkdir -p $(dirname $OUTPUT)

if [ "$OUTPUT_TYPE" == "html" ]; then


	cp $HTMLFILE $OUTPUT_HTMLFILE
	cp $HTMLFILE_ANNEX $OUTPUT_ANNEX_HTMLFILE
	mkdir -p $OUTPUT_HTMLDIR
	cp -Rf $HTMLDIR/* $OUTPUT_HTMLDIR/


fi;


# GENERATE PDF
################

# xvfb-run wkhtmltopdf $OUTPUT_HTMLFILE $OUTPUT_HTMLFILE.pdf


# cleaning
rm -rf $REPORTDIR
