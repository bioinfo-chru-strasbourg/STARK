#!/bin/bash
#################################
##
## NGS environment
##
#################################

SCRIPT_NAME="IlluminaRunDemultiplexing"
SCRIPT_DESCRIPTION="Demultiplexing of an Illumina Run"
SCRIPT_RELEASE="0.9.10b"
SCRIPT_DATE="25/03/2019"
SCRIPT_AUTHOR="Antony Le Bechec"
SCRIPT_COPYRIGHT="IRC"
SCRIPT_LICENCE="GNU-AGPL"

# Release note
#RELEASE_NOTES="#\n"
RELEASE_NOTES=$RELEASE_NOTES"# 0.9.7b-20/11/2015: Creation/ReFormating script\n";
RELEASE_NOTES=$RELEASE_NOTES"# 0.9.8b-26/11/2015: SampleSheet as input option. Add Manifest default folder to find Manifest file defined in SampleSheet\n";
RELEASE_NOTES=$RELEASE_NOTES"# 0.9.9b-26/09/2016: Cleaning Sample Name in the Sample Sheet by removing spaces.\n";
RELEASE_NOTES=$RELEASE_NOTES"# 0.9.10b-25/03/2019: Cleaning Sample Name in the Sample Sheet by removing spaces.\n";

# Script folder
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# Configuration
ENV_CONFIG=$(find -L $SCRIPT_DIR/.. -name config.app)
source $ENV_CONFIG


# Header
function header () {
	echo "#######################################";
	echo "# $SCRIPT_NAME [$SCRIPT_RELEASE-$SCRIPT_DATE]";
	echo "# $SCRIPT_DESCRIPTION ";
	echo "# $SCRIPT_AUTHOR @ $SCRIPT_COPYRIGHT Â© $SCRIPT_LICENCE";
	echo "#######################################";
}

# Release
function release () {
	echo "# RELEASE NOTES:";
	echo -e $RELEASE_NOTES
}

# Usage
function usage {
	echo "# USAGE: $(basename $0) --fastq=<FILE1,FILE2,...> [options...]";
	echo "# -e|--application|--app|--env=<APP|FILE>     APP name or APP file configuration of the APPLICATION.";
	echo "#                                             Must be in the STARK folder if relative path";
	echo "#                                             Default: default.app if not defined";
	echo "# -r|--run                                    RUN folder to demultiplex (mandatory)";
	echo "#                                             Need SampleSheet.csv file and Illumina file/folder structure";
	echo "# -o|--output|--demultiplex_folder=<FOLDER>   Output/Demultiplexing folder";
	echo "#                                             Default: Defined in APP, or RUN folder itself";
	echo "# -l|--samplesheet=<FILE>                     Illumina SampleSheet.csv file";
	echo "#                                             Default: found in RUN folder";
	echo "# -t|--threads|--threads_processing=<INTEGER> Number of thread used for processing demultiplexed data";
	echo "#                                             Default: Defined in APP, or all cores in your system minus one";
	echo "# -t|--threads_loading=<INTEGER>              Number of thread used for loading demultiplexed data";
	echo "#                                             Default: Defined in APP, or thread used for processing demultiplexed data --threads";
	echo "# -t|--threads_writing=<INTEGER>              Number of thread used for writing demultiplexed data";
	echo "#                                             Default: Default: Defined in APP, or thread used for processing demultiplexed data --threads";
	echo "# -b|--barcode_mismatches=<INTEGER>           Number of barcode mismatches to use";
	echo "#                                             Default: Defined in APP, or 1";

	echo "# -v|--verbose                                VERBOSE option";
	echo "# -d|--debug                                  DEBUG option";
	echo "# -n|--release                                RELEASE option";
	echo "# -h|--help                                   HELP option";
	echo "#";
}

# header
header;


# USAGE exemple
# ./launch.sample.sh -f "$DATA/SAMPLE/HORIZON/HORIZON.R1.fastq.gz,$DATA/SAMPLE/HORIZON/HORIZON.bam,$DATA/SAMPLE/TEST/TEST.cram" -q "$DATA/SAMPLE/HORIZON/HORIZON.R2.fastq.gz" -s "H1,H2" -r "test" -b "/home1/TOOLS/data/SAMPLE/HORIZON/HORIZON.manifest,/home1/TOOLS/data/SAMPLE/HORIZON/HORIZON.bed,/home1/TOOLS/data/SAMPLE/TEST/TEST.bed" --output="$DATA/RESULTS"
# /home1/IRC/TOOLS/tools/stark/dev/STARK -f "$DATA/SAMPLE/HORIZON/HORIZON.R1.fastq.gz,$DATA/SAMPLE/HORIZON/HORIZON.bam,$DATA/SAMPLE/TEST/TEST.cram" -q "$DATA/SAMPLE/HORIZON/HORIZON.R2.fastq.gz" -s "H1,H2" -r "testH,testH,testT" -b "/home1/TOOLS/data/SAMPLE/HORIZON/HORIZON.manifest,/home1/TOOLS/data/SAMPLE/HORIZON/HORIZON.bed,/home1/TOOLS/data/SAMPLE/TEST/TEST.bed" -e env.HUSTUMSOL.sh --output="$DATA/RESULTS" --repository="$DATA/REPOSITORY"
# /home1/IRC/TOOLS/tools/stark/dev/STARK -f $DATA/SAMPLE/TEST/TEST.cram -b /home1/TOOLS/data/SAMPLE/TEST/TEST.bed --output="$DATA/RESULTS" -r testT

####################################################################################################################################
# Getting parameters from the input
#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# ":" tells that the option has a required argument, "::" tells that the option has an optional argument, no ":" tells no argument
ARGS=$(getopt -o "e:r:o:l:t:b:vdnh" --long "env:,app:,application:,run:,output:,demultiplex_folder:,samplesheet:,threads:,threads_loading:,threads_writing:,barcode_mismatches:,verbose,debug,release,help" -- "$@" 2> /dev/null)
[ $? -ne 0 ] && \
	echo "Error in the argument list." "Use -h or --help to display the help." >&2 && usage && \
	exit 1
eval set -- "$ARGS"

PARAM=$@

while true
do
	case "$1" in
		-e|--env|--app|--application)
			APP="$2"
			shift 2
			;;
		-r|--run)
			RUN="$2"
			RUN=$(echo $RUN | tr "," " " | cut -f1)
			shift 2
			;;
		-o|--output|--demultiplex_folder)
			DEMULTIPLEXING_DIR_INPUT="$2"
			shift 2
			;;
		-l|--samplesheet)
			SAMPLESHEET_INPUT="$2" #"$(echo $2 | tr "\n" " ")"
			shift 2
			;;
		-t|--threads)
			THREADS_INPUT="$2"
			shift 2
			;;
		--threads_loading)
			THREADS_LOADING_INPUT="$2"
			shift 2
			;;
		--threads_writing)
			THREADS_WRITING_INPUT="$2"
			shift 2
			;;
		-b|--barcode_mismatches)
			BARCODE_MISMATCHES_INPUT="$2"
			shift 2
			;;
		-v|--verbose)
			VERBOSE=1
			shift 1
			;;
		-d|--debug)
			VERBOSE=1
			DEBUG=1
			shift 1
			;;
		-n|--release)
			release;
			exit 0
			;;
		-h|--help)
			usage
			exit 0
			;;
		--) shift
			break
			;;
		*) 	echo "Option $1 is not recognized. " "Use -h or --help to display the help." && usage && \
			exit 1
			;;
	esac
done
#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

####################################################################################################################################
# Checking the input parameter
#--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
if [ "$RUN" == "" ]
then
	echo "Option --run is required. " "Use -h or --help to display the help." && usage && exit 1;
fi

# APPLICATION
ENV=$(find_app "$APP" "$STARK_FOLDER_APPS")
source_app "$APP" "$STARK_FOLDER_APPS"

# RUN FOLDER_RUN
[ ! -d $RUN ] && echo "#[ERROR] No RUN folder '$RUN'" && exit 0;
echo "#[INFO] RUN folder: $RUN";
RUN_NAME=$(basename $RUN)
echo "#[INFO] RUN name: $RUN_NAME";

# Demultiplexing folder
[ "$DEMULTIPLEXING_DIR_INPUT" != "" ] && [ -d $DEMULTIPLEXING_DIR_INPUT ] && DEMULTIPLEXING_DIR=$DEMULTIPLEXING_DIR_INPUT
[ ! -d $DEMULTIPLEXING_DIR ] && DEMULTIPLEXING_DIR=$DEMULTIPLEXING_FOLDER
[ ! -d $DEMULTIPLEXING_DIR ] && DEMULTIPLEXING_DIR=$RUN
[ ! -d $DEMULTIPLEXING_DIR ] && echo "#[ERROR] No Demultiplexing folder" && exit 0;
echo "#[INFO] Demultiplexing folder: $DEMULTIPLEXING_DIR"

# Find SampleSheet
RUN_SAMPLESHEET=""
# sampleSheet from Input
[ ! -z $SAMPLESHEET_INPUT ] && [ -e $SAMPLESHEET_INPUT ] && RUN_SAMPLESHEET=$SAMPLESHEET_INPUT
# sampleSheet within the RUN folder
[ -z $RUN_SAMPLESHEET ] && RUN_SAMPLESHEET=$RUN/SampleSheet.csv
# Echo
[ ! -e $RUN_SAMPLESHEET ] && echo "#[ERROR] No SampleSheet for RUN '$RUN'" && exit 0;
echo "#[INFO] SampleSheet: $RUN_SAMPLESHEET";

# CORES
CORES=$(nproc)

# THREADS
re='^[0-9]+$'

if ! [[ $THREADS =~ $re ]] || [ -z "$THREADS" ] || [ "$THREADS" == "" ] || [ $THREADS -gt $CORES ] ; then
	CORES_FREE=1
	THREADS=$(($CORES-$CORES_FREE))
fi;
if [[ $THREADS_INPUT =~ $re ]] && [ "$THREADS_INPUT" != "" ]; then
	THREADS=$THREADS_INPUT;
fi;
echo "#[INFO] Threads processing: $THREADS";

# THREADS LOADING
if ! [[ $THREADS_LOADING =~ $re ]] || [ -z "$THREADS_LOADING" ] || [ "$THREADS_LOADING" == "" ] || [ $THREADS_LOADING -gt $CORES ] ; then
	THREADS_LOADING=$THREADS
fi;
if [[ $THREADS_LOADING_INPUT =~ $re ]] && [ "$THREADS_LOADING_INPUT" != "" ]; then
	THREADS_LOADING=$THREADS_LOADING_INPUT;
fi;
echo "#[INFO] Threads loading: $THREADS_LOADING";

# THREADS WRITING
if ! [[ $THREADS_WRITING =~ $re ]] || [ -z "$THREADS_WRITING" ] || [ "$THREADS_WRITING" == "" ] || [ $THREADS_WRITING -gt $CORES ] ; then
	THREADS_WRITING=$THREADS
fi;
if [[ $THREADS_WRITING_INPUT =~ $re ]] && [ "$THREADS_WRITING_INPUT" != "" ]; then
	THREADS_WRITING=$THREADS_WRITING_INPUT;
fi;
echo "#[INFO] Threads writing: $THREADS_WRITING";


# BARCODE_MISMATCHES
if ! [[ $BARCODE_MISMATCHES =~ $re ]] || [ -z "$BARCODE_MISMATCHES" ] || [ "$BARCODE_MISMATCHES" == "" ] ; then
	BARCODE_MISMATCHES=1
fi;
if [[ $BARCODE_MISMATCHES_INPUT =~ $re ]] && [ "$BARCODE_MISMATCHES_INPUT" != "" ]; then
	BARCODE_MISMATCHES=$BARCODE_MISMATCHES_INPUT;
fi;
echo "#[INFO] Barcode Mismatches: $BARCODE_MISMATCHES";


# Config
LOGFILE=$DEMULTIPLEXING_DIR/$RUN_NAME/demultiplexing.configuration.log
#RUNFOLDER_DIR=$RUN
OUTPUT_DIR=$DEMULTIPLEXING_DIR/$RUN_NAME
DEM_SAMPLESHEET=$OUTPUT_DIR/SampleSheet.csv
#SAMPLE_SHEET_BCL2FASTQ=$OUTPUT_DIR/SampleSheet.bcl2fastq.csv
MANIFESTS=$OUTPUT_DIR/manifests.txt
MANIFESTS_LIST=$OUTPUT_DIR/manifests_list.txt
INTERVALS=$OUTPUT_DIR/run.intervals
READS_LENGTH=$OUTPUT_DIR/readsLength.txt
MASK=$OUTPUT_DIR/mask.txt
ADAPTERS=$OUTPUT_DIR/adapters.txt
MAKEFILE=$OUTPUT_DIR/Makefile


(($DEBUG)) && echo "#[INFO] BCL2FASTQ=$BCL2FASTQ"
#(($DEBUG)) && echo "#[INFO] RUNFOLDER_DIR=$RUNFOLDER_DIR"
(($DEBUG)) && echo "#[INFO] OUTPUT_DIR=$OUTPUT_DIR"
(($DEBUG)) && echo "#[INFO] LOGFILE=$LOGFILE"
#(($DEBUG)) && ls -l $OUTPUT_DIR
#(($DEBUG)) && ls -l $DEM_SAMPLESHEET

# create Output/demultiplexing folder
mkdir -p $OUTPUT_DIR

# LOG
echo "#[`date`] Demultiplexing Configuration log" > $LOGFILE

# Copy and Cleaning SampleSheet SampleName
# Empty SampleSheet
(($VERBOSE)) && echo "#[INFO] Copy and Cleaning SampleSheet";
> $DEM_SAMPLESHEET
# Find header before DATA section
DATA_SECTION_LINE=$(grep "^\[Data\]" $RUN_SAMPLESHEET -n | awk -F: '{print $1}')
SAMPLE_SECTION_FIRST_LINE=$(($DATA_SECTION_LINE+1))
head -n $SAMPLE_SECTION_FIRST_LINE $RUN_SAMPLESHEET > $DEM_SAMPLESHEET
# print DATA section and the rest
tail -n $(($SAMPLE_SECTION_FIRST_LINE-$(grep ^ -c $RUN_SAMPLESHEET))) $RUN_SAMPLESHEET | sed '/^[[:space:]]*$/d' | awk -F"," '{gsub(/ /,"_",$1)} {gsub(/ /,"_",$2)} {LINE=$1","$2} {for(i=3;i<=NF;++i)LINE=LINE","$i} {print LINE}' >> $DEM_SAMPLESHEET
# LOG
echo "#[`date`] COMMAND: $COMMAND" >> $LOGFILE && $COMMAND >> $LOGFILE

# Manifests_list
(($VERBOSE)) && echo "#[INFO] Create manifests and indexes list file";
COMMAND="$PYTHON2 $SCRIPT_DIR/ElectricFancyFox.py $DEM_SAMPLESHEET $MANIFESTS_LIST manifests_list $RUN"
# LOG
echo "#[`date`] COMMAND: $COMMAND" >> $LOGFILE && $COMMAND >> $LOGFILE

# Manifests
(($VERBOSE)) && echo "#[INFO] Create manifests file and copy all manifests";
COMMAND="$PYTHON2 $SCRIPT_DIR/ElectricFancyFox.py $DEM_SAMPLESHEET $MANIFESTS manifests $RUN"
# LOG
echo "#[`date`] COMMAND: $COMMAND" >> $LOGFILE && $COMMAND >> $LOGFILE

# Copy Manifests
for M in $(cat $MANIFESTS | tr "," " "); do
	(($VERBOSE)) && echo "#[INFO] Copy manifests '$M' and related files";

	#echo $FOLDER_MANIFEST/$M
	#[ -e $FOLDER_MANIFEST/$M ] && cp $FOLDER_MANIFEST/$M $OUTPUT_DIR/$M 2>/dev/null && (($VERBOSE)) && echo "#[INFO] Copy manifest '$M' from Manifest folder '$FOLDER_MANIFEST'";
	#echo $RUN/$M
	#echo cp $RUN/$M $OUTPUT_DIR/$M
	#cp $RUN/$M $OUTPUT_DIR/$M
	#[ -e $RUN/$M ] && cp $RUN/$M $OUTPUT_DIR/$M  2>/dev/null && (($VERBOSE)) && echo "#[INFO] Copy manifest '$M' from RUN folder '$RUN' (replaced if already copied)";

	# Manifest File
	if [ -e $RUN/$M ]; then
		cp $RUN/$M $OUTPUT_DIR/$M  2>/dev/null && (($VERBOSE)) && echo "#[INFO] Copy manifest '$M' from RUN folder '$RUN'";
	elif [ -e $FOLDER_MANIFEST/$M ]; then
		cp $FOLDER_MANIFEST/$M $OUTPUT_DIR/$M 2>/dev/null && (($VERBOSE)) && echo "#[INFO] Copy manifest '$M' from Manifest folder '$FOLDER_MANIFEST'";
	else
		echo "#[WARNING] Manifest file NOT found"
	fi;

	# Genes
	#[ -e $FOLDER_MANIFEST/$M.genes ] && cp $FOLDER_MANIFEST/$M.genes $OUTPUT_DIR/$M.genes 2>/dev/null && (($VERBOSE)) && echo "#[INFO] Copy manifest.genes '$M.genes' from Manifest folder '$FOLDER_MANIFEST'";
	#cp -f $FOLDER_MANIFEST/$M*.genes $OUTPUT_DIR/ 2>/dev/null && (($VERBOSE)) && echo "#[INFO] Copy MANIFEST*.genes '$M*.genes' from Manifest folder '$FOLDER_MANIFEST'";
	#[ -e $RUN/$M.genes ] && cp $FOLDER_MANIFEST/$M.genes $OUTPUT_DIR/$M.genes  2>/dev/null && (($VERBOSE)) && echo "#[INFO] Copy manifest.genes '$M.genes' from RUN folder '$RUN' (replaced if already copied)";
	#cp -f $RUN/$M*.genes $OUTPUT_DIR/ 2>/dev/null && (($VERBOSE)) && echo "#[INFO] Copy MANIFEST*.genes '$M*.genes' from Manifest folder '$RUN' (replaced if already copied)";

	if (($(ls $RUN/$M*.genes 2>/dev/null | wc -l))); then
		cp -f $RUN/$M*.genes $OUTPUT_DIR/ 2>/dev/null && (($VERBOSE)) && echo "#[INFO] Copy MANIFEST*.genes '$M*.genes' from Manifest folder '$RUN'";
	elif (($(ls $FOLDER_MANIFEST/$M*.genes 2>/dev/null | wc -l))); then
		cp -f $FOLDER_MANIFEST/$M*.genes $OUTPUT_DIR/ 2>/dev/null && (($VERBOSE)) && echo "#[INFO] Copy MANIFEST*.genes '$M*.genes' from Manifest folder '$FOLDER_MANIFEST'";
	else
		echo "#[INFO] Manifest Genes file NOT found"
	fi;

	# Transcripts
	#[ -e $FOLDER_MANIFEST/$M.transcripts ] && cp $FOLDER_MANIFEST/$M.transcripts $OUTPUT_DIR/$M.transcripts 2>/dev/null && (($VERBOSE)) && echo "#[INFO] Copy manifest.transcripts '$M.transcripts' from Manifest folder '$FOLDER_MANIFEST'";
	#cp -f $FOLDER_MANIFEST/$M*.transcripts $OUTPUT_DIR/ 2>/dev/null && (($VERBOSE)) && echo "#[INFO] Copy MANIFEST*.transcripts '$M*.transcripts' from Transcripts folder '$FOLDER_MANIFEST'";
	#[ -e $RUN/$M.transcripts ] && cp $FOLDER_MANIFEST/$M.transcripts $OUTPUT_DIR/$M.transcripts  2>/dev/null && (($VERBOSE)) && echo "#[INFO] Copy manifest.transcripts '$M.transcripts' from RUN folder '$RUN' (replaced if already copied)";
	#cp -f $RUN/$M*.transcripts $OUTPUT_DIR/ 2>/dev/null && (($VERBOSE)) && echo "#[INFO] Copy MANIFEST*.transcipts '$M*.transcripts' from Transcripts folder '$RUN' (replaced if already copied)";

	if (($(ls $RUN/$M*.transcripts 2>/dev/null | wc -l))); then
		cp -f $RUN/$M*.transcripts $OUTPUT_DIR/ 2>/dev/null && (($VERBOSE)) && echo "#[INFO] Copy MANIFEST*.transcipts '$M*.transcripts' from Transcripts folder '$RUN' (replaced if already copied)";
	elif (($(ls $FOLDER_MANIFEST/$M*.transcripts 2>/dev/null | wc -l))); then
		cp -f $FOLDER_MANIFEST/$M*.transcripts $OUTPUT_DIR/ 2>/dev/null && (($VERBOSE)) && echo "#[INFO] Copy MANIFEST*.transcripts '$M*.transcripts' from Transcripts folder '$FOLDER_MANIFEST'";
	else
		echo "#[INFO] Manifest Transcripts file NOT found"
	fi;


done;

# Reads Length file
(($VERBOSE)) && echo "#[INFO] Create Reads Length file";
COMMAND="$PYTHON2 $SCRIPT_DIR/ElectricFancyFox.py $DEM_SAMPLESHEET $READS_LENGTH readsLength $RUN"
# LOG
echo "#[`date`] COMMAND: $COMMAND" >> $LOGFILE && $COMMAND >> $LOGFILE

# BCL2FASTQ Mask option file
(($VERBOSE)) && echo "#[INFO] BCL2FASTQ Mask option file";
COMMAND="$PYTHON2 $SCRIPT_DIR/ElectricFancyFox.py $DEM_SAMPLESHEET $MASK mask $RUN"
# LOG
echo "#[`date`] COMMAND: $COMMAND" >> $LOGFILE && $COMMAND >> $LOGFILE

# BCL2FASTQ Adapters
(($VERBOSE)) && echo "#[INFO] BCL2FASTQ Adapters file";
COMMAND="$PYTHON2 $SCRIPT_DIR/ElectricFancyFox.py $DEM_SAMPLESHEET $ADAPTERS adapters $RUN"
# LOG
echo "#[`date`] COMMAND: $COMMAND" >> $LOGFILE && $COMMAND >> $LOGFILE

# BCL2FASTQ Demultiplexing parameters
NB_SAMPLE=$(tail -n $(($SAMPLE_SECTION_FIRST_LINE-$(grep ^ -c $RUN_SAMPLESHEET))) $RUN_SAMPLESHEET | sed '/^[[:space:]]*$/d' | sort -u | wc -l)
THREADS_WRITING=$(($NB_SAMPLE>$THREADS_WRITING?$THREADS_WRITING:$NB_SAMPLE));
[ "$ADAPTER_STRINGENCY" == "" ] && ADAPTER_STRINGENCY=0.9
[ "$FASTQ_DEMULTIPLEXING_COMPRESSION_LEVEL" == "" ] && FASTQ_DEMULTIPLEXING_COMPRESSION_LEVEL=4

(($VERBOSE)) && echo "#[INFO] NB_SAMPLE="$NB_SAMPLE
(($VERBOSE)) && echo "#[INFO] THREADS_LOADING="$THREADS_LOADING
(($VERBOSE)) && echo "#[INFO] THREADS_WRITING="$THREADS_WRITING
#(($VERBOSE)) && echo "#[INFO] WRITING_THREADS="$WRITING_THREADS
(($VERBOSE)) && echo "#[INFO] ADAPTER_STRINGENCY="$ADAPTER_STRINGENCY
(($VERBOSE)) && echo "#[INFO] FASTQ_DEMULTIPLEXING_COMPRESSION_LEVEL="$FASTQ_DEMULTIPLEXING_COMPRESSION_LEVEL


#(($DEBUG)) && ls -l $DEM_SAMPLESHEET
(($DEBUG)) && echo "" && echo "DEBUG"
(($DEBUG)) && cat $LOGFILE
(($DEBUG)) && ls -l $OUTPUT_DIR
(($DEBUG)) && cat $DEM_SAMPLESHEET
#(($DEBUG)) && cat $MANIFESTS_LIST
#(($DEBUG)) && cat $MANIFESTS

# Demultiplexing configuration
COMMAND="$BCL2FASTQ --runfolder-dir $RUN  --output-dir $OUTPUT_DIR --sample-sheet $DEM_SAMPLESHEET --barcode-mismatches $BARCODE_MISMATCHES --fastq-compression-level $FASTQ_DEMULTIPLEXING_COMPRESSION_LEVEL -r $THREADS_LOADING -p $THREADS -w $THREADS_WRITING --no-lane-splitting --create-fastq-for-index-reads"
echo "#[`date`] COMMAND: " $COMMAND >> $LOGFILE
(($DEBUG)) && echo "#[INFO] Command: "$COMMAND

#$COMMAND 1>>$LOGFILE 2>>$LOGFILE || echo "message" && echo "exit"
if ! $COMMAND 1>>$LOGFILE 2>>$LOGFILE; then
	# List of fastq files with size
	ls -hs1 $OUTPUT_DIR/*fastq.gz 2>/dev/null | awk '{print "#[INFO] FASTQ: "$2"\t"$1}'
	echo "#[ERROR] Demultiplexing FAILED";
	tail -n 10 $LOGFILE | awk '{print "#[ERROR] LOG: "$0}'
	exit 1;
fi;

# List of fastq files with size
ls -hs1 $OUTPUT_DIR/*fastq.gz $OUTPUT_DIR/*/*fastq.gz 2>/dev/null | awk '{print "#[INFO] FASTQ: "$2"\t"$1}' 1>>$LOGFILE 2>>$LOGFILE


# End file
tail -n 1 $LOGFILE > $OUTPUT_DIR/STARKComplete.txt

exit 0;
