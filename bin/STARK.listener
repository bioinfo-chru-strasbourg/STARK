#!/bin/bash
#################################
##
## STARK
##
#################################

SCRIPT_NAME="STARKListener"
SCRIPT_DESCRIPTION="STARK listener analysis"
SCRIPT_RELEASE="0.9b"
SCRIPT_DATE="24/11/2019"
SCRIPT_AUTHOR="Antony Le Bechec"
SCRIPT_COPYRIGHT="IRC"
SCRIPT_LICENCE="GNU-AGPL"

# Realse note
RELEASE_NOTES=$RELEASE_NOTES"# 0.9b-24/11/2019: Script creation\n";

# Script folder
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# Configuration
ENV_CONFIG=$(find -L $SCRIPT_DIR/.. -name config.app)
source $ENV_CONFIG 1>/dev/null 2>/dev/null


# Header
function header () {
	cat $STARK_FOLDER_DOCS/HEADER
	#echo "#######################################";
	#echo "# $SCRIPT_NAME [$SCRIPT_RELEASE-$SCRIPT_DATE]";
	#echo "# $SCRIPT_DESCRIPTION ";
	#echo "# $SCRIPT_AUTHOR @ $SCRIPT_COPYRIGHT Â© $SCRIPT_LICENCE";
	#echo "#######################################";
}

# Release
function release () {
	cat $STARK_FOLDER_DOCS/RELEASE_NOTES
	#echo "# RELEASE NOTES:";
	#echo -e $RELEASE_NOTES
}

# Usage
function usage {
	echo "# USAGE: $(basename $0) [options...]";
	echo "";
	echo "### Launch an analysis through (by order of priority):";
	echo "# --application=<STRING|FILE>              APP name or APP file configuration of the APPLICATION.";
	echo "#                                          Must be in the STARK APPS folder if relative path";
	echo "#                                          Default: defined in the RUN SampleSheet, or default.app if not defined";echo ""
	echo "# --input=<FOLDER>                         List of folders containing analyses/runs.";
	echo "#                                          Default: RUN folder in APP.";
	echo "# --condition=<FILE1,FILE2...>             List of files to start command (at least one)";
	echo "#                                          Default: 'RTAComplete.txt&SampleSheet.csv STARKComplete.txt&SampleSheet.csv *analysis.json'";
	echo "# --days=<INTEGER>                         Analysis folder and files conditions maximum modification days";
	echo "#                                          Default: '30'";
	echo "# --log=<FOLDER>                           Logs folder";
	echo "#                                          Default: LOG folder in APP.";
	echo "# --command=<STRING>                       Command to launch";
	echo "#                                          Either 'DOCKER', 'LAUNCHER' or 'STARK'";
	echo "#                                          Default: 'DOCKER'";
	echo "# --launcher=<STRING>                      Launcher URI (for command 'LAUNCH')";
	echo "#                                          Default: 'http://localhost:8000/analysis'";
	echo "# --docker-stark-image=<STRING>            Docker STARK image (for command 'DOCKER')";
	echo "#                                          Default: environment";
	echo "# --exec                                   Execute command";
	echo "# --daemon                                 Execute script as a daemon";
	echo "# --daemon-periodicity                     Listening periodicity";

	echo "# --verbose                                VERBOSE";
	echo "# --debug                                  DEBUG";
	echo "# --release                                RELEASE";
	echo "# --help                                   HELP";
	echo "";
}




####################################################################################################################################
# Getting parameters from the input
#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# ":" tells that the option has a required argument, "::" tells that the option has an optional argument, no ":" tells no argument
ARGS=$(getopt -o "e:vdnh" --long "env:,app:,application:,input:,condition:,days:,log:,command:,launcher:,docker-stark-image:,exec,daemon,daemon-periodicity:,no_header,verbose,debug,release,help" -- "$@" 2> /dev/null)

if [ $? -ne 0 ]; then
	:
	echo "#[ERROR] Error in the argument list:";
	echo "#[ERROR] $@"
	echo ""
	usage;
	exit;
fi;


PARAM=$@
DEBUG=0
VERBOSE=0


eval set -- "$ARGS"
while true
do
	#echo "$1=$2"
	#echo "Eval opts";
	case "$1" in
		-e|--env|--app|--application)
			APP="$2"
			shift 2
			;;
		--input)
			INPUT_FOLDER="$2"
			INPUT_FOLDER=$(echo $INPUT_FOLDER | tr "," " ")
			shift 2
			;;
		--condition)
			CONDITION="$2"
			CONDITION=$(echo $CONDITION | tr "," " ")
			shift 2
			;;
		--days)
			DAYS="$2"
			shift 2
			;;
		--log)
			LOG="$2"
			shift 2
			;;
		--command)
			COMMAND="$2"
			shift 2
			;;
		--launcher)
			LAUNCHER="$2"
			shift 2
			;;
		--docker-stark-image)
			DOCKER_STARK_IMAGE="$2"
			shift 2
			;;
		--exec)
			EXEC=1
			shift 1
			;;
		--daemon)
			DAEMON=1
			shift 1
			;;
		--daemon-periodicity)
			DAEMON_PERIODICITY="$2"
			shift 2
			;;
		-v|--verbose)
			VERBOSE=1
			shift 1
			;;
		-d|--debug)
			VERBOSE=1
			DEBUG=1
			shift 1
			;;
		-n|--release)
			release;
			exit 0
			;;
		-h|--help)
			HELP=1
			usage
			exit 0
			;;
		--no_header)
			NO_HEADER=1
			shift 1
			;;
		--) shift
			break
			;;
		*) 	echo "# Option $1 is not recognized. " "Use -h or --help to display the help." && \
			exit 1
			;;
	esac
done


# header
(($NO_HEADER)) || header;

####################################################################################################################################
# Checking the input parameter
#--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
if ((0)); then
	echo "#[ERROR] Required parameter: --analysis, --run, or --reads. For informations --applications_infos, --pipelines_infos, --release_infos, --tools_infos. Use --help to display the help." && echo "" && usage && exit 1;
fi
#--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


# ENV
#########

#echo "APP=$APP"; exit;
(($VERBOSE)) && [ ! -z "$APP" ] && echo "#[INFO] Search Application '$APP'"

ENV=$(find_app "$APP" "$STARK_FOLDER_APPS")
source_app "$APP" "$STARK_FOLDER_APPS" 1

export ENV
export APP

(($VERBOSE)) && [ ! -z "$APP" ] && [ ! -z "$ENV" ] && echo "#[INFO] Application '$APP' found ('$ENV')"
(($VERBOSE)) && [ ! -z "$APP" ] && [ -z "$ENV" ] && echo "#[INFO] Application '$APP' NOT found"


# INPUT FOLDER
################

if [ "$INPUT_FOLDER" == "" ]; then
	INPUT_FOLDER=$FOLDER_RUN
else
	for IF in $INPUT_FOLDER; do
		if [ ! -d $IF ]; then
			echo "#[ERROR] Input folder '$IF' does NOT exists"
			exit 0
		fi;
	done;
fi;


# CONDITION
##############

if [ "$CONDITION" == "" ]; then
	CONDITION="RTAComplete.txt&SampleSheet.csv STARKComplete.txt&SampleSheet.csv *analysis.json"
fi;


# DAYS
########

if [ "$DAYS" == "" ]; then
	DAYS="30"
fi;


# COMMAND
###########

if [ "$COMMAND" == "" ]; then
	COMMAND="DOCKER"
fi;


# LAUNCHER
###########

if [ "$LAUNCHER" == "" ]; then
	LAUNCHER="http://localhost:8000/analysis"
fi;


# DAEMON_PERIODICITY
######################

if [ "$DAEMON_PERIODICITY" == "" ]; then
	DAEMON_PERIODICITY="10"
fi;





# DEBUG
#########


if ((1)) && (($DEBUG)); then
#if (($DEBUG)); then
	echo "APP:$APP"
	echo "ENV:$ENV"
	echo "INPUT_FOLDER:$INPUT_FOLDER"
	echo "CONDITION:$CONDITION"
	echo "FOLDER_LOG:$FOLDER_LOG"
	echo ""
	echo ""
	echo ""
	echo ""
	echo "APP:$APP"
	echo "   FOLDER_RUN:$FOLDER_RUN"
	echo "   FOLDER_MANIFEST:$FOLDER_MANIFEST"
	echo "FOLDER_OUTPUT:$FOLDER_OUTPUT"
	echo "   FOLDER_RESULTS:$FOLDER_RESULTS"
	echo "   FOLDER_DEMULTIPLEXING:$FOLDER_DEMULTIPLEXING"
	echo "   FOLDER_TMP:$FOLDER_TMP"
	echo "   FOLDER_LOG:$FOLDER_LOG"
	echo "DATABASES:$DATABASES"
	echo "CONDITION:$CONDITION"
	echo "FOLDER_DATABASES:$FOLDER_DATABASES"
	echo "APP=$APP"
	echo "ASSEMBLY=$ASSEMBLY"
	echo "PIPELINES=$PIPELINES"
	echo "ALIGNERS=$ALIGNERS"
	echo "CALLERS=$CALLERS"
	echo "ANNOTATORS=$ANNOTATORS"
	echo "ASSEMBLY=$ASSEMBLY"
	#exit 0;
fi;


# FOR DEV
#rm $FOLDER_LOG/ID-*-NAME-*.log



while ((1)); do

	# foreach input folder
	for IF in $INPUT_FOLDER; do
		# for each analysis folder
		#for IFA in $IF/*; do
		for IFA in $(find -L $IF -mindepth 1 -maxdepth 1 -type d -mtime -$DAYS); do
			#MD5=$(echo $IFA | md5sum | awk '{print $1}')
			MD5=$(find -L $IFA -maxdepth 1 -xtype f -print0 | xargs -0 sha1sum | cut -b-40 | sha1sum | awk '{print $1}')
			RUN_NAME=$(basename $IFA)
			ID="ID-$MD5-NAME-$RUN_NAME"
			MD5_LOG="$FOLDER_LOG/$ID.log"
			if [ -d $IFA ]; then
				if [ ! -f $MD5_LOG ]; then
					(($VERBOSE)) && echo "#[INFO] Analysis/Run '$RUN_NAME' - folder '$IFA' [$MD5]"
					CONDITION_TEST=0
					for C in $CONDITION; do
						(($VERBOSE)) && echo "#[INFO]    condition AND '$C' test"
						CONDITION_AND=$(echo $C | tr "&" " ")
						CONDITION_AND_TEST=1
						for CA in $CONDITION_AND; do
							(($VERBOSE)) && echo "#[INFO]          condition '$CA' test"
							if (( $(find -L $IFA -mindepth 1 -maxdepth 1 -type f -iname "$CA" -mtime -$DAYS | wc -l) )); then
								(($VERBOSE)) && echo "#[INFO]          => condition '$CA' OK"
							else
								(($VERBOSE)) && echo "#[INFO]       => condition '$CA' ko"
								CONDITION_AND_TEST=0
								break
							fi;
						done;
						(($VERBOSE)) && echo "#[INFO]    => condition AND test '$CONDITION_AND_TEST'"
						if (($CONDITION_AND_TEST)); then
							CONDITION_TEST=1
							break
						fi;
						#CONDITION_TEST=$(($CONDITION_TEST+$CONDITION_AND_TEST))
					done;
					(($VERBOSE)) && echo "#[INFO]    Condition '$C' test '$CONDITION_TEST'"
					CMD=""
					if (( $CONDITION_TEST )); then

						#curl  http://STARK-service-launcher:8000/analysis -O /tmp/test
						#cat /tmp/test
						#

						#curl -X POST \
						#	--data '{"run":"truc"}' \
						#	http://STARK-service-launcher:8000/analysis

						#LAUNCHER="http://STARK-service-launcher:8000/analysis"


						if [ "$COMMAND" == "LAUNCHER" ]; then
							CMD="curl -s -X POST -H 'Content-Type: application/json' -d '{\"run\":\"$IFA\"}' $LAUNCHER"
						elif [ "$COMMAND" == "DOCKER" ]; then
							CMD="STARK --docker-stark-image=$DOCKER_STARK_IMAGE --docker-parameters='--rm;-d;--name=$ID' --run=$IFA"
						elif [ "$COMMAND" == "STARK" ]; then
							CMD="STARK --run=$IFA"
						fi;
						#curl -X POST -H "Content-Type: application/json" -d @../data/cats.json http://STARK-service-launcher:8000/analysis


						#--request POST \

						#CMD="$COMMAND --run=$IFA"
						EXEC_DATE=$(date '+%Y%m%d-%H%M%S')
						(($VERBOSE)) && echo "#[INFO] Analysis/Run '$RUN_NAME' - folder '$IFA' [$ID] TO LAUNCH"
						(($VERBOSE)) && echo "#[INFO] => Launch analysis '$IFA' with command '$COMMAND'"
						(($VERBOSE)) && echo "#[INFO]    MD5: $MD5_LOG"
						(($VERBOSE)) && echo "#[INFO]    CMD: $CMD"
						(($VERBOSE)) && echo "#[INFO]    EXEC_DATE: $EXEC_DATE"
						if (($EXEC)); then
							echo "RUN: $RUN_NAME" > $MD5_LOG
							echo "FOLDER: $IFA" >> $MD5_LOG
							echo "CONDITION: $C" >> $MD5_LOG
							echo "EXEC_DATE: $EXEC_DATE" >> $MD5_LOG
							[ "$COMMAND" == "LAUNCHER" ] && echo -n "ID: " >> $MD5_LOG
							(($DEBUG)) && cat $MD5_LOG
							# LAUNCH
							echo "#[INFO] Analysis/Run '$RUN_NAME' - folder '$IFA' [$MD5] LAUNCHED"
							eval $CMD 1>> $MD5_LOG 2>> $MD5_LOG

							# If Launcher doesn't respond
							[ "$COMMAND" == "LAUNCHER" ] && ! (($(cat $MD5_LOG | grep "^ID: .*" -c))) && echo "#[ERROR] LAUNCHER NOT responding!" >> $MD5_LOG

							# chmod
							chmod og+r $MD5_LOG
						fi;
					else
						(($VERBOSE)) && echo "#[INFO] Analysis/Run '$RUN_NAME' - folder '$IFA' [$MD5] NOT TO LAUNCH"
						#(($VERBOSE)) && echo "#[INFO] => DO NOT Launch analysis '$IFA' with command '$COMMAND'"
					fi;
				else
					(($VERBOSE)) && echo "#[INFO] Analysis/Run '$RUN_NAME' - folder '$IFA' [$MD5] ALREADY LAUNCHED"
				fi;
			fi;
			(($VERBOSE)) && echo "# "
		done;
	done;

	if (($DAEMON)); then
		sleep $DAEMON_PERIODICITY;
	else
		break;
	fi;

done;


exit 0
