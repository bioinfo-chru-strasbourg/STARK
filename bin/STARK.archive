#!/bin/bash
#################################
##
## NGS environment
##
#################################

SCRIPT_NAME="STARKArchive"
SCRIPT_DESCRIPTION="STARK Archive"
SCRIPT_RELEASE="0.9.1"
SCRIPT_DATE="13/05/2021"
SCRIPT_AUTHOR="Antony Le Bechec"
SCRIPT_COPYRIGHT="HUS"
SCRIPT_LICENCE="GNU-AGPL"

# Realse note
RELEASE_NOTES=$RELEASE_NOTES"# 0.9b-04/04/2021: Script creation\n";
RELEASE_NOTES=$RELEASE_NOTES"# 0.9.1-13/05/2021: Add --sort, --index and --reheader option\n";

# Script folder
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# Configuration
ENV_CONFIG=$(find -L $SCRIPT_DIR/.. -name config.app)
source $ENV_CONFIG 1>/dev/null 2>/dev/null


# Header
function header () {
	echo "#######################################";
	echo "# $SCRIPT_NAME [$SCRIPT_RELEASE-$SCRIPT_DATE]";
	echo "# $SCRIPT_DESCRIPTION ";
	echo "# $SCRIPT_AUTHOR @ $SCRIPT_COPYRIGHT Â© $SCRIPT_LICENCE";
	echo "#######################################";
}

# Release
function release () {
	echo "# RELEASE NOTES:";
	echo -e $RELEASE_NOTES
}

# Usage
function usage {
	echo "# USAGE: $(basename $0) --fastq=FASTQ[,FASTQ] --bam=BAM[,BAM] --cram=CRAM [options...]";
	echo "#";
	echo "### This script generates a CRAM file from BAM or FASTQ, and associated statistics.";
	echo "#";
	echo "# --fastq=<FILE>[,<FILE>]                        FASTQ files, original raw reads (required).";
	echo "# --bam=<FILE>[,<FILE>]                          BAM files to archive (required).";
	echo "# --cram=<FILE>                                  CRAM archive file (required).";
	echo "# --cram_options=<FILE>                          CRAM compression options (see SAMTOOLS doc) (optional) (default).";
	echo "#                                                Default: ''";
	echo "# --application=<STRING|FILE>                    APP name or APP file configuration of the APPLICATION.";
	echo "#                                                Must be in the STARK APPS folder if relative path";
	echo "# --threads=<INTEGER>                            Number of threads.";
	echo "# --sample=<STRING>                              Sample name (default: found in BAM or 'unknown').";
	echo "# --reference=<FILE>                             Genome reference (default: found in APP).";
	echo "# --bam_read_integrity_checksum                  Check integrity of BAM reads compared to FASTQ.";
	echo "# --cram_read_integrity_checksum                 Check integrity of CRAM reads compared to FASTQ.";
	echo "# --stats=<FILE>                                 Statistics file (on FASTQ, BAM and/or validated/last output CRAM).";
	echo "# --sort                                         Sort CRAM archive.";
	echo "# --index                                        Index CRAM archive.";
	echo "# --reheader                                     Reheader CRAM archive with genome reference tag (M5 and UR), if no tag.";
	echo "# --remove_tags=<STRING>[,<STRING>]              Remove tags from BAM before CRAM compression.";
	echo "#                                                Example: 'BD,BI,OQ' with remove tags 'BD:Z', 'BI:Z' and 'OQ:Z'";
	echo "# -v|--verbose                                   Verbose mode";
	echo "# -d|--debug                                     Debug mode";
	echo "# -n|--release                                   Script Release";
	echo "# -h|--help                                      Help message";
	echo "#";
}


# 

####################################################################################################################################
# Getting parameters from the input
#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# ":" tells that the option has a required argument, "::" tells that the option has an optional argument, no ":" tells no argument
ARGS=$(getopt -o "f:b:c:o:e:t:s:vdnh" --long "fastq:,bam:,cram:,cram_options:,app:,application:,threads:,sample:,reference:,bam_read_integrity_checksum,cram_read_integrity_checksum,stats:,sort,index,reheader,remove_tags:,statistics:,verbose,debug,release,help" -- "$@" 2> /dev/null)
if [ $? -ne 0 ]; then
	:
	echo "#[ERROR] Error in the argument list:";
	echo "#[ERROR] $@"
	echo ""
	usage;
	exit;
fi;


PARAM=$@
DEBUG=0
VERBOSE=0


eval set -- "$ARGS"
while true
do
	#echo "$1=$2"
	#echo "Eval opts";
	case "$1" in
		-f|--fastq)
			FASTQ_INPUT=$(echo "$2" | tr "," " ")
			shift 2
			;;
		-b|--bam)
			BAM_INPUT=$(echo "$2" | tr "," " ")
			shift 2
			;;
		-c|--cram)
			CRAM_INPUT="$2"
			shift 2
			;;
		-o|--cram_options)
			CRAM_OPTIONS_INPUT=$(echo "$2" | tr " " ",")
			shift 2
			;;
		-e|--env|--app|--application)
			APP="$2"
			shift 2
			;;
		-t|--threads)
			THREADS_INPUT="$2"
			shift 2
			;;
		-s|--sample)
			SAMPLE_INPUT="$2"
			shift 2
			;;
		--reference)
			REF_INPUT="$2"
			shift 2
			;;
		--bam_read_integrity_checksum)
			BAM_READ_integrity_checksum=1
			shift 1
			;;
		--cram_read_integrity_checksum)
			CRAM_READ_integrity_checksum=1
			shift 1
			;;
		--stats|--statistics)
			STATS_INPUT="$2"
			shift 2
			;;
		--sort)
			SAMTOOLS_CRAM_COMMAND="sort"
			shift 1
			;;
		--index)
			SAMTOOLS_CRAM_INDEX=" --write-index "
			shift 1
			;;
		--reheader)
			REHEADER=1
			shift 1
			;;
		--remove_tags)
			REMOVE_TAGS=$(echo "$2" | tr "," " ")
			shift 2
			;;
		-h|--help)
			usage
			exit 0
			;;
		-v|--verbose)
			VERBOSE=1
			shift 1
			;;
		-d|--debug)
			DEBUG=1
			VERBOSE=1
			shift 1
			;;
		--) shift
			break
			;;
		*) 	echo "Option $1 is not recognized. " "Use -h or --help to display the help." && \
			exit 1
			;;
	esac
done

# header
(($NO_HEADER)) || header;


# Example:
# STARK.report -f "RUN_TEST_TAG7" -s "P1408" -e "/STARK/tools/stark/current/config/apps/SOLIDTUMOR.app" -i "bwamem.gatkUG_SOLIDTUMOR.howard,bwamem.gatkHC_SOLIDTUMOR.howard,bwamem.VarScan_SOLIDTUMOR.howard" -k test -r /STARK/output/results

####################################################################################################################################
# Checking the input parameter
#--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# if [ -z "$FASTQ_INPUT" ] && [ -z "$BAM_INPUT" ] && [ -z "$CRAM_INPUT" ] && ((!$DEBUG)); then
# 	echo "#[ERROR] Required parameter: --fastq, --bam, and --cram. Use --help to display the help." && echo "" && usage && exit 1;
# fi
if [ -z "$CRAM_INPUT" ] && ((!$DEBUG)); then
	echo "#[ERROR] Required parameter: --cram. Use --help to display the help." && echo "" && usage && exit 1;
fi
#--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


# FUNCTIONS
#############

# function in_array
# input: $element $array
in_array () 
{ 
    param=$1;
    shift;
    for elem in "$@";
    do
        [[ "$param" = "$elem" ]] && return 0;
    done;
    return 1
}

# function checksum
# input: $command
checksum () 
{ 
    #echo $(eval $1 | cut -f1 -d " " | paste - - - - | LC_COLLATE=C sort -S 100% -T SORT_PREFIX$RANDOM -n -k1,1 -t " " | tr "\t" "\n" | sha512sum | cut -d" " -f1)
	#echo $(eval $1 | cut -f1 -d " " | paste - - - - | LC_COLLATE=C sort -S 7G -T SORT_PREFIX$RANDOM -n -k1,1 -t " " | tr "\t" "\n" | sha512sum | cut -d" " -f1)
	#echo $(eval $1 | cut -f1 -d " " | paste - - - - | LC_COLLATE=C sort -T $TMP_FOLDER_TMP/SORT_PREFIX$RANDOM -n -k1,1 -t " " | tr "\t" "\n" | sha512sum | cut -d" " -f1)
	local SORT_TMP=$TMP_FOLDER_TMP/SORT_PREFIX$RANDOM
	mkdir -p $SORT_TMP
	echo $(eval $1 | cut -f1 -d " " | paste - - - - | LC_COLLATE=C sort -T $SORT_TMP -n -k1,1 -t " " | tr "\t" "\n" | sha512sum | cut -d" " -f1)
	rm -rf $SORT_TMP
	return 0
}


# INIT
########

(($VERBOSE)) && echo ""
(($VERBOSE)) && echo "#[INFO] ### Initialization"

# APPLICATION
###############

# Default APP
[ -z "$APP" ] && APP="default";

(($VERBOSE)) && [ ! -z "$APP" ] && echo "#[INFO] Search Application '$APP'"

ENV=$(find_app "$APP" "$STARK_FOLDER_APPS")
source_app "$APP" "$STARK_FOLDER_APPS" 1
APP_NAME=$(name_app "$APP" "$STARK_FOLDER_APPS");
APP_DESCRIPTION=$(description_app "$APP" "$STARK_FOLDER_APPS");


(($VERBOSE)) && [ ! -z "$APP" ] && [ ! -z "$ENV" ] && echo "#[INFO] Application '$APP' found ('$ENV')"
(($VERBOSE)) && [ ! -z "$APP" ] && [ -z "$ENV" ] && echo "#[INFO] Application '$APP' NOT found"

# Check TMP folder
[ "$TMP_SYS_FOLDER" == "" ] && TMP_SYS_FOLDER=/tmp
[ "$TMP_FOLDER_TMP" == "" ] && TMP_FOLDER_TMP=$TMP_SYS_FOLDER


# Parameters
#############

# FASTQ
if [ "$FASTQ_INPUT" != "" ]; then
	FASTQ=$FASTQ_INPUT
else
	echo "#[WARNING] FASTQ file(s) NOT found"
	#exit 0
fi;
(($VERBOSE)) && echo "#[INFO] FASTQ files(s): $FASTQ"


# BAM
if [ "$BAM_INPUT" != "" ]; then
	BAM=$BAM_INPUT
else
	echo "#[WARNING] BAM file(s) NOT found"
	#exit 0
fi;
(($VERBOSE)) && echo "#[INFO] BAM files(s): $BAM"


# CRAM
if [ "$CRAM_INPUT" != "" ]; then
	CRAM=$CRAM_INPUT
	mkdir -p $(dirname $CRAM)
else
	echo "#[ERROR] CRAM file NOT found"
	exit 1
fi;
(($VERBOSE)) && echo "#[INFO] CRAM files: $CRAM"


# CRAM Options
if [ "$CRAM_OPTIONS_INPUT" != "" ]; then
	CRAM_OPTIONS=$CRAM_OPTIONS_INPUT
fi;

if [ "$CRAM_OPTIONS" == "" ]; then
	(($VERBOSE)) && echo "#[WARNING] CRAM Options empty, default CRAM compression will be used"
fi;
(($VERBOSE)) && echo "#[INFO] CRAM Options '$CRAM_OPTIONS'"


# Sample Name
if [ "$SAMPLE_INPUT" != "" ]; then
	SAMPLE="$SAMPLE_INPUT"
	(($VERBOSE)) && echo "#[INFO] SAMPLE '$SAMPLE'"
else
	(($VERBOSE)) && echo "#[INFO] NO SAMPLE defined. Checked on BAM or 'unknown'"
fi;


# Reference
if [ "$REF_INPUT" != "" ] && [ -e $REF_INPUT ]; then
	REF="$REF_INPUT"
fi;
(($VERBOSE)) && echo "#[INFO] REF '$GENOME'"



# Checksum
if (($BAM_READ_integrity_checksum)); then
	(($VERBOSE)) && echo "#[INFO] BAM READ integrity checksum enabled"
	[ -z "$FASTQ" ] && echo "#[ERROR] NO FASTQ files for BAM READ integrity checksum" && exit 1
else
	(($VERBOSE)) && echo "#[INFO] BAM READ integrity checksum disabled"
fi;
if (($CRAM_READ_integrity_checksum)); then
	(($VERBOSE)) && echo "#[INFO] CRAM READ integrity checksum enabled"
	[ -z "$FASTQ" ] && echo "#[ERROR] NO FASTQ files for BAM READ integrity checksum" && exit 1
else
	(($VERBOSE)) && echo "#[INFO] CRAM READ integrity checksum disabled"
fi;


# samtools cram command
if [ "$SAMTOOLS_CRAM_COMMAND" == "" ]; then
	SAMTOOLS_CRAM_COMMAND="view"
fi;


# samtools index
if [ "$SAMTOOLS_CRAM_INDEX" == "" ]; then
	SAMTOOLS_CRAM_INDEX_OPTION=0
else
	SAMTOOLS_CRAM_INDEX_OPTION=1
fi;

# reheader
if [ "$REHEADER" == "" ]; then
	REHEADER=0
fi;


# samtools index
if [ "$REMOVE_TAGS" != "" ]; then
	(($VERBOSE)) && echo "#[INFO] Remove tags: $REMOVE_TAGS"
fi;


# stats
STATS=""
if [ "$STATS_INPUT" != "" ]; then
	STATS=$STATS_INPUT
	#BAM_READ_integrity_checksum=1
	#CRAM_READ_integrity_checksum=1
	mkdir -p $(dirname $STATS)
	> $STATS
	(($VERBOSE)) && echo "#[INFO] CRAM statistics enabled '$STATS'"
else 
	(($VERBOSE)) && echo "#[INFO] CRAM statistics disabled"
fi


# threads
THREADS_original=$THREADS
if [ "$THREADS_INPUT" != "" ]; then
	THREADS="$THREADS_INPUT"
fi
if [ -z $THREADS ] || ! [[ $THREADS =~ ^[0-9]+$ ]]; then
	THREADS=$THREADS_original
fi
if [ -z $THREADS ] || ! [[ $THREADS =~ ^[0-9]+$ ]]; then
	THREADS=1
fi
(($VERBOSE)) && echo "#[INFO] $THREADS threads"


# samtools
if [ "$SAMTOOLS" == "" ]; then
	SAMTOOLS="samtools"
fi;


# gz et gunzip
if [ "$GZ" == "" ]; then
	GZ="gzip"
fi;
if [ "$UNGZ" == "" ]; then
	UNGZ="gzip -d"
fi;


# picard
if [ "$PICARD" == "" ]; then
	PICARD=$(whereis picard.jar | cut -d" " -f2)
fi;




# Init
CRAM_validate=""
CRAM_fastq_source=""
CRAM_bam_source=""
CRAM_cram_source=""
CRAM_encode_time=""

### PROCESS
###########


### FASTQ checksum

(($VERBOSE)) && echo ""
(($VERBOSE)) && echo "#[INFO] ### FASTQ check"

if [ ! -z "$FASTQ" ]; then

	FASTQ_names=""
	for fastq in $FASTQ; do
		FASTQ_names=$FASTQ_names" "$(basename $fastq)
	done;
	FASTQ_names=$(echo $FASTQ_names | sed "s/^ //gi" | sed "s/ $//gi")

	if (($BAM_READ_integrity_checksum)) || (($CRAM_READ_integrity_checksum)) || [ "$STATS" != "" ]; then
		(($VERBOSE)) && echo "#[INFO] FASTQ '$FASTQ_names' READS integrity checksum..."
		FASTQ_checksum=$(checksum "$UNGZ -c $FASTQ")
		(($VERBOSE)) && echo "#[INFO] FASTQ '$FASTQ_names' READS integrity checksum '$FASTQ_checksum'"
	fi;

	if [ "$STATS" != "" ]; then
		(($VERBOSE)) && echo "#[INFO] FASTQ '$FASTQ_names' STATS"

		# checksum
		(($VERBOSE)) && echo "#[INFO] FASTQ '$FASTQ_names' STATS READS integrity checksum..."
		[ "$FASTQ_checksum" == "" ] && FASTQ_checksum=$(checksum "$UNGZ -c $FASTQ")
		(($VERBOSE)) && echo "#[INFO] FASTQ '$FASTQ_names' STATS READS integrity checksum '$FASTQ_checksum'"
		#echo "FASTQ_checksum	$FASTQ_checksum" >> $STATS

		# nbreads 
		(($VERBOSE)) && echo "#[INFO] FASTQ '$FASTQ_names' STATS READS Number..."
		FASTQ_nbreads=$($UNGZ -c $FASTQ | cut -f1 -d " " | paste - - - - | wc -l)
		(($VERBOSE)) && echo "#[INFO] FASTQ '$FASTQ_names' STATS READS Number '$FASTQ_nbreads'"
		#echo "FASTQ_nbreads	$FASTQ_nbreads" >> $STATS

		# size 
		(($VERBOSE)) && echo "#[INFO] FASTQ '$FASTQ_names' STATS FILES Size..."
		FASTQ_size=$(ls -l $FASTQ | cut -d" " -f5 | awk '{ SUM+=$0} END {print SUM}')
		(($VERBOSE)) && echo "#[INFO] FASTQ '$FASTQ_names' STATS FILES Size '$FASTQ_size'"
		#echo "FASTQ_size	$FASTQ_size" >> $STATS

	fi;

else

	(($VERBOSE)) && echo "#[WARNING] NO FASTQ files"

fi;


### CRAM generation and check FASTQ READS integrity

(($VERBOSE)) && echo ""
(($VERBOSE)) && echo "#[INFO] ### CRAM generation from BAM"

if [ ! -z "$BAM" ]; then

	for bam in $BAM; do

		bam_name=$(basename $bam)

		bam_sample=$($SAMTOOLS view -H $bam | grep '^@RG' | sed "s/.*SM:\([^\t]*\).*/\1/g" | uniq | head -n1 | cut -d" " -f1)
		[ "$SAMPLE" == "" ] && SAMPLE=$bam_sample

		if ! (($CRAM_validate)); then
			(($VERBOSE)) && echo "#[INFO] BAM '$bam_name'"
			if (($BAM_READ_integrity_checksum)) || [ "$STATS" != "" ]; then
				(($VERBOSE)) && echo "#[INFO] BAM '$bam_name' BAM READS integrity checksum..."
				BAM_checksum=$(checksum "$SAMTOOLS fastq -@ $THREADS -O -n --reference $GENOME $bam 2>/dev/null")
				(($VERBOSE)) && echo "#[INFO] BAM '$bam_name' BAM READS integrity checksum '$BAM_checksum'"
			fi;
			if [ "$BAM_checksum" == "$FASTQ_checksum" ] || ! (($BAM_READ_integrity_checksum)); then
				(($VERBOSE)) && (($BAM_READ_integrity_checksum)) && echo "#[INFO] BAM '$bam_name' BAM READS integrity checked!"
				(($VERBOSE)) && echo "#[INFO] BAM '$bam_name' CRAM generation..."
				# Options
				BAM_FOR_SAMTOOLS=$bam;
				PRE_SAMTOOLS="";
				if [ "$REMOVE_TAGS" != "" ]; then
					PRE_SAMTOOLS=" $SAMTOOLS view -h -@ $THREADS --reference $GENOME $bam | ";
					BAM_FOR_SAMTOOLS=" ";
					#sed 's/\tOQ\:Z\:[^\t]*//'
					for TAG in $REMOVE_TAGS; do
						PRE_SAMTOOLS="$PRE_SAMTOOLS sed 's/\t$TAG\:Z\:[^\t]*//' | ";
					done;
				fi;
				SAMTOOLS_CRAM_COMMAND_OPTIONS=" -O CRAM,$CRAM_OPTIONS -@ $THREADS $BAM_FOR_SAMTOOLS --reference $GENOME $SAMTOOLS_CRAM_INDEX -o $CRAM.cram "
				[ "$SAMTOOLS_CRAM_COMMAND" == "sort" ] && SAMTOOLS_CRAM_COMMAND_OPTIONS=$SAMTOOLS_CRAM_COMMAND_OPTIONS" -T $bam.SAMTOOLS_PREFIX$RANDOM "
				[ "$SAMTOOLS_CRAM_COMMAND" == "view" ] && SAMTOOLS_CRAM_COMMAND_OPTIONS=$SAMTOOLS_CRAM_COMMAND_OPTIONS" -h "
				
				COMMAND="$PRE_SAMTOOLS $SAMTOOLS $SAMTOOLS_CRAM_COMMAND $SAMTOOLS_CRAM_COMMAND_OPTIONS"
				(($DEBUG)) && echo "#[INFO] COMMAND: $COMMAND "
				time_start=$(date +%s%3N)
				#if ! $SAMTOOLS $SAMTOOLS_CRAM_COMMAND -h -O CRAM,$CRAM_OPTIONS -@ $THREADS -T $bam.SAMTOOLS_PREFIX$RANDOM $bam --reference $GENOME $SAMTOOLS_CRAM_INDEX -o $CRAM.cram 2>/dev/null; then
				#if ! $SAMTOOLS $SAMTOOLS_CRAM_COMMAND $SAMTOOLS_CRAM_COMMAND_OPTIONS 2>/dev/null ; then
				if ! eval $COMMAND 2>/dev/null ; then
					(($VERBOSE)) && echo "#[WARNING] BAM '$bam_name' CRAM generation failed!"
					rm -f $CRAM.cram
				fi;
				time_end=$(date +%s%3N)
				CRAM_encode_time=$(echo "scale=3; "$((time_end-time_start))" / 1000" | bc )
				(($VERBOSE)) && echo "#[INFO] BAM '$bam_name' STATS TIME Encode '$CRAM_encode_time'"
				if (($CRAM_READ_integrity_checksum)) || [ "$STATS" != "" ]; then
					(($VERBOSE)) && echo "#[INFO] BAM '$bam_name' CRAM READS integrity checksum..."
					CRAM_checksum=$(checksum "$SAMTOOLS fastq -@ $THREADS -O -n --reference $GENOME $CRAM.cram 2>/dev/null")
					(($VERBOSE)) && echo "#[INFO] BAM '$bam_name' CRAM READS integrity checksum '$CRAM_checksum'"
				fi;
				if [ "$CRAM_checksum" == "$FASTQ_checksum" ] || ! (($CRAM_READ_integrity_checksum)); then
					(($VERBOSE)) && (($CRAM_READ_integrity_checksum)) && echo "#[INFO] BAM '$bam_name' CRAM READS integrity checked!"
					if [ -e "$CRAM.cram" ]; then
						CRAM_validate=1
						CRAM_bam_source="$bam"
						CRAM_cram_source="$CRAM.cram"
					fi;
				else
					(($VERBOSE)) && echo "#[INFO] BAM '$bam_name' CRAM READS integrity failed!"
				fi;
			else
				(($VERBOSE)) && echo "#[INFO] BAM '$bam_name' BAM READS integrity failed!"
			fi;
		fi;
	done;

else

	(($VERBOSE)) && echo "#[WARNING] NO BAM files for CRAM generation"

fi;


### CRAM generation and check FASTQ READS integrity

(($VERBOSE)) && echo ""
(($VERBOSE)) && echo "#[INFO] ### CRAM generation from FASTQ"

if [ ! -z "$FASTQ" ]; then

	if ! (($CRAM_validate)); then

		(($VERBOSE)) && echo "#[INFO] FASTQ '$FASTQ_names'"

		PICARD_FASTQ_options=""
		SAMTOOLS_IMPORT_options=""
		FASTQ_first=$(echo $FASTQ | cut -d" " -f1)
		#FASTQ_names=""
		if [ "$(echo $FASTQ | wc -w)" -lt 3 ]; then

			# CRAM Generation with PICARD
			if ((0)); then
				PICARD_FASTQ_index=0
				for RX in $FASTQ; do
					#(($PICARD_FASTQ_index)) && sep=" "
					#FASTQ_names=$FASTQ_names$sep$(basename $RX)
					if (($($UNGZ -c $RX | head -n 1 | wc -l))); then
						((PICARD_FASTQ_index++))
						#echo "RX=$RX"
						PICARD_FASTQ_options=$PICARD_FASTQ_options" -F$PICARD_FASTQ_index $RX "
					fi;
				done;
				(($VERBOSE)) && echo "#[INFO] FASTQ '$FASTQ_names' CRAM generation..."
				[ "$SAMPLE" == "" ] && SAMPLE="unknown"
				# Options
				SAMTOOLS_CRAM_COMMAND_OPTIONS=" -O CRAM,$CRAM_OPTIONS -@ $THREADS $CRAM.sam --reference $GENOME $SAMTOOLS_CRAM_INDEX -o $CRAM.cram "
				[ "$SAMTOOLS_CRAM_COMMAND" == "sort" ] && SAMTOOLS_CRAM_COMMAND_OPTIONS=$SAMTOOLS_CRAM_COMMAND_OPTIONS" -T $CRAM.SAMTOOLS_PREFIX$RANDOM "
				[ "$SAMTOOLS_CRAM_COMMAND" == "view" ] && SAMTOOLS_CRAM_COMMAND_OPTIONS=$SAMTOOLS_CRAM_COMMAND_OPTIONS" -h "
				(($DEBUG)) && echo "#[INFO] COMMAND: $SAMTOOLS $SAMTOOLS_CRAM_COMMAND $SAMTOOLS_CRAM_COMMAND_OPTIONS "
				(($DEBUG)) && echo "#[INFO] COMMAND FULL: $JAVA $JAVA_FLAGS -jar $PICARD FastqToSam $PICARD_FASTQ_options -COMPRESSION_LEVEL 0 -OUTPUT $CRAM.sam -SAMPLE_NAME $SAMPLE 2>/dev/null && $SAMTOOLS $SAMTOOLS_CRAM_COMMAND $SAMTOOLS_CRAM_COMMAND_OPTIONS 2>/dev/null && rm -f $CRAM.sam "
				time_start=$(date +%s%3N)
				$JAVA $JAVA_FLAGS -jar $PICARD FastqToSam $PICARD_FASTQ_options -COMPRESSION_LEVEL 0 -OUTPUT $CRAM.sam -SAMPLE_NAME $SAMPLE 2>/dev/null && $SAMTOOLS $SAMTOOLS_CRAM_COMMAND $SAMTOOLS_CRAM_COMMAND_OPTIONS 2>/dev/null && rm -f $CRAM.sam
				time_end=$(date +%s%3N)
			fi;

			# CRAM gÃ©nÃ©ration with SAMTOOLS
			if ((1)); then
				SAMTOOLS_IMPORT_index=0
				for RX in $FASTQ; do
					if (($($UNGZ -c $RX | head -n 1 | wc -l))); then
						((SAMTOOLS_IMPORT_index++))
						SAMTOOLS_IMPORT_options=$SAMTOOLS_IMPORT_options" -$SAMTOOLS_IMPORT_index $RX "
					fi;
				done;
				(($VERBOSE)) && echo "#[INFO] FASTQ '$FASTQ_names' CRAM generation..."
				# Options
				SAMTOOLS_CRAM_COMMAND_OPTIONS=" -O CRAM,$CRAM_OPTIONS -@ $THREADS --reference $GENOME $SAMTOOLS_CRAM_INDEX -o $CRAM.cram "
				[ "$SAMTOOLS_CRAM_COMMAND" == "sort" ] && SAMTOOLS_CRAM_COMMAND_OPTIONS=$SAMTOOLS_CRAM_COMMAND_OPTIONS" -T $CRAM.SAMTOOLS_PREFIX$RANDOM "
				[ "$SAMTOOLS_CRAM_COMMAND" == "view" ] && SAMTOOLS_CRAM_COMMAND_OPTIONS=$SAMTOOLS_CRAM_COMMAND_OPTIONS" -h "
				# COMMAND
				COMMAND="$SAMTOOLS import $SAMTOOLS_IMPORT_options -T'*' -@ $THREADS | $SAMTOOLS $SAMTOOLS_CRAM_COMMAND $SAMTOOLS_CRAM_COMMAND_OPTIONS "
				(($DEBUG)) && echo "#[INFO] COMMAND: $COMMAND "
				# Launch COMMAND
				time_start=$(date +%s%3N)
				eval $COMMAND 2>/dev/null
				time_end=$(date +%s%3N)
			fi;


			CRAM_encode_time=$(echo "scale=3; "$((time_end-time_start))" / 1000" | bc )
			(($VERBOSE)) && echo "#[INFO] FASTQ '$FASTQ_names' STATS TIME Encode '$CRAM_encode_time'"
			if (($CRAM_READ_integrity_checksum)) || [ "$STATS" != "" ]; then
				(($VERBOSE)) && echo "#[INFO] FASTQ '$FASTQ_names' CRAM READS integrity checksum..."
				CRAM_checksum=$(checksum "$SAMTOOLS fastq -@ $THREADS -O -n --reference $GENOME $CRAM.cram 2>/dev/null")
				(($VERBOSE)) && echo "#[INFO] FASTQ '$FASTQ_names' CRAM READS integrity checksum '$CRAM_checksum'"
			fi;
			if [ "$CRAM_checksum" == "$FASTQ_checksum" ] || ! (($CRAM_READ_integrity_checksum)); then
				(($VERBOSE)) && (($CRAM_READ_integrity_checksum)) && echo "#[INFO] FASTQ '$FASTQ_names' CRAM READS integrity checked!"
				CRAM_validate=1
				CRAM_fastq_source="$FASTQ"
				CRAM_cram_source="$CRAM.cram"
			else
				(($VERBOSE)) && echo "#[INFO] FASTQ '$FASTQ_names' CRAM READS integrity failed!"
			fi;
		else
			(($VERBOSE)) && echo "#[ERROR] CRAM not generated from FASTQ due to number of FASTQ files [$(echo $FASTQ | wc -w)] (not yet implemented)"
		fi

	else

		(($VERBOSE)) && echo "#[INFO] CRAM already generated from BAM"

	fi;

else

	(($VERBOSE)) && echo "#[WARNING] NO FASTQ files for CRAM generation"

fi;


### CRAM validation

CRAM_validation=0
[ "$CRAM_checksum" == "$FASTQ_checksum" ] && CRAM_validation=1



### REHEADER

if (($REHEADER)); then

	# CRAM
	if [ "$CRAM_cram_source" != "" ] && [ -e "$CRAM_cram_source" ]; then

		CRAM_cram_source_name=$(basename $CRAM_cram_source)
		REF_name=$(basename $GENOME)

		(($VERBOSE)) && echo "" && echo "#[INFO] ### CRAM rehead"

		# Test header
		if ! (( $($SAMTOOLS view -H $CRAM_cram_source | grep "^@SQ.*SN:.*M5:.*UR:.*$" -c) )); then

			(($VERBOSE)) && echo "#[INFO] CRAM rehead with genome reference '$REF_name'..."

			# reheader
			#$SAMTOOLS reheader -Pi -c "$SAMTOOLS view -H $CRAM_cram_source | $SAMTOOLS view -O CRAM -@ $THREADS --reference=$REF | samtools view -H " $CRAM_cram_source > $CRAM_cram_source.reheaded.cram
			#mv -f $CRAM_cram_source.reheaded.cram $CRAM_cram_source

			if $SAMTOOLS reheader -P -c "$SAMTOOLS view -H $CRAM_cram_source | $SAMTOOLS view -O CRAM -@ $THREADS --reference=$GENOME | $SAMTOOLS view -H " $CRAM_cram_source > $CRAM_cram_source.reheaded.cram; then
				mv -f $CRAM_cram_source.reheaded.cram $CRAM_cram_source
				(($VERBOSE)) && echo "#[INFO] CRAM rehead with genome reference '$REF_name' done."
			else
				rm -f $CRAM_cram_source.reheaded.cram;
				(($VERBOSE)) && echo "#[WARNING] CRAM rehead with genome reference '$REF_name' FAILED (output CRAM is not reheaded, but valid)."
			fi;

		else

			(($VERBOSE)) && echo "#[INFO] CRAM already headed"			

		fi;

	fi;

fi;


### STATS

(($VERBOSE)) && echo ""
(($VERBOSE)) && echo "#[INFO] ### STATS generation"

CRAM_size=""
CRAM_nbreads=""
CRAM_decode_time=""
BAM_size=""
BAM_nbreads=""
FASTQ_size_rate=""
BAM_size_rate=""


if [ "$STATS" != "" ]; then


	# CRAM
	if [ "$CRAM_cram_source" != "" ] && [ -e "$CRAM_cram_source" ]; then

		CRAM_cram_source_name=$(basename $CRAM_cram_source)

		# validation
		(($VERBOSE)) && echo "#[INFO] CRAM STATS FILES Size..."
		CRAM_size=$(ls -l $CRAM_cram_source | cut -d" " -f5)
		(($VERBOSE)) && echo "#[INFO] CRAM STATS FILES Size '$CRAM_size'"

		# nbreads
		(($VERBOSE)) && echo "#[INFO] CRAM STATS FILES Size..."
		CRAM_size=$(ls -l $CRAM_cram_source | cut -d" " -f5)
		(($VERBOSE)) && echo "#[INFO] CRAM STATS FILES Size '$CRAM_size'"

		# Size
		(($VERBOSE)) && echo "#[INFO] CRAM STATS READS Number..."
		time_start=$(date +%s%3N)
		CRAM_nbreads=$($SAMTOOLS view -@ $THREADS --reference $GENOME $CRAM_cram_source -c)
		time_end=$(date +%s%3N)
		(($VERBOSE)) && echo "#[INFO] CRAM STATS READS Number '$CRAM_nbreads'"

		# Decode time
		(($VERBOSE)) && echo "#[INFO] CRAM STATS TIME Decode..."
		#time_start=$(date +%s%3N)
        #$SAMTOOLS stats -@ $THREADS $CRAM_cram_source 1>/dev/null
        #time_end=$(date +%s%3N)
        CRAM_decode_time=$(echo "scale=3; "$((time_end-time_start))" / 1000" | bc )
		(($VERBOSE)) && echo "#[INFO] CRAM STATS TIME Decode '$CRAM_decode_time'"

	fi;

	# BAM
	if [ "$CRAM_bam_source" != "" ] && [ -e "$CRAM_bam_source" ]; then

		CRAM_bam_source_name=$(basename $CRAM_bam_source)

		# CRAM source type
		CRAM_source_type="BAM"

		# Size
		(($VERBOSE)) && echo "#[INFO] BAM  STATS FILES Size..."
		BAM_size=$(ls -l $CRAM_bam_source | cut -d" " -f5)
		(($VERBOSE)) && echo "#[INFO] BAM  STATS FILES Size '$BAM_size'"

		# nbreads
		(($VERBOSE)) && echo "#[INFO] BAM  STATS READS Number..."
		BAM_nbreads=$($SAMTOOLS view -@ $THREADS $CRAM_bam_source -c)
		(($VERBOSE)) && echo "#[INFO] BAM  STATS READS Number '$BAM_nbreads'"

	fi;

	# FASTQ
	if [ "$CRAM_fastq_source" != "" ]; then

		CRAM_fastq_source_name=$(basename $CRAM_fastq_source)

		# CRAM source type
		CRAM_source_type="FASTQ"

	fi;

	# Calculus
	if [ "$FASTQ_size" != "" ] && [ "$FASTQ_size" != "" ] && [ "$CRAM_size" != "" ] && [ "$CRAM_size" != "" ]; then
		FASTQ_size_rate=$(echo "scale=4;  ($CRAM_size*1)/$FASTQ_size " | bc)
	fi
	if [ "$BAM_size" != "" ] && [ "$BAM_size" != "" ] && [ "$CRAM_size" != "" ] && [ "$CRAM_size" != "" ]; then
		BAM_size_rate=$(echo "scale=4;  ($CRAM_size*1)/$BAM_size " | bc)
	fi
	


	echo "INPUT_FASTQ	"$(echo $FASTQ | tr " " ",") >> $STATS
	echo "INPUT_BAM	"$(echo $BAM | tr " " ",") >> $STATS
	echo "INPUT_THREADS	$THREADS" >> $STATS
	echo "SAMTOOLS_CRAM_COMMAND	$SAMTOOLS_CRAM_COMMAND" >> $STATS
	echo "INDEX	$SAMTOOLS_CRAM_INDEX_OPTION" >> $STATS
	echo "REHEADER	$REHEADER" >> $STATS
	echo "CRAM_options	$CRAM_OPTIONS" >> $STATS
	echo "CRAM_validation	$CRAM_validation" >> $STATS
	echo "CRAM_size	$CRAM_size" >> $STATS
	echo "CRAM_encode_time	$CRAM_encode_time" >> $STATS
	echo "CRAM_decode_time	$CRAM_decode_time" >> $STATS
	echo "BAM_size_rate	$BAM_size_rate" >> $STATS
	echo "FASTQ_size_rate	$FASTQ_size_rate" >> $STATS
	#echo "CRAM_fastq_source	$CRAM_fastq_source" >> $STATS
	#echo "CRAM_bam_source	$CRAM_bam_source" >> $STATS
	#echo "CRAM_cram_source	$CRAM_cram_source" >> $STATS
	echo "CRAM_cram_source	$CRAM_fastq_source$CRAM_bam_source" >> $STATS
	echo "CRAM_cram_target	$CRAM" >> $STATS
	echo "CRAM_checksum	$CRAM_checksum" >> $STATS
	echo "CRAM_nbreads	$CRAM_nbreads" >> $STATS
	echo "CRAM_source_type	$CRAM_source_type" >> $STATS
	echo "FASTQ_checksum	$FASTQ_checksum" >> $STATS
	echo "FASTQ_size	$FASTQ_size" >> $STATS
	echo "FASTQ_nbreads	$FASTQ_nbreads" >> $STATS
	echo "BAM_checksum	$BAM_checksum" >> $STATS
	echo "BAM_size	$BAM_size" >> $STATS
	echo "BAM_nbreads	$BAM_nbreads" >> $STATS


	#echo "CRAM_encode_time=$CRAM_encode_time"


	(($VERBOSE)) && echo "#[INFO] STATS:" && cat $STATS | sed "s/^/#[INFO]   /" | column -t

else


	(($VERBOSE)) && echo "#[INFO] ### STATS generation disabled"

fi;

### OUTPUT

(($VERBOSE)) && echo ""
(($VERBOSE)) && echo "#[INFO] ### CRAM generation output"
if (($CRAM_validate)); then
	echo "#[INFO] CRAM generated '$CRAM'"
	echo "#[INFO] CRAM generated from '$CRAM_bam_source$CRAM_fastq_source'"
	(($VERBOSE)) && (($CRAM_READ_integrity_checksum)) && echo "#[INFO] CRAM generated with FASTQ READ integrity checksum '$FASTQ_checksum'"
	(($VERBOSE)) && (($CRAM_validation)) && echo "#[INFO] CRAM validated with FASTQ READ integrity checksum"
	! (($CRAM_validation)) && echo "#[WARNING] CRAM NOT validated with FASTQ READ integrity checksum"
	mv $CRAM_cram_source $CRAM
	[ -e $CRAM_cram_source.crai ] && mv $CRAM_cram_source.crai $CRAM.crai
	[ "$STATS" != "" ] && echo "#[INFO] STATS generated '$STATS'"
else
	echo "#[ERROR] CRAM not generated and validated neither from BAM nor FASTQ"
	[ "$CRAM_cram_source" != "" ] && rm -f $CRAM_cram_source $CRAM_cram_source.crai
	exit 1
fi

exit 0
