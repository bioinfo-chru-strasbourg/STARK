#!/bin/bash
#################################
##
## STARK
##
#################################

SCRIPT_NAME="STARKLaunch"
SCRIPT_DESCRIPTION="STARK launch RUN or FASTQ/BAM analysis"
SCRIPT_RELEASE="0.9.2.2"
SCRIPT_DATE="19/10/2021"
SCRIPT_AUTHOR="Antony Le Bechec"
SCRIPT_COPYRIGHT="IRC"
SCRIPT_LICENCE="GNU-AGPL"

# Realse note
RELEASE_NOTES=$RELEASE_NOTES"# 0.9b-30/05/2016: Script creation\n";
RELEASE_NOTES=$RELEASE_NOTES"# 0.9.1.0-23/04/2021: Completely recoded\n";
RELEASE_NOTES=$RELEASE_NOTES"# 0.9.2.0-19/09/2021: add parameters\n";
RELEASE_NOTES=$RELEASE_NOTES"# 0.9.2.1-19/09/2021: add favorites parameter\n";
RELEASE_NOTES=$RELEASE_NOTES"# 0.9.2.2-19/10/2021: add pedigree parameter\n";

# Script folder
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# Configuration
ENV_CONFIG=$(find -L $SCRIPT_DIR/.. -name config.app)
source $ENV_CONFIG 1>/dev/null 2>/dev/null


# Header
function header () {
	cat $STARK_FOLDER_DOCS/HEADER
	#echo "#######################################";
	#echo "# $SCRIPT_NAME [$SCRIPT_RELEASE-$SCRIPT_DATE]";
	#echo "# $SCRIPT_DESCRIPTION ";
	#echo "# $SCRIPT_AUTHOR @ $SCRIPT_COPYRIGHT Â© $SCRIPT_LICENCE";
	#echo "#######################################";
}

# Release
function release () {
	cat $STARK_FOLDER_DOCS/RELEASE_NOTES
	#echo "# RELEASE NOTES:";
	#echo -e $RELEASE_NOTES
}

# Usage
function usage {
	echo "# USAGE: $(basename $0) --analysis=<FILE>|--reads=<FASTQ>|--run=<RUN> [options...]";
	echo "";
	echo "### Launch an analysis through (by order of priority):";
	#echo "# --analysis a configuration file ";
	#echo "# --reads a list of sample files ";
	#echo "# --runs a list of runs folders ";
	#echo "";
	#echo "### Analysis configuration file ###";
	echo "# --analysis=<FILE1,FILE2...>              List of configuration file in JSON format defining options (see below).";
	echo "#                                          Format: { \"option1\":\"value1\", \"option2\":\"value2\"...}";
	echo "# --reads=<FILE1,FILE2...>                 List of Reads files";
	echo "#                                          For each samples, allowed formats FASTQ|BAM|SAM|CRAM:";
	echo "#                                          *fastq.gz|*fq.gz|*bam|*ubam|*cram|*ucram|*sam|*usam";
	echo "# --run=<FOLDER1,FOLDER2...>               List of RUNs to analyse";
	echo "#                                          From Illumina sequencers (BCL), demultiplexing (FASTQ), or any folder containing FASTQ|BAM|SAM|CRAM.";
	echo "#                                          For folder containing FASTQ, corresponding Paired-End Read2 will be autodetected: /.*[._-])R1([._-].*/.*[._-])R2([._-].*/";
	echo "#                                          RUN can be a folder path, or the run folder in defined runs folders (see Application configuration)";
	echo "#                                          Analysis name of each RUN can be defined using ':' after each RUN (default: run folder name)";
	echo "#                                          Format: RUN1:RUN1_ANALYSIS_NAME,RUN2:RUN2_ANALYSIS_NAME...";
	echo "#                                          Example: /path_of_my_runs/my_run:my_run1,run_name_folder_in_configured_runs_folder:my_run2";
	#echo "#                                          Examples:";
	#echo "#                                          - SAMPLE Analysis";
	#echo "#                                          { \"fastq\":\"sample1.R1.fastq,sample2.bam\",";
	#echo "#                                            \"fastq_R2\":\"sample1.R2.fastq,\",";
	#echo "#                                            \"bed\":\"sample1.manifest,sample2.bed\",";
	#echo "#                                            \"application\":\"APP2\" }";
	#echo "#                                          - RUN Analysis";
	#echo "#                                          { \"run\":\"/path_of_my_runs/my_run:my_run1,run_name_folder_in_configured_runs_folder:my_run2\",";
	#echo "#                                            \"bed\":\"my_run.bed,my_other_run.manifest\",";
	#echo "#                                            \"application\":\"APP2\" }";
	echo ""

	echo "### SAMPLE Analysis options";
	echo "# --sample=<STRING1,STRING2...>            List of corresponding SAMPLE Name";
	echo "#                                          Automatically detected from input files.";
	echo "# --sample_tag=<STRING1,STRING2...>        List of corresponding SAMPLE Tags.";
	echo "#                                          Format: [TYPE]#TAG[#TAG]{!}[[TYPE]#TAG[#TAG]]";
	echo "# --reads2=<FILE1,FILE2...>                List of Reads files with corresponding Paired-End Read2 (beware of correspondance).";
	echo "#                                          For each samples, allowed formats FASTQ:";
	echo "#                                          *fastq.gz|*fq.gz";
	echo "# --index1=<FILE1,FILE2...>                List of corresponding Index1 files (beware of correspondance).";
	echo "#                                          For each samples, allowed formats FASTQ:";
	echo "#                                          *fastq.gz|*fq.gz";
	echo "# --index2=<FILE1,FILE2...>                List of corresponding Index2 files (beware of correspondance).";
	echo "#                                          For each samples, allowed formats FASTQ:";
	echo "#                                          *fastq.gz|*fq.gz";
	echo "# --other_files=<FILE1,FILE2...>           List of corresponding other files (beware of correspondance).";
	echo "#                                          Files will be copied into each SAMPLE folder";
	#echo "# --adapters=<STRING>                      Adapters to trim.";
	echo ""

	echo "### RUN Analysis options";
	echo "# --samplesheet=<FILE1,FILES2...>          List of corresponding Illumina SampleSheet.csv file to use with RUNS";
	echo "#                                          Default: found in RUN folder";
	echo "# --sample_filter=<STRING1,STRING2...>     List of SAMPLE name in Illumina SampleSheet.csv to analyse";
	echo "#                                          Default: all samples in the SampleSheet ";
	echo "# --demultiplexing_only                    Perform only demultiplexing (do NOT analysis FASTQ)";
	echo "";

	echo "### Folder options";
	echo "# --input=<FOLDER>                         Input folder (Default: Defined in Application).";
	echo "#                                          Contains folders 'runs' and 'manifests' to analyse Illumina RUN (see --run option)";
	echo "# --output=<FOLDER>                        Output folder (Default: Defined in Application).";
	echo "#                                          Contains folders 'demultiplexing', 'results', 'log' and 'tmp'";
	echo "# --demultiplexing=<FOLDER>                Output/demultiplexing folder";
	echo "# --results=<FOLDER>                       Output/results directory to generate RESULTS|RUN|SAMPLE|* files";
	echo "# --log=<FOLDER>                           Output/log directory to generate RESULTS|RUN|SAMPLE|* files";
	echo "# --tmp=<FOLDER>                           Output/tmp directory to generate RESULTS|RUN|SAMPLE|* files";
	echo "#                                          Default: Defined in Application, or first --fastq file folder";
	echo "# --repository=<FOLDER>                    Repository directory to generate GROUP|PROJECT|RUN|SAMPLE|* specific files";
	echo "#                                          Default: no copy in a repository";
	echo "# --archives=<FOLDER>                      Archives directory to generate GROUP|PROJECT|RUN|SAMPLE|* specific files";
	echo "#                                          Default: no copy in a archives";
	echo "# --favorites=<FOLDER>                     Favorites directory to generate GROUP|PROJECT|RUN|* specific files from repository folder";
	echo "#                                          Default: no copy in a favorites";
	echo "# --databases=<FOLDER>                     Databases folder (requires STARK databases folder structure)";
	echo "";

	echo "### Other options";
	echo "# --analysis_name=<STRING>                 Analysis name.";
	echo "#                                          Default: 'date' (format YYYYMMDD) for a SAMPLE list analysis .";
	echo "# --analysis_tag=<STRING>                  List of ANALYSIS Tags.";
	echo "#                                          Format: TYPE#TAG[#TAG]{!}[TYPE#TAG[#TAG]]";
	echo "# --application=<STRING|FILE>              APP name or APP file configuration of the APPLICATION.";
	echo "#                                          Must be in the STARK APPS folder if relative path";
	echo "#                                          Default: defined in the RUN SampleSheet, or default.app if not defined";
	echo "# --design=<FILE1,FILE2...>                List of corresponding design for SAMPLE analysis";
	echo "#                                          OR force design for RUN analysis (use only one design).";
	echo "#                                          If not *.bed file (BED format), considered as Illumina manifest.";
	echo "#                                          Default: first BED or empty";
	echo "# --panels=<FILE1+FILE2,FILE3+FILE4...>    List of corresponding GENES files (Panels).";
	echo "#                                          OR force GENES file for RUN analysis (use only one GENES file).";
	echo "#                                          Format: <FILE1+FILE2,FILE3+FILE4...>, multiple panels for each sample with '+' separator.";
	echo "#                                          File format: BED (chr<TAB>start<TAB>stop<TAB>strand<TAB>gene_name).";
	echo "#                                          Default first GENES file or empty";
	echo "# --transcripts=<FILE1,FILE2...>           List of corresponding TRANSCRIPTS files.";
	echo "#                                          OR force TRANSCRIPTS file for RUN analysis (use only one TRANSCRIPTS file).";
	echo "#                                          Format: TSV (transcript<TAB>geneID).";
	echo "#                                          Default first TRANSCRIPTS file or empty";
	echo "# --pedigree=<FILE1,FILE2...>              List of corresponding PEDIGREE files.";
	echo "#                                          OR force PEDIGREE file for RUN analysis.";
	echo "#                                          Format: PED (see GATK doc).";
	echo "#                                          Default first PEDIGREE file or empty";
	echo "# --threads=<INTEGER>                      Number of thread to use";
	echo "#                                          Default: all cores in your system minus one";
	echo "# --by_sample                              Split analysis by SAMPLE, all threads on each sample, one by one.";
	echo "# --keep_alignment                         Keep alignment from input read file, for format BAM|SAM|CRAM only (alignment autodetected).";
	echo "#                                          CRAM Archives integrity will not be checked";
	echo "";

	echo "### Launch STARK with Docker";
	echo "# --docker-compose-file=<FILE>             Docker compose file.";
	echo "#                                          Default: 'docker-compose.yml' if any, or ''";
	echo "#                                          Warning: Docker env file '.env' in the Docker compose file folder will be used to build images and populate databases";
	echo "# --docker-env-file=<FILE>                 Docker environment file.";
	echo "#                                          Default: found in Docker compose file folder if any, or ''";
	echo "# --docker-parameters=<STRING>             Docker parameters, added if Docker compose file and Docker env file exists.";
	echo "#                                          Format: see Docker doc";
	echo "#                                          Default: ''";
	echo "# --docker-stark-image=<STRING>            Docker STARK image.";
	echo "#                                          Default: found in Docker env file if any, or 'stark:latest'";
	echo "# --docker-stark-container=<STRING>        Docker STARK container name. Start container as deamon/detached (if any) and execute command";
	echo "#                                          Default: no container started";
	echo "";

	echo "### Information options";
	echo "# --applications_infos                     Applications informations.";
	echo "#                                          Use --runs=<MyRun> to detect RAW FOLDER and APPLICATION of <MyRun>.";
	echo "#                                          Use --application=<MyApp> to show only <MyApp> informations.";
	echo "# --applications_infos_all                 Applications informations with all variables (--runs and --application option available).";
	echo "# --pipelines_infos                        Pipelines informations.";
	echo "# --release_infos                          Pipelines with tools and databases information.";
	echo "# --tools_infos                            Tools release information.";
	echo "# --databases_infos                        Databases information.";

	echo "# --verbose                                VERBOSE";
	echo "# --debug                                  DEBUG";
	echo "# --release                                RELEASE";
	echo "# --help                                   HELP";
	echo "";

}



####################################################################################################################################
# Getting parameters from the input
#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# ":" tells that the option has a required argument, "::" tells that the option has an optional argument, no ":" tells no argument
ARGS=$(getopt -o "a:b:e:r:f:q:g:j:m:l:s:w:t:o:u:iygxvdnh" --long "env:,app:,application:,runs:,run:,fastq:,reads:,reads1:,fastq_R1:,by_sample,keep_alignment,fastq_R2:,reads2:,index1:,index2:,other_files:,analysis_tag:,sample_tag:,adapters:,analysis:,analysis_name:,analysis_dir:,demultiplexing:,demultiplexing_only,samplesheet:,sample:,sample_filter:,design:,bed:,manifest:,genes:,panels:,transcripts:,pedigree:,threads:,output:,results:,repository:,archives:,favorites:,databases:,input:,output:,tmp:,log:,docker-compose-file:,docker-env-file:,docker-parameters:,docker-stark-image:,docker-stark-container:,no_header,applications_infos,applications_infos_all,pipelines_infos,release_infos,tools_infos,databases_infos,verbose,debug,release,help" -- "$@" 2> /dev/null)


if [ $? -ne 0 ]; then
	:
	echo "#[ERROR] Error in the argument list:";
	echo "#[ERROR] $@"
	echo ""
	usage;
	exit 1;
fi;


PARAM=$@
DEBUG=0
VERBOSE=0
#PARAM=$(echo $@ | tr "\n" " ")
#echo $PARAM;
#echo $ARGS;
#PARAM=$(echo $ARGS | sed s/--//gi);
#exit 0;

eval set -- "$ARGS"
while true
do
	#echo "$1=$2"
	#echo "Eval opts";
	case "$1" in
		-e|--env|--app|--application)
			APP="$2"
			shift 2
			;;
		-r|--run|--runs)
			RUNS="$2"
			shift 2
			;;
		-w|--analysis)
			ANALYSIS="$2"
			shift 2
			;;
		--analysis_name)
			ANALYSIS_NAME="$2"
			#ANALYSIS_NAME=$(echo $ANALYSIS_NAME | tr "," " ")
			shift 2
			;;
		--analysis_tag)
			ANALYSIS_TAG="$2"
			#ANALYSIS_NAME=$(echo $ANALYSIS_NAME | tr "," " ")
			shift 2
			;;
		-f|--reads|--reads1|--fastq|--fastq_R1)
			FASTQ=$2 #"$(echo $2 | tr "\n" " ")"
			shift 2
			;;
		-q|--reads2|--fastq_R2)
			FASTQ_R2=$2 #"$(echo $2 | tr "\n" " ")"
			shift 2
			;;
		--index1)
			INDEX1=$2 #"$(echo $2 | tr "\n" " ")"
			shift 2
			;;
		--index2)
			INDEX2=$2 #"$(echo $2 | tr "\n" " ")"
			shift 2
			;;
		--other_files)
			OTHER_FILES=$2 #"$(echo $2 | tr "\n" " ")"
			shift 2
			;;
		-l|--samplesheet)
			SAMPLESHEET_INPUT="$2" #"$(echo $2 | tr "\n" " ")"
			shift 2
			;;
		--demultiplexing_only)
			DEMULTIPLEXING_ONLY=1
			shift 1
			;;
		-s|--sample)
			SAMPLE="$2"
			SAMPLE=$(echo $SAMPLE | tr "," " ")
			shift 2
			;;
		--sample_tag)
			SAMPLE_TAG="$2"
			shift 2
			;;
		--sample_filter)
			SAMPLE_LIST="$2"
			SAMPLE_LIST=$(echo $SAMPLE_LIST | tr "," " ")
			shift 2
			;;
		-b|--design|--bed|--manifest)
			BED_INPUT="$2"
			BED_INPUT=$(echo $BED_INPUT | tr "," " ")
			shift 2
			;;
		-j|--genes|--panels)
			BEDFILE_GENES_INPUT="$2"
			BEDFILE_GENES_INPUT=$(echo $BEDFILE_GENES_INPUT | tr "," " ")
			shift 2
			;;
		-m|--transcripts)
			TRANSCRIPTS_INPUT="$2"
			TRANSCRIPTS_INPUT=$(echo $TRANSCRIPTS_INPUT | tr "," " ")
			shift 2
			;;
		--pedigree)
			PEDIGREE_INPUT="$2"
			PEDIGREE_INPUT=$(echo $PEDIGREE_INPUT | tr "," " ")
			shift 2
			;;
		-u|--repository)
			REPOSITORY="$2"
			shift 2
			;;
		--archives)
			ARCHIVES="$2"
			shift 2
			;;
		--favorites)
			FAVORITES="$2"
			shift 2
			;;
		--databases)
			DATABASES="$2"
			shift 2
			;;
		--input)
			INPUT="$2"
			shift 2
			;;
		--output)
			OUTPUT="$2"
			shift 2
			;;
		-o|--results)
			RESULTS="$2"
			shift 2
			;;
		--demultiplexing)
			DEMULTIPLEXING="$2" #"$(echo $2 | tr "\n" " ")"
			shift 2
			;;
		--tmp)
			TMP="$2"
			shift 2
			;;
		--log)
			LOG="$2"
			shift 2
			;;
		--docker-compose-file)
			DOCKER_COMPOSE_FILE="$2"
			shift 2
			;;
		--docker-env-file)
			DOCKER_ENV_FILE="$2"
			shift 2
			;;
		--docker-parameters)
			DOCKER_PARAMETERS="$2"
			shift 2
			;;
		--docker-stark-image)
			DOCKER_STARK_IMAGE_INPUT="$2"
			shift 2
			;;
		--docker-stark-container)
			DOCKER_STARK_CONTAINER="$2"
			shift 2
			;;
		-i|--applications_infos)
			APPLICATIONS_INFOS=1
			shift 1
			;;
		--applications_infos_all)
			APPLICATIONS_INFOS=1
			APPLICATIONS_INFOS_ALL=1
			shift 1
			;;
		-y|--pipelines_infos)
			PIPELINES_INFOS=1
			shift 1
			;;
		-g|--release_infos)
			RELEASE_INFOS=1
			shift 1
			;;
		-x|--tools_infos)
			TOOLS_INFOS=1
			shift 1
			;;
		--databases_infos)
			DATABASES_INFOS=1
			shift 1
			;;
		--analysis_dir)
			ANALYSIS_DIR="$2"
			shift 2
			;;
		-g|--by_sample)
			BY_SAMPLE=1
			shift 1
			;;
		--keep_alignment)
			KEEP_ALIGNMENT=1
			shift 1
			;;
		-t|--threads)
			THREADS_INPUT="$2"
			shift 2
			;;
		-a|--adapters)
			ADAPTERS="$2"
			shift 2
			;;
		-v|--verbose)
			VERBOSE=1
			shift 1
			;;
		-d|--debug)
			VERBOSE=1
			DEBUG=1
			shift 1
			;;
		-n|--release)
			release;
			exit 0
			;;
		-h|--help)
			HELP=1
			usage
			exit 0
			;;
		--no_header)
			NO_HEADER=1
			shift 1
			;;
		--) shift
			break
			;;
		*) 	echo "# Option $1 is not recognized. " "Use -h or --help to display the help." && \
			exit 1
			;;
	esac
done


# header
(($NO_HEADER)) || header;

####################################################################################################################################
# Checking the input parameter
#--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
if [ -z "$FASTQ" ] && \
	[ -z "$RUNS" ] && \
	[ -z "$ANALYSIS" ] && \
	[ -z "$APPLICATIONS_INFOS" ] && \
	[ -z "$APPLICATIONS_INFOS_ALL" ] && \
	[ -z "$PIPELINES_INFOS" ] && \
	[ -z "$RELEASE_INFOS" ] && \
	[ -z "$TOOLS_INFOS" ] && \
	[ -z "$DATABASES_INFOS" ] && \
	[ -z "$DOCKER_COMPOSE_FILE" ] && \
	[ -z "$DOCKER_ENV_FILE" ] && \
	[ -z "$DOCKER_STARK_IMAGE_INPUT" ] && \
	[ -z "$DOCKER_STARK_CONTAINER" ] && \
	((!$DEBUG)); then
	echo "#[ERROR] Required parameter: --analysis, --run, or --reads. For informations --applications_infos, --applications_infos_all, --pipelines_infos, --release_infos, --tools_infos. Use --help to display the help." && echo "" && usage && exit 1;
fi
#--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


#echo "if [ "$FASTQ" == "ollow" ] && [ "$THREADS_INPUT" == "he" ] && [ "$W" == "hite" ] && [ "$RUNS" == "abbit" ];"
if [ "$FASTQ" == "ollow" ] && [ "$THREADS_INPUT" == "he" ] && [ "$W" == "hite" ] && [ "$RUNS" == "abbit" ]; then
	echo "test";
	echo -e "\033[2J\033[?25l"; R=`tput lines` C=`tput cols`;: $[R--] ; while true
	do ( e=echo\ -e s=sleep j=$[RANDOM%C] d=$[RANDOM%R];for i in `eval $e {1..$R}`;
	do c=`printf '\\\\0%o' $[RANDOM%57+33]` ###  ###
	$e "\033[$[i-1];${j}H\033[32m$c\033[$i;${j}H\033[37m"$c; $s 0.1;if [ $i -ge $d ]
	then $e "\033[$[i-d];${j}H ";fi;done;for i in `eval $e {$[i-d]..$R}`; #[mat!rix]
	do echo -e "\033[$i;${j}f ";$s 0.1;done)& sleep 0.05;done #(c) 2011 -- [ BruXy ]
	exit 0;
fi;
#echo "if [ "$FASTQ" == "ollow" ] && [ "$THREADS_INPUT" == "he" ] && [ "$W" == "hite" ] && [ "$RUNS" == "abbit" ];"
#exit 0;


# FUNCTIONS
#############

# function in_array
# input: $element $array
in_array () 
{ 
    local param=$1;
    shift;
    for elem in "$@";
    do
        [[ "$param" = "$elem" ]] && return 0;
    done;
    return 1
}


# ENV
#########

#echo "APP=$APP"; exit;
(($VERBOSE)) && [ ! -z "$APP" ] && echo "#[INFO] Search Application '$APP'"

ENV=$(find_app "$APP" "$STARK_FOLDER_APPS")
if ! source_app "$APP" "$STARK_FOLDER_APPS" 1; then
	echo "#[ERROR] Application '$APP' error ('$ENV')";
	exit 1
fi

export ENV
export APP

(($VERBOSE)) && [ ! -z "$APP" ] && [ ! -z "$ENV" ] && echo "#[INFO] Application '$APP' found ('$ENV')"
(($VERBOSE)) && [ ! -z "$APP" ] && [ -z "$ENV" ] && echo "#[INFO] Application '$APP' NOT found"



# CORES
CORES=$(nproc)

# THREADS
re='^[0-9]+$'

if ! [[ $THREADS =~ $re ]] || [ -z "$THREADS" ] || [ "$THREADS" == "" ] || [ $THREADS -gt $CORES ] ; then
	CORES_FREE=1
	THREADS=$(($CORES-$CORES_FREE))
fi;
if [[ $THREADS_INPUT =~ $re ]] && [ "$THREADS_INPUT" != "" ]; then
	THREADS=$THREADS_INPUT;
fi;
#echo "#[INFO] Threads processing: $THREADS";



# DEBUG
#########
EXEC=1

if ((0)) && (($DEBUG)); then
#if (($DEBUG)); then
	echo $STARK_FOLDER_BIN
	echo $STARK_FOLDER_APPS
	echo $STARK_FOLDER_DOCS
	echo $STARK_FOLDER_TOOLBOX
	echo $STARK_FOLDER_CONFIG
	echo $STARK_FOLDER
	echo "FOLDER_INPUT:$FOLDER_INPUT"
	echo "   FOLDER_RUN:$FOLDER_RUN"
	echo "   FOLDER_MANIFEST:$FOLDER_MANIFEST"
	echo "FOLDER_OUTPUT:$FOLDER_OUTPUT"
	echo "   FOLDER_RESULTS:$FOLDER_RESULTS"
	echo "   FOLDER_DEMULTIPLEXING:$FOLDER_DEMULTIPLEXING"
	echo "   FOLDER_TMP:$FOLDER_TMP"
	echo "   FOLDER_LOG:$FOLDER_LOG"
	echo "DATABASES:$DATABASES"
	echo "FOLDER_DATABASES:$FOLDER_DATABASES"
	echo "APP=$APP"
	echo "ASSEMBLY=$ASSEMBLY"
	echo "PIPELINES=$PIPELINES"
	echo "ALIGNERS=$ALIGNERS"
	echo "CALLERS=$CALLERS"
	echo "ANNOTATORS=$ANNOTATORS"
	echo "ASSEMBLY=$ASSEMBLY"
	echo "RULES=$RULES"
	echo "THREADS=$THREADS"
	exit 0;
fi;


# CONFIG

TAG_DELIMITER="!"

EXIT=0

# PARAMETERS in ARRAYS

# SAMPLESHEET
SAMPLESHEET_INPUT_ARRAY=($(echo $SAMPLESHEET_INPUT | tr "," " "))



# APPLICATIONS_INFOS
#######

if (($APPLICATIONS_INFOS)); then

	#if [ ! -e $SAMPLESHEET_INPUT ]; then
	#	echo "#[ERROR] SampleSheet '$SAMPLESHEET_INPUT' does NOT exists."
	#	#exit 0;
	#fi;
	#  (env -i bash -c "export APP=default && source /tool/config/config.app && source_app $APP && env | grep "APP"")

	#SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

	RUNS_TEST=$RUNS

	APP_TEST=$APP
	#APP_TEST_NAME=$(source_app "$APP" "$STARK_FOLDER_APPS" 2>/dev/null; echo $APP_NAME)
	APP_TEST_NAME=$(name_app "$APP" "$STARK_FOLDER_APPS" 2>/dev/null)
	APP_TEST_ENV=$ENV


	echo ""
	echo "#[INFO] ######################"
	echo "#[INFO] #### APPLICATIONS ####"
	echo "#[INFO] ######################"
	echo ""

	RAW_LIST="";
	FOLDER_RUN_ORIGINAL=$FOLDER_RUN


	# Find APP list
	if [ "$APP_TEST" == "" ]; then
		FIND_APP_LIST=$(find -L $STARK_FOLDER_APPS -name '*.app' -type f | sed "s#$STARK_FOLDER_APPS/##" | sort -f -t'/' -k2.3 -k2.2 -k2.1)" "$(find -L $STARK_FOLDER_APPS -name '*.plugapp' -type f | sed "s#$STARK_FOLDER_APPS/##" | sort -f -t'/' -k2.3 -k2.2 -k2.1)
	else
		FIND_APP_LIST=$(echo $APP_TEST_ENV | sed "s#$STARK_FOLDER_APPS/##gi")
	fi;

	# For each APP found
	for ENV_DEF in $FIND_APP_LIST; do

		# FIND APP
		APP_NAME=$(name_app "$STARK_FOLDER_APPS/$ENV_DEF" 2>/dev/null)
		
		if [ "$APP_TEST" == "" ] || in_array ${APP_NAME^^} ${APP_TEST_NAME^^}; then

			# Find APP
			#APP=$(source_app "$STARK_FOLDER_APPS/$ENV_DEF"  2>/dev/null; echo $APP_NAME)
			if ! APP=$(source_app "$STARK_FOLDER_APPS/$ENV_DEF" 2>/dev/null; echo $APP_NAME); then
				echo "#[ERROR] Application '$STARK_FOLDER_APPS/$ENV_DEF' error";
				exit 1
			fi

			if [ "$APP" == "" ]; then
				APP="default";
				ENV=$APP;
			fi

			#FIELD_SEP="\t"
			#APP_INFOS=$(source_app "$STARK_FOLDER_APPS/$ENV_DEF"
			if ! APP_INFOS=$(source_app "$STARK_FOLDER_APPS/$ENV_DEF"; 
			echo -e "$APP_RELEASE\t$APP_DESCRIPTION\t$APP_GROUP\t$APP_PROJECT\t$FOLDER_RUN\t$FOLDER_RESULTS\t$FOLDER_REPOSITORY\t$FOLDER_ARCHIVES\t$FOLDER_FAVORITES\t$PIPELINES\t$POST_SEQUENCING_STEPS\t$POST_ALIGNMENT_STEPS\t$POST_CALLING_STEPS\t$POST_ANNOTATION_STEPS\t$HOWARD_ANNOTATION_REPORT"); then
			 	echo "#[ERROR] Application '$ENV_DEF' error";
			 	exit 1
			fi
			APP_RELEASE=$(echo -e "$APP_INFOS" | awk -F'\t' '{print $1}')
			APP_DESCRIPTION=$(echo -e "$APP_INFOS" | awk -F'\t' '{print $2}')
			APP_GROUP=$(echo -e "$APP_INFOS" | awk -F'\t' '{print $3}')
			APP_PROJECT=$(echo -e "$APP_INFOS" | awk -F'\t' '{print $4}')
			FOLDER_RUN=$(echo -e "$APP_INFOS" | awk -F'\t' '{print $5}')
			FOLDER_RESULTS=$(echo -e "$APP_INFOS" | awk -F'\t' '{print $6}')
			FOLDER_REPOSITORY=$(echo -e "$APP_INFOS" | awk -F'\t' '{print $7}')
			FOLDER_ARCHIVES=$(echo -e "$APP_INFOS" | awk -F'\t' '{print $8}')
			FOLDER_FAVORITES=$(echo -e "$APP_INFOS" | awk -F'\t' '{print $9}')
			PIPELINES=$(echo -e "$APP_INFOS" | awk -F'\t' '{print $10}')
			POST_SEQUENCING_STEPS=$(echo -e "$APP_INFOS" | awk -F'\t' '{print $11}')
			POST_ALIGNMENT_STEPS=$(echo -e "$APP_INFOS" | awk -F'\t' '{print $12}')
			POST_CALLING_STEPS=$(echo -e "$APP_INFOS" | awk -F'\t' '{print $13}')
			POST_ANNOTATION_STEPS=$(echo -e "$APP_INFOS" | awk -F'\t' '{print $14}')
			HOWARD_ANNOTATION_REPORT=$(echo -e "$APP_INFOS" | awk -F'\t' '{print $15}')

			[ -z "$APP_DESCRIPTION" ] && APP_DESCRIPTION="-";
			[ -z "$APP_GROUP" ] && APP_GROUP="UNKNOWN";
			[ -z "$APP_PROJECT" ] && APP_PROJECT="UNKNOWN";

			# Application TYPE
			APP_TYPE="APP"
			[ "${ENV_DEF##*.}" == "plugapp" ] && APP_TYPE="plugAPP"

			# OUTPUT
			echo "";
			echo "#[INFO] $APP:$APP_RELEASE ["$(echo $ENV_DEF | sed s#$STARK_FOLDER_APPS/##)"] [$APP_TYPE] ";
			echo "#[INFO]    DESCRIPTION            $APP_DESCRIPTION";

			if [ "$APP_TYPE" == "APP" ]; then
				echo "#[INFO]    GROUP                  $APP_GROUP";
				echo "#[INFO]    PROJECT                $APP_PROJECT";
				# echo "#[INFO]    RUN                    $FOLDER_RUN";
				# echo "#[INFO]    RESULTS                $FOLDER_RESULTS";
				# echo "#[INFO]    REPOSITORY             $FOLDER_REPOSITORY";
				# echo "#[INFO]    ARCHIVES               $FOLDER_ARCHIVES";
				# echo "#[INFO]    FAVORITES               $FOLDER_FAVORITES";
				echo "#[INFO]    PIPELINES              $PIPELINES "
				echo "#[INFO]    ANNOTATIONS            $HOWARD_ANNOTATION_REPORT "
				echo "#[INFO]    POST SEQUENCING STEPS  $POST_SEQUENCING_STEPS "
				echo "#[INFO]    POST ALIGNMENT STEPS   $POST_ALIGNMENT_STEPS "
				echo "#[INFO]    POST CALLING STEPS     $POST_CALLING_STEPS "
				echo "#[INFO]    POST ANNOTATION STEPS  $POST_ANNOTATION_STEPS "
			fi;
			if (($APPLICATIONS_INFOS_ALL)); then
				echo "#[INFO]    ALL VARIABLES"
				if [ "$APP_TYPE" == "APP" ]; then
					(env -i bash -c "export APP=$APP && source /tool/config/config.app && source_app $APP && env | awk '{print \"#[INFO]        \"\$0}'")
				elif [ "$APP_TYPE" == "plugAPP" ]; then
					#echo "INFOS ALL plugAPP"
					#echo "$STARK_FOLDER_APPS/$ENV_DEF"
					cat "$STARK_FOLDER_APPS/$ENV_DEF" | grep "^#" -v | grep "^ *$" -v | awk '{print "#[INFO]        "$0}'
				fi;
			fi;
			#fi;
			RAW_LIST=$RAW_LIST" $FOLDER_RUN"

		fi;

	done;
	RAW_LIST=$(echo $RAW_LIST | sed "s/ /\n/gi" | sort | uniq | sed "s/\n/ /gi" );

	if [ "$RUNS_TEST" != "" ]; then

		for RUN_TEST in $(echo $RUNS_TEST | tr "," " "); do

		echo "";
		echo "#[INFO] ### RUN '$RUN_TEST' ####";
		RUN_TEST_FOUND=0;
		MISEQ_FOLDER_FOUND="";
		if [ -d $FOLDER_RUN_ORIGINAL/$RUN_TEST ]; then
			RUN_TEST_FOUND=1;
			MISEQ_FOLDER_FOUND=$FOLDER_RUN_ORIGINAL;
		fi;

		if ((!$RUN_TEST_FOUND)); then
		for RAW_LIST_ONE in $RAW_LIST; do
			if [ -d $RAW_LIST_ONE/$RUN_TEST ] && ((!$RUN_TEST_FOUND)); then
				RUN_TEST_FOUND=1;
				MISEQ_FOLDER_FOUND=$RAW_LIST_ONE;
			fi;
		done;
		fi;

		if ((!$RUN_TEST_FOUND)); then
			echo "#[ERROR] RUN not found";
			exit 1;
		else
			echo "#[INFO] RAW FOLDER $MISEQ_FOLDER_FOUND";
		fi;

		# Test SampleSheet to determine RUN_TEST possible Application/ENV
		if [ -z $SAMPLESHEET_INPUT ]; then
			SAMPLESHEET_INPUT=$MISEQ_FOLDER_FOUND/$RUN_TEST/SampleSheet.csv
		fi;

		if [ -e $SAMPLESHEET_INPUT ]; then
			RUN_GROUP=`grep -i 'Investigator Name' $SAMPLESHEET_INPUT | tr -d '\r\n' | cut -d \, -f 2 | cut -d \- -f 1`
			RUN_PROJECT=`grep -i 'Investigator Name' $SAMPLESHEET_INPUT | tr -d '\r\n' | cut -d \, -f 2 | cut -d \- -f 2`
			RUN_USER=`grep -i 'Investigator Name' $SAMPLESHEET_INPUT | tr -d '\r\n' | cut -d \, -f 2 | cut -d \- -f 3`
			RUN_APP_NAME="$RUN_GROUP-$RUN_PROJECT"

			# RUN ENV
			# ENV-AUTO in ENV allows looking for ENV depending on GROUP/PROJECT/USER
			RUN_ENV=$ENV;

			# SOURCE ENV if exists
			RUN_ENV=$(find_app "$RUN_APP_NAME" "$STARK_FOLDER_APPS")
			if ! source_app "$RUN_APP_NAME" "$STARK_FOLDER_APPS"; then
				echo "#[ERROR] Application '$RUN_APP_NAME' error";
				exit 1
			fi

			RUN_APP=$(source $RUN_ENV; echo $APP_NAME)
			if [ "$RUN_APP" == "" ]; then RUN_APP="default"; fi

			echo "#[INFO] DEFAULT APPLICATION detection $RUN_APP";

			awk '/Data/{y=1;next}y' $SAMPLESHEET_INPUT | tr -d '\r' | sed 's/,/\t/g' > $TMP_FOLDER_TMP/$RUN'_SampleSheet.csv_tmp'
			SAMPLES_PROJECT_LIST=$( C=1; for i in $(head $TMP_FOLDER_TMP/$RUN'_SampleSheet.csv_tmp' -n 1) ; do if [ $i == "Sample_Project" ] ; then break ; else C=$(( $C + 1 )) ; fi ; done ; cut -f $C $TMP_FOLDER_TMP/$RUN'_SampleSheet.csv_tmp' | sort -u | sed 's/Sample_Project//' );
			rm $TMP_FOLDER_TMP/$RUN'_SampleSheet.csv_tmp'
			echo "#[INFO] List of APPLICATION: "$(echo $SAMPLES_PROJECT_LIST);
			for SPL in $SAMPLES_PROJECT_LIST; do
				echo "#[INFO] - '$SPL' ["$(find_app "$SPL" "$STARK_FOLDER_APPS" | sed s#$STARK_FOLDER_APPS#APP#)"]";
			done;
		else
			echo "#[WARNNING] SAMPLESHEET '$SAMPLESHEET_INPUT' not found";
		fi;

		done;

	# else
	# 	echo "";
	# 	echo "#[INFO] USE $(basename $0) --applications_infos --runs=<RUN> to detect RAW FOLDER and APPLICATION of RUN";
	fi;
	echo "";

	EXIT=1

fi;

# PIPELINES
##############

if (($PIPELINES_INFOS)); then

	echo ""
	echo "###################"
	echo "#### PIPELINES ####"
	echo "###################"
	echo ""

	PIPELINES_INFOS=$TMP_FOLDER_TMP/$RANDOM$RANDOM.pipelines
	MAKEFILE_PARAM=$TMP_FOLDER_TMP/$RANDOM$RANDOM.param
	touch $PIPELINES_INFOS $MAKEFILE_PARAM
	#source $ENV;
	#make -e -f $STARK_FOLDER_BIN/NGSWorkflow.mk PARAM=$MAKEFILE_PARAM PIPELINES_INFOS=$PIPELINES_INFOS $PIPELINES_INFOS 1>/dev/null 2>/dev/null;
	make -e -f $STARK_FOLDER_BIN/STARK.launch.analysis.mk PARAM=$MAKEFILE_PARAM PIPELINES_INFOS=$PIPELINES_INFOS $PIPELINES_INFOS 1>/dev/null 2>/dev/null;
	sort -k1,2 $PIPELINES_INFOS | cut -d: -f1-3 | column -t -s ':'
	#make -e -f $STARK_FOLDER_BIN/NGSWorkflow.mk PARAM=$MAKEFILE_PARAM RELEASE_INFOS=$PIPELINES_INFOS $PIPELINES_INFOS 1>/dev/null 2>/dev/null;
	#cat $PIPELINES_INFOS
	rm $PIPELINES_INFOS $MAKEFILE_PARAM;

	EXIT=1
fi;



# TOOLS INFOS
#################

if (($TOOLS_INFOS)); then

	echo ""
	echo "####################"
	echo "#### TOOLS LIST ####"
	echo "####################"
	echo ""
	for T in $TOOLS_LIST; do
		VAR_VERSION=$T"_VERSION"; #echo ${!VAR_VERSION};
		VAR_DESCRIPTION=$T"_DESCRIPTION"; #echo ${!VAR_DESCRIPTION};
		VAR_REF=$T"_REF"; #echo ${!VAR_REF};
		echo "## $T ["${!VAR_VERSION}"]";
		echo "# "${!VAR_DESCRIPTION};
		echo "# "${!VAR_REF};
		echo ""
	done

	EXIT=1
fi;

# DATABASES INFOS
#################

if (($DATABASES_INFOS)); then

	echo ""
	echo "########################"
	echo "#### DATABASES LIST ####"
	echo "########################"
	#echo ""
	#echo "$ENV"
	for D in $DATABASES_LIST; do
		VAR_D=$D; #echo ${!VAR_VERSION};
		#VAR_DESCRIPTION=$T"_DESCRIPTION"; #echo ${!VAR_DESCRIPTION};
		#VAR_REF=$T"_REF"; #echo ${!VAR_REF};
		echo "## $D: "${!VAR_D}"";
		#echo ""
	done

	echo ""
	echo "##########################"
	echo "#### DATABASES CONFIG ####"
	echo "##########################"
	#echo ""
	for DC in $DATABASES_CONFIG_LIST; do
		VAR_DC=$DC; #echo ${!VAR_VERSION};
		#VAR_DESCRIPTION=$T"_DESCRIPTION"; #echo ${!VAR_DESCRIPTION};
		#VAR_REF=$T"_REF"; #echo ${!VAR_REF};
		echo "## $DC: "${!VAR_DC}"";
		#echo ""
	done

	EXIT=1
fi;


# RELEASE INFOS
#################

if (($RELEASE_INFOS)); then

	echo ""
	echo "##################"
	echo "#### RELEASES ####"
	echo "##################"
	echo ""

	RELEASE_INFOS=$TMP_FOLDER_TMP/$RANDOM$RANDOM.release
	MAKEFILE_PARAM=$TMP_FOLDER_TMP/$RANDOM$RANDOM.param
	touch $RELEASE_INFOS $MAKEFILE_PARAM

	#source $ENV;
	#make -e -f $STARK_FOLDER_BIN/NGSWorkflow.mk PARAM=$MAKEFILE_PARAM RELEASE_INFOS=$RELEASE_INFOS $RELEASE_INFOS 1>/dev/null 2>/dev/null;
	make -e -f $STARK_FOLDER_BIN/STARK.launch.analysis.mk PARAM=$MAKEFILE_PARAM RELEASE_INFOS=$RELEASE_INFOS $RELEASE_INFOS 1>/dev/null 2>/dev/null;
	
	cat $RELEASE_INFOS | sed "s/^## /\n## /"

	rm $RELEASE_INFOS $MAKEFILE_PARAM;

	EXIT=1
fi;
#echo "truc"; exit 0;


if (($EXIT)); then
	exit 0;
fi;


echo

# DOCKER
##########

if [ -s "$DOCKER_COMPOSE_FILE" ] || [ -s "$DOCKER_ENV_FILE" ] || [ "$DOCKER_STARK_IMAGE_INPUT" != "" ] || [ "$DOCKER_STARK_CONTAINER" != "" ]; then

	## PARAM & CMD
	# Clean parameters

	PARAM_CMD=$(echo "$PARAM " | sed "s/--docker-compose-file=[^ |$]*//g" | sed "s/--docker-env-file=[^ |$]*//g" | sed "s/--docker-parameters=[^ |$]*//g" | sed "s/--docker-stark-image=[^ |$]*//g" | sed "s/--docker-stark-container=[^ |$]*//g")

	# MAIN Docker PARAMETERS
	#DOCKER_CMD_PARAMETERS=" --rm "

	## DOCKER
	# Test if Docker is installed

	! (( $(docker -v 2>/dev/null | grep "^Docker version" -c ) )) && echo "#[ERROR] Docker NOT found" && exit 1

	## DOCKER COMPOSE
	# Check docker compose file

	(($VERBOSE)) && echo "#[INFO] Docker compose file '$DOCKER_COMPOSE_FILE'"

	if [ -s "$DOCKER_COMPOSE_FILE" ]; then
		(($VERBOSE)) && echo "#[INFO] Compose build with file '$DOCKER_COMPOSE_FILE' to build image (if necessary)"
		DOCKER_CMD="docker-compose -f $DOCKER_COMPOSE_FILE --project-directory=$(dirname $DOCKER_COMPOSE_FILE) $DOCKER_STARK_IMAGE_ENV up --no-start stark stark-databases"
		(($DEBUG)) && echo "[INFO] DOCKER CMD: $DOCKER_CMD"
		eval $DOCKER_CMD
	fi;

	## DOCKER ENV
	# Check docker env file

	[ ! -s "$DOCKER_ENV_FILE" ] || [ ! -f "$DOCKER_ENV_FILE" ] && [ -s $(dirname "$DOCKER_COMPOSE_FILE")"/.env" ] && [ "$DOCKER_COMPOSE_FILE" != "" ] && DOCKER_ENV_FILE=$(dirname "$DOCKER_COMPOSE_FILE")"/.env";
	[ "$DOCKER_ENV_FILE" != "" ] && [ ! -f $DOCKER_ENV_FILE ] && (($VERBOSE)) && echo "#[ERROR] Input Docker env file '$DOCKER_ENV_FILE' NOT found" && exit 1
	(($VERBOSE)) && echo "#[INFO] Docker env file '$DOCKER_ENV_FILE'"

	if [ "$DOCKER_ENV_FILE" != "" ] && [ -s $DOCKER_ENV_FILE ]; then
		source $DOCKER_ENV_FILE
		DOCKER_CMD_PARAMETERS=$DOCKER_CMD_PARAMETERS" --env-file=$DOCKER_ENV_FILE "
	fi;

	## DOCKER STARK IMAGE
	# Check docker image

	# Test docker image
	[ -z $DOCKER_STARK_IMAGE_INPUT ] && DOCKER_STARK_IMAGE_INPUT=$DOCKER_STARK_IMAGE
	[ -z $DOCKER_STARK_IMAGE_INPUT ] && DOCKER_STARK_IMAGE_INPUT="stark:latest"
	if [ "$DOCKER_STARK_IMAGE_INPUT" != "" ]; then
		if [[ "$(docker images -q $DOCKER_STARK_IMAGE_INPUT | wc -l | tr -d " ")" != "1" ]]; then
			echo "#[WARN] Docker STARK image '$DOCKER_STARK_IMAGE_INPUT' NOT found" #&& exit 1
		fi
		(($VERBOSE)) && echo "#[INFO] Docker STARK image '$DOCKER_STARK_IMAGE_INPUT'"
	fi;


	## DOCKER MOUNT
	# Create mount

	DOCKER_MOUNT=""
	for var in "${!DOCKER_STARK_FOLDER_@}"; do
		ONE_DOCKER_STARK_FOLDER_CONTAINER=$(echo ${var} | sed "s/^DOCKER_STARK_FOLDER_//g" | sed "s/_/\//g" | tr '[:upper:]' '[:lower:]' )
		[ ! -d $DOCKER_STARK_MAIN_FOLDER"/"${!var} ] && mkdir -p $DOCKER_STARK_MAIN_FOLDER"/"${!var} && echo "#[INFO] Folder '$DOCKER_STARK_MAIN_FOLDER/${!var}' created" # ???
		[ -d $DOCKER_STARK_MAIN_FOLDER"/"${!var} ] && [ "$DOCKER_STARK_MAIN_FOLDER/${!var}" != "" ] && DOCKER_MOUNT=$DOCKER_MOUNT" -v "$DOCKER_STARK_MAIN_FOLDER"/"${!var}":/STARK/"$ONE_DOCKER_STARK_FOLDER_CONTAINER #  echo "$var = ${!var}"
	done
	DOCKER_CMD_PARAMETERS=$DOCKER_CMD_PARAMETERS" $DOCKER_MOUNT "

	(($VERBOSE)) && echo "#[INFO] Docker mount '$DOCKER_MOUNT'"


	## DOCKER SOCK
	# Link Docker images & containers

	if [ -e /var/run/docker.sock ]; then
		DOCKER_MOUNT_SOCK=" -v /var/run/docker.sock:/var/run/docker.sock "
		DOCKER_CMD_PARAMETERS=$DOCKER_CMD_PARAMETERS" $DOCKER_MOUNT_SOCK "
	fi;

	(($VERBOSE)) && echo "#[INFO] Docker sock linked"


	## DOCKER PARAMETERS
	# Create parameters

	DOCKER_PARAMETERS=$(echo $DOCKER_PARAMETERS | tr ";" " ")
	(($VERBOSE)) && echo "#[INFO] Docker parameters '$DOCKER_PARAMETERS'"

	DOCKER_CMD_PARAMETERS=$DOCKER_CMD_PARAMETERS" $DOCKER_PARAMETERS "


	## CONTAINER

	if [ "$DOCKER_STARK_CONTAINER" != "" ]; then

		(($VERBOSE)) && echo "#[INFO] Docker container '$DOCKER_STARK_CONTAINER'"

		# Test container status
		# If container stopped
		if [ $(docker ps -a --filter="status=exited" --filter="name="$DOCKER_STARK_CONTAINER | wc -l) == "2" ]; then
			(($VERBOSE)) && echo "#[INFO] Start Docker container '$DOCKER_STARK_CONTAINER'"
			DOCKER_CMD="docker start $DOCKER_STARK_CONTAINER"
			eval $DOCKER_CMD
		# If container not created
		elif [ $(docker ps -a --filter="status=running" --filter="name="$DOCKER_STARK_CONTAINER | wc -l) == "1" ]; then
			(($VERBOSE)) && echo "#[INFO] Create Docker container '$DOCKER_STARK_CONTAINER'"
			DOCKER_CMD="docker run $DOCKER_CMD_PARAMETERS --entrypoint=bash --name='$DOCKER_STARK_CONTAINER' -d -ti $DOCKER_STARK_IMAGE_INPUT -c 'while true; do sleep 60; done'"
			eval $DOCKER_CMD
		# Container started
		else
			(($VERBOSE)) && echo "#[INFO] Docker container '$DOCKER_STARK_CONTAINER' already created, started and running"
		fi;

		# RUN with container
		if [ $(docker ps --filter="name="$DOCKER_STARK_CONTAINER | grep " $DOCKER_STARK_CONTAINER$" | wc -l) == "1" ]; then
			(($VERBOSE)) && echo "#[INFO] Docker execute command on docker container '$DOCKER_STARK_CONTAINER'"
			echo ""
			DOCKER_CMD="docker exec $DOCKER_STARK_CONTAINER STARK $PARAM_CMD"
			(($DEBUG)) && echo "#[INFO] DOCKER CMD: $DOCKER_CMD"
			eval $DOCKER_CMD || exit 1
			# if $DOCKER_CMD; then
			# 	(($DEBUG)) && echo "#[INFO] DOCKER CMD: OK"
			# else
			# 	exit 1
			# fi;
		fi;

		exit 0
	fi;

	### COMMAND
	# Create and execute command

	DOCKER_CMD="docker run $DOCKER_CMD_PARAMETERS $DOCKER_STARK_IMAGE_INPUT $PARAM_CMD"
	(($DEBUG)) && echo "#[INFO] DOCKER CMD: $DOCKER_CMD"
	echo ""

	if $DOCKER_CMD; then
		(($VERBOSE)) && echo "#[INFO] DOCKER CMD: OK"
	else
		exit 1
	fi;

fi;



# CONFIG
##########


if [ "$ANALYSIS" != "" ]; then

	echo "#[INFO] Test Analysis Configuration files"

	(($DEBUG)) && echo "#[INFO] Config files '$ANALYSIS'"

	for J in $(echo $ANALYSIS | tr "," " "); do

		if [ -f $J ]; then

			echo "#[INFO] Config file '$J' does exists."

 			(($DEBUG)) && cat $J

			PARAM_ANALYSIS=$(echo "$PARAM " | sed "s/--analysis=[^ |$]*//gi" | sed "s/-w [^ |$]*//gi")

			PARAM_STARK_TEST=0
			#PARAM_STARK="$($PYTHON2 $STARK_FOLDER_BIN/json_to_options.py $J)" && PARAM_STARK_TEST=1
			PARAM_STARK="$($PYTHON2 $STARK_FOLDER_BIN/json_to_options.py $J)" && PARAM_STARK_TEST=1

			! (($PARAM_STARK_TEST)) && echo "[ERROR] Config file '$J' malformed " && cat $J && exit 1;

			#(($DEBUG)) && echo "[INFO] PARAM_STARK=$PARAM_STARK" && exit 0;

			#ANALYSIS_DIR=$(dirname $J)
			ANALYSIS_DIR=$(cd "$( dirname $J )" && pwd)
			#PARAM_STARK=" --analysis_dir=$ANALYSIS_DIR $PARAM_STARK"
			PARAM_STARK_ANALYSIS_DIR=" --analysis_dir=$ANALYSIS_DIR"
			if [ $? -eq 0 ]; then
			    (($DEBUG)) && echo "#[INFO] PARAM_STARK=$PARAM_STARK"
			    (($DEBUG)) && echo "#[INFO] PARAM_ANALYSIS=$PARAM_ANALYSIS"
			    (($DEBUG)) && echo "#[INFO] PARAM_STARK_ANALYSIS_DIR=$PARAM_STARK_ANALYSIS_DIR"
			else
			    echo "#[ERROR] Analysis configuration file '$J' failed"
			    exit 1;
			fi

			#CMD=$(echo $0" "$PARAM_STARK" $PARAM_ANALYSIS")
			#CMD="$0 $PARAM_ANALYSIS $PARAM_STARK --no_header "
			#CMD="$0 $PARAM_STARK $PARAM_ANALYSIS --no_header "
			CMD=$(echo "$0 $PARAM_STARK $PARAM_ANALYSIS $PARAM_STARK_ANALYSIS_DIR --no_header " | tr "\n" " ")
			(($VERBOSE)) && echo "#[INFO] CMD=$CMD"
			(($VERBOSE)) && echo ""

			#echo "the CMD=$CMD"; exit 0;

			(($EXEC)) && eval $CMD || exit 1;

			# if (($EXEC)); then
			# 	if $CMD; then
			# 		(($VERBOSE)) && echo "#[INFO] CMD OK"
			# 	else
			# 		exit 1
			# 	fi;
			# fi;

			#exit 0
			EXIT=1

		elif [ "$J" != "" ]; then

			echo "#[WARN] Analysis configuration file '$J' does NOT exist"

		fi;

	done;

fi;


if (($EXIT)); then
	exit 0;
fi;



# FASTQ/BAM/CRAM/SAM SAMPLE
##################################

if [ ! -z "$FASTQ" ]; then # && [ -e "$FASTQ" ]; then
	# TEST FASTQs if exist

	echo "#[INFO] Check Samples Analysis"

	FASTQ_EXISTS=1

	for F in $(echo "$FASTQ" | tr "," " "); do
		if (($(ls $F $ANALYSIS_DIR/$F 2>/dev/null | wc -w))); then
			echo "#[INFO] Input File '$F' exists"
		else
			echo "#[WARN] Input File '$F' does NOT exist"
			FASTQ_EXISTS=0;
		fi;
	done;

	# Launch FASTQs analmysis if all FASTQs exist
	if (($FASTQ_EXISTS)); then
		#echo -e "#\n# Launch SAMPLE Analysis '$FASTQ'\n#"; # $PARAM
		echo "#[INFO] Start Samples Analysis"
		echo ""
		#echo "$PARAM"
		#CMD="$STARK_FOLDER_BIN/launch.sample.sh $PARAM"
		CMD="$STARK_FOLDER_BIN/STARK.launch $PARAM"
		(($VERBOSE)) && echo "#[INFO] $CMD"
		eval $CMD || exit 1
		# if $CMD; then
		# 	(($VERBOSE)) && echo "#[INFO] CMD OK"
		# else
		# 	exit 1
		# fi;
		echo ""
		EXIT=1
	else
		echo "#[ERROR] Input file(s) error"
		exit 1
	fi;

fi;


# Break analysis
if (($EXIT)); then
	exit 0;
fi;



# RUN (if no FASTQ files)
##############################

#FOLDER_RUN="/STARK/data/DATA/RAW/RUNS,/STARK/runs"
#FOLDER_RUN="/STARK/data/DATA/RAW/RUNS,/STARK/runs"
(($DEBUG)) && echo "#[INFO] RUN folders: $FOLDER_RUN"

if [ ! -z "$RUNS" ]; then

	echo "#[INFO] Test Runs Analysis"

	#RUNS_NAME_ARRAY=($RUNS_NAME)
	#RUN_INDEX=0

	# Check RUN folders
	RUNS_TO_LAUNCH=""
	for RI in $(echo $RUNS | tr "," " "); do
		# echo "R: "$RI
		# echo "RNUM: "$RUN_INDEX
		# echo "RNAME: "${RUNS_NAME_ARRAY[$RUN_INDEX]}
		R=$(echo $RI | awk -F: '{print $1}')
		RUN_NAME=$(echo $RI | awk -F: '{print $2}')
		[ "$RUN_NAME" == "" ] && RUN_NAME=$(basename $R)
		#echo "R=$R RUN_NAME=$RUN_NAME"; #continue;

		#RUN_NAME=${RUNS_NAME_ARRAY[$RUN_INDEX]}
		RUN_PATH=""
		if [ "$R" != "" ]; then
			# test if RUN full PATH
			(($DEBUG)) && echo "#[INFO] Search for RUN '$R' ";
			# Run as a folder path
			[ -d $R ] && RUN_PATH=$R;
			# Run as a TARBALL
			# tar -czvf /path/to/tarball/MYRUN.tar.gz -C /path/to/MYRUN/ .
			if [ -f $R ] && [[ $R =~ .tar.gz$ ]]; then
				R_ID=$RANDOM$RANDOM
				RUN_NAME=$(echo $RUN_NAME | sed s/.tar.gz//)
				(($VERBOSE)) && echo "#[INFO] TARBALL '$(basename $R)' RUN '$RUN_NAME' detected ";
				R_PATH=$TMP_FOLDER_TMP/$R_ID
				mkdir -p $R_PATH
				if tar -xvf $R -C $R_PATH 1>/dev/null 2>/dev/null; then
					(($VERBOSE)) && echo "#[INFO] TARBALL '$(basename $R)' RUN '$RUN_NAME' uncompressed ";
					RUN_PATH=$R_PATH
				fi;
			fi;
			# Run in Input/Runs folder(s) - Search
			[ "$RUN_PATH" == "" ] && \
			for FR in $(echo $FOLDER_RUN | tr "," " "); do
				(($DEBUG)) && echo "#[INFO] Search for RUN '$R' in RUN folder '$FR' ";
				[ -d $FR/$R ] && RUN_PATH="$RUN_PATH$FR/$R" && echo "#[INFO] Input RUN '$R' found in RUN folder '$FR'"
			done;
			# Test multifolder run path (error if found in multiple input/Runs folder(s))
			[ $(echo $RUN_PATH | wc -w) -gt 1 ] && echo "#[ERROR] Input Run '$R' found in multiple RUN folders: $RUN_PATH" && echo "" && exit 1;
			# Add Run to RUNS_TO_LAUNCH
			[ ! -z "$RUN_PATH" ] && RUNS_TO_LAUNCH="$RUNS_TO_LAUNCH$RUN_PATH:$RUN_NAME "
		fi;
		#((RUN_INDEX++))
	done;


	# Launch FASTQs analmysis if all FASTQs exist
	if (($(echo $RUNS_TO_LAUNCH | wc -w))); then

		echo "#[INFO] Input RUN to launch: $RUNS_TO_LAUNCH";
		echo ""

		RI_NUM=0
		for RI in $RUNS_TO_LAUNCH; do

			R=$(echo $RI | awk -F: '{print $1}')
			R_BASENAME=$(basename $R)
			R_NAME=$(echo $RI | awk -F: '{print $2}')
			[ "$R_NAME" == "" ] && R_NAME=$(basename $R)

			SAMPLESHEET_INPUT_RI=${SAMPLESHEET_INPUT_ARRAY[$RI_NUM]}

			TMP_FOLDER_TMP_R=$TMP_FOLDER_TMP/$R$RANDOM
			mkdir -p $TMP_FOLDER_TMP_R

			echo "#[INFO] Start Analysis for RUN '$R_NAME'"

			CMD=""

			# Test if RAW Folder or DEM Folder

			# RUN with analysis JSON
			ANALYSIS_JSON_CONFIG=$(find -L $R -maxdepth 2 -depth -name '*analysis.json' | tac)
			#if (($(find -L $R -name '*analysis.json' | wc -l))); then
			if (($(echo $ANALYSIS_JSON_CONFIG | wc -w))); then

				echo "#[INFO] RUN '$R_NAME' contains configuration files *analysis.json"
				(($VERBOSE)) && echo "#[INFO] RUN '$R_NAME' contains configuration files: "$(echo $ANALYSIS_JSON_CONFIG)

				CMD="$STARK_FOLDER_BIN/STARK $PARAM --analysis="$(echo $ANALYSIS_JSON_CONFIG | tr "\n" "," | tr " " "," | sed s/,$//)
				#CMD=""

			elif [ -s $R/RTAComplete.txt ]; then

				# RUN is a RAW RUN (BCL)
				echo "#[INFO] RUN '$R_NAME' is a RAW folder (BCL) including a file RTAComplete.txt";

				# APP DEM
				APP_DEMULTIPLEXING=$APP

				# Find SampleSheet
				RUN_SAMPLESHEET=""
				# sampleSheet from Input
				[ ! -z $SAMPLESHEET_INPUT_RI ] && [ -e $SAMPLESHEET_INPUT_RI ] && RUN_SAMPLESHEET=$SAMPLESHEET_INPUT_RI
				# sampleSheet within the RUN folder
				[ -z $RUN_SAMPLESHEET ] && RUN_SAMPLESHEET=$R/SampleSheet.csv
				# Echo
				[ ! -e $RUN_SAMPLESHEET ] && echo "#[ERROR] No SampleSheet for RUN '$R'" && exit 1;
				echo "#[INFO] SampleSheet found for RUN '$R': $RUN_SAMPLESHEET";

				# FOUND demultiplexing folder
				if [ "$DEMULTIPLEXING" != "" ]; then
					DEMULTIPLEXING_FOLDER=$DEMULTIPLEXING;
				else
					# Check if in APP
					# ANALYSIS TAG
					ANALYSIS_TAG_SAMPLESHEET=$(grep "^Description" $RUN_SAMPLESHEET | cut -d, -f2- | tr "," "!" | tr " " "!"  | tr -d '\r')
					if [ "$ANALYSIS_TAG" == "" ]; then
						ANALYSIS_TAG=$ANALYSIS_TAG_SAMPLESHEET
					fi;

					# MAIN APP extraction
					MAIN_APP=$(extract_tag "$ANALYSIS_TAG" "APP" | tr " " "+")
					# MAIN PLUGAPP extraction
					MAIN_PLUGAPP=$(extract_tag "$ANALYSIS_TAG" "PLUGAPP" | tr " " "+")
					[ "$MAIN_PLUGAPP" != "" ] && MAIN_APP=$MAIN_APP"+"$MAIN_PLUGAPP
					
					# If OLD APP folder
					if [ "$MAIN_APP" == "" ]; then
						(($VERBOSE)) && echo "#[INFO] Check old format of APP definition";
						# Main application OLD format
						MAIN_APP_OLD=$(grep "Investigator Name" $RUN_SAMPLESHEET | awk -F, '{print $2}' | awk -F"-" '{print $1"."$2}')
						ENV_OLD=$(find_app "$MAIN_APP_OLD" "$STARK_FOLDER_APPS" 2>/dev/null)
						if [ "$ENV_OLD" == "" ]; then
							MAIN_APP_OLD=$(grep "Investigator Name" $RUN_SAMPLESHEET | awk -F, '{print $2}' | awk -F"-" '{print $1}')
							ENV_OLD=$(find_app "$MAIN_APP_OLD" "$STARK_FOLDER_APPS" 2>/dev/null)
						fi;
						[ "$ENV_OLD" != "" ] && MAIN_APP=$MAIN_APP_OLD
					fi;
					
					#[ "$MAIN_APP" == "" ] && MAIN_APP="default"

					if [ "$MAIN_APP" != ""  ]; then
						if ! DEMULTIPLEXING_FOLDER=$(source_app "$MAIN_APP" 2>/dev/null; echo $FOLDER_DEMULTIPLEXING); then
							echo "#[ERROR] Application '$MAIN_APP' error";
							exit 1
						fi
						APP_DEMULTIPLEXING=$MAIN_APP
					else
						# Found APP in samples
						SAMPLE_DESCRIPTION_FIELD=1;
						C=1
						for i in $(cat $RUN_SAMPLESHEET | awk '/\[Data\]/,/\[[^Data]/' | grep "^\[" -v | sed '/^[[:space:]]*$/d' | tr -d '\r' | sed 's/,/\t/g' | head -n 1) ; do
							[ $i == "Description" ] && SAMPLE_DESCRIPTION_FIELD=$C
							C=$(( $C + 1 )) ;
						done

						#FIRST_FOLDER_DEMULTIPLEXING_IN_SAMPLE=""
						for L in $(cat $RUN_SAMPLESHEET | awk '/\[Data\]/,/\[[^Data]/' | grep "^\[" -v | sed '/^[[:space:]]*$/d' | tail -n +2 | tr -d '\r'); do
							SAMPLE_TAG=$(echo $L | cut -d, -f$SAMPLE_DESCRIPTION_FIELD | tr " " "!")
							SAMPLE_APP=$(extract_tag "$SAMPLE_TAG" "APP" | tr " " "+")
							SAMPLE_PLUGAPP=$(extract_tag "$SAMPLE_TAG" "PLUGAPP" | tr " " "+")
							[ "$SAMPLE_PLUGAPP" != "" ] && SAMPLE_APP=$SAMPLE_APP"+"$SAMPLE_PLUGAPP

							if [ "$SAMPLE_APP" != "" ]; then
								if ! SAMPLE_APP_FOLDER_DEMULTIPLEXING=$(source_app "$SAMPLE_APP" 2>/dev/null; echo $FOLDER_DEMULTIPLEXING); then
									echo "#[ERROR] Application '$SAMPLE_APP' error";
									exit 1
								fi
								if [ "$SAMPLE_APP_FOLDER_DEMULTIPLEXING" != "" ]; then
									DEMULTIPLEXING_FOLDER=$SAMPLE_APP_FOLDER_DEMULTIPLEXING
									APP_DEMULTIPLEXING=$SAMPLE_APP
									break;
								fi;
							fi;
						done;

					fi;

				fi;

				[ "$APP" != "" ] && APP_DEMULTIPLEXING=$APP;

				# NO APP detected
				[ "$APP_DEMULTIPLEXING" == "" ] && APP_DEMULTIPLEXING="default"

				# DEMULTIPLEXING_FOLDER
				mkdir -p $DEMULTIPLEXING_FOLDER;
				(($VERBOSE)) && echo "#[INFO] Main Demultiplexing APP: $APP_DEMULTIPLEXING"
				if [ ! -d $DEMULTIPLEXING_FOLDER ]; then
					echo "[ERROR] No demultiplexing folder '$DEMULTIPLEXING_FOLDER'.";
					exit 1;
				else
					echo "#[INFO] Demultiplexing folder for RUN '$R': $DEMULTIPLEXING_FOLDER";
				fi;

				DEM_SAMPLESHEET=$DEMULTIPLEXING_FOLDER/$R_BASENAME/SampleSheet.csv
				DEM_STARKCOMPLETE=$DEMULTIPLEXING_FOLDER/$R_BASENAME/STARKComplete.txt
				#DEM_MANIFEST_LIST=$DEMULTIPLEXING_FOLDER/$R_BASENAME/STARKComplete.txt


				# Test DEM_TODO
				DEM_TODO=0
				# DEM_TODO=1 true If no STARKComplete, no dem at all
				[ -e $R/RTAComplete.txt ] && [ ! -e $DEM_STARKCOMPLETE ] && DEM_TODO=1
				# DEM_TODO=1 true If SampleSheet diff
				[ ! -e $DEM_SAMPLESHEET ] || (( $(diff $RUN_SAMPLESHEET $DEM_SAMPLESHEET | head -n1 | wc -l ) )) && DEM_TODO=1

				# DEM PARAM
				DEM_PARAM=""
				DEM_PARAM="$DEM_PARAM --app=$APP_DEMULTIPLEXING "						# APP
				DEM_PARAM="$DEM_PARAM --run=$R " 										# Run
				DEM_PARAM="$DEM_PARAM --demultiplex_folder=$DEMULTIPLEXING_FOLDER "		# Demultiplexing folder
				DEM_PARAM="$DEM_PARAM --samplesheet=$RUN_SAMPLESHEET "					# SampleSheet
				DEM_PARAM="$DEM_PARAM --threads=$THREADS_INPUT "						# Input threads
				(($VERBOSE)) && DEM_PARAM="$DEM_PARAM --verbose "						# Verbose
				(($DEBUG)) && DEM_PARAM="$DEM_PARAM --debug "							# Debug
				

				# Launch demultiplexing
				(($DEM_TODO)) && echo "#[INFO] Start Demultiplexing for RUN '$R'" && echo "" && \
				$SCRIPT_DIR/STARK.demultiplexing $DEM_PARAM

				[ -e $DEM_STARKCOMPLETE ] && [ -e $DEM_SAMPLESHEET ] && echo "#[INFO] Demultiplexing completed" || exit 1 

				# Change RUN folder from RAW to DEM
				RI="$DEMULTIPLEXING_FOLDER/$R_BASENAME:$R_NAME"

				# Demultiplexin ONLY stop
				if ! (($DEMULTIPLEXING_ONLY)); then
					CMD="$STARK_FOLDER_BIN/STARK $PARAM --run=$RI --demultiplexing=$DEMULTIPLEXING_FOLDER " #$APP_ONE_RUN_CONFIG_FILE_JSON " # --repository=$FOLDER_REPOSITORY
				else
					CMD=""
				fi;
				#CMD=""

				#echo "CMD=$CMD"; exit 0

			#fi;
			elif [ -s $R/SampleSheet.csv ] || [ -s "$SAMPLESHEET_INPUT_RI" ]; then

				echo "#[INFO] RUN '$R_NAME' is a demultiplexed folder (Fastq) including configuration file SampleSheet"

				#RUN_SAMPLESHEET_TEST=$RUN_SAMPLESHEET
				# RUN is a DEM RUN (FASTQ)
				#echo "#[INFO] RUN analysis as a DEM folder (Fastq)";
				CONFIG_FILE_TAB_LIST=""
				#RUN_CONFIG_FILE_LIST=""

				# Find SampleSheet
				RUN_SAMPLESHEET=""
				# sampleSheet from Input
				[ ! -z $SAMPLESHEET_INPUT_RI ] && [ -e $SAMPLESHEET_INPUT_RI ] &&  RUN_SAMPLESHEET=$SAMPLESHEET_INPUT_RI
				# sampleSheet within the RUN folder
				[ -z $RUN_SAMPLESHEET ] && RUN_SAMPLESHEET=$R/SampleSheet.csv
				# Echo
				#(($DEBUG)) && echo "[INFO] [ -f $R/SampleSheet.csv ] || [ -f $SAMPLESHEET_INPUT_RI ]";
				[ ! -e $RUN_SAMPLESHEET ] && echo "#[ERROR] No SampleSheet for RUN '$R'" && exit 1;
				echo "#[INFO] SampleSheet found for RUN '$R': $RUN_SAMPLESHEET";

				# RUN_ANALYSIS_NAME
				RUN_ANALYSIS_NAME=$R_NAME
				[ ! -z $ANALYSIS_NAME ] && RUN_ANALYSIS_NAME=$ANALYSIS_NAME
				#echo " R_NAME=$R_NAME ANALYSIS_NAME=$ANALYSIS_NAME RUN_ANALYSIS_NAME=$RUN_ANALYSIS_NAME"; exit 0;


				ANALYSIS_TAG_SAMPLESHEET=$(grep "^Description" $RUN_SAMPLESHEET | cut -d, -f2- | tr "," "!" | tr " " "!"  | tr -d '\r')
				if [ "$ANALYSIS_TAG" == "" ]; then
					ANALYSIS_TAG=$ANALYSIS_TAG_SAMPLESHEET
				fi;

				# NEW APP extraction format
				MAIN_APP=$(extract_tag "$ANALYSIS_TAG" "APP" | tr " " "+")

				# NEW PLUGAPP extration format
				MAIN_PLUGAPP=$(extract_tag "$ANALYSIS_TAG" "PLUGAPP" | tr " " "+")
				[ "$MAIN_PLUGAPP" != "" ] && MAIN_APP=$MAIN_APP"+"$MAIN_PLUGAPP

				(($DEBUG)) && echo "MAIN_APP=$MAIN_APP"
				(($DEBUG)) && echo "MAIN_PLUGAPP=$MAIN_PLUGAPP"


				# If OLD APP folder
				if [ "$MAIN_APP" == "" ]; then

					# Main application OLD format
					MAIN_APP_OLD=$(grep "Investigator Name" $RUN_SAMPLESHEET | awk -F, '{print $2}' | awk -F"-" '{print $1"."$2}')
					ENV_OLD=$(find_app "$MAIN_APP_OLD" "$STARK_FOLDER_APPS" 2>/dev/null)
					if [ "$ENV_OLD" == "" ]; then
						MAIN_APP_OLD=$(grep "Investigator Name" $RUN_SAMPLESHEET | awk -F, '{print $2}' | awk -F"-" '{print $1}')
						ENV_OLD=$(find_app "$MAIN_APP_OLD" "$STARK_FOLDER_APPS" 2>/dev/null)
					fi;
					[ "$ENV_OLD" != "" ] && MAIN_APP=$MAIN_APP_OLD
				fi;

				[ "$MAIN_APP" == "" ] && MAIN_APP="default"

				(($VERBOSE)) && echo "#[INFO] Main APP: $MAIN_APP"

				# LIST of samples
				SAMPLE_LIST_IN_SAMPLESHEET=$(cat $RUN_SAMPLESHEET | awk '/\[Data\]/,/\[[^Data]/' | grep "^\[" -v | sed '/^[[:space:]]*$/d' | tail -n +2 | cut -d, -f1 | tr "\n" " ")
				(($VERBOSE)) && echo "#[INFO] List of samples: $SAMPLE_LIST_IN_SAMPLESHEET";

				SAMPLE_ID_FIELD=1;
				SAMPLE_NAME_FIELD=1;
				MANIFEST_INDEX_FIELD=2;
				SAMPLE_DESCRIPTION_FIELD=3;
				SAMPLE_PROJECT_FIELD=3;
				# SAMPLE_ID_FIELD=0;
				# SAMPLE_NAME_FIELD=0;
				# MANIFEST_INDEX_FIELD=0;
				# SAMPLE_DESCRIPTION_FIELD=0;
				# SAMPLE_PROJECT_FIELD=0;

				C=1
				#for i in $(awk '/Data/{y=1;next}y' $DEM_SAMPLESHEET | tr -d '\r' | sed 's/,/\t/g' | head -n 1) ; do
				for i in $(cat $RUN_SAMPLESHEET | awk '/\[Data\]/,/\[[^Data]/' | grep "^\[" -v | sed '/^[[:space:]]*$/d' | tr -d '\r' | sed 's/,/\t/g' | head -n 1) ; do
					[ $i == "Sample_ID" ] && SAMPLE_ID_FIELD=$C
					[ $i == "Sample_Name" ] && SAMPLE_NAME_FIELD=$C
					[ $i == "Manifest" ] && MANIFEST_INDEX_FIELD=$C
					[ $i == "Description" ] && SAMPLE_DESCRIPTION_FIELD=$C
					[ $i == "Sample_Project" ] && SAMPLE_PROJECT_FIELD=$C
					C=$(( $C + 1 )) ;
				done

				# Create config
				APP_LIST=""
				for L in $(cat $RUN_SAMPLESHEET | awk '/\[Data\]/,/\[[^Data]/' | grep "^\[" -v | sed '/^[[:space:]]*$/d' | tail -n +2 | tr -d '\r'); do
					# SAMPLE ID/NAME
					# SAMPLE_ID=$(echo $L | cut -d, -f1)
					# SAMPLE_NAME=$(echo $L | cut -d, -f2)
					SAMPLE_ID=$(echo $L | cut -d, -f$SAMPLE_ID_FIELD)
					SAMPLE_NAME=$(echo $L | cut -d, -f$SAMPLE_NAME_FIELD)
					[ -z $SAMPLE_NAME ] && SAMPLE_NAME=$SAMPLE_ID

					if [ "$SAMPLE_LIST" == "" ] || $(list_include_item "$SAMPLE_LIST" "$SAMPLE_NAME"); then #
						# SAMPLE FASTQ R1/R2

						# Reads mapping
						if [ "$STARK_DEMULTIPLEXING_READS_MAPPING" == "" ]; then
							STARK_DEMULTIPLEXING_READS_MAPPING="R1 I1 I2 R2";
						fi;
						# $(echo $READS_MAPPING | tr "," " " | cut -d' ' -f1)

						# Patterns for Fastq R1
						FASTQ_PATTERN_ILLUMINA='_S*_'$(echo $STARK_DEMULTIPLEXING_READS_MAPPING | tr "," " " | cut -d' ' -f1)'_*.fastq.gz';
						FASTQ_PATTERN_GENERIC='.*'$(echo $STARK_DEMULTIPLEXING_READS_MAPPING | tr "," " " | cut -d' ' -f1)'*.fastq.gz';

						# Check Fastq R1 with pattern Illumina
						# SAMPLE_FASTQ_R1_PATTERN=$SAMPLE_NAME'_S*_R1_*.fastq.gz'
						# SAMPLE_FASTQ_R2_PATTERN=$SAMPLE_NAME'_S*_R2_*.fastq.gz'
						# SAMPLE_FASTQ_I1_PATTERN=$SAMPLE_NAME'_S*_I1_*.fastq.gz'
						# SAMPLE_FASTQ_I2_PATTERN=$SAMPLE_NAME'_S*_I2_*.fastq.gz'
						SAMPLE_FASTQ_R1_PATTERN=$SAMPLE_NAME'_S*_'$(echo $STARK_DEMULTIPLEXING_READS_MAPPING | tr "," " " | cut -d' ' -f1)'_*.fastq.gz'
						SAMPLE_FASTQ_R2_PATTERN=$SAMPLE_NAME'_S*_'$(echo $STARK_DEMULTIPLEXING_READS_MAPPING | tr "," " " | cut -d' ' -f4)'_*.fastq.gz'
						SAMPLE_FASTQ_I1_PATTERN=$SAMPLE_NAME'_S*_'$(echo $STARK_DEMULTIPLEXING_READS_MAPPING | tr "," " " | cut -d' ' -f2)'_*.fastq.gz'
						SAMPLE_FASTQ_I2_PATTERN=$SAMPLE_NAME'_S*_'$(echo $STARK_DEMULTIPLEXING_READS_MAPPING | tr "," " " | cut -d' ' -f3)'_*.fastq.gz'
						SAMPLE_FASTQ_R1=$(find -L $R -name "$SAMPLE_FASTQ_R1_PATTERN")
						if [ "$SAMPLE_FASTQ_R1" == "" ]; then
							(($VERBOSE)) && echo "[WARN] No Reads for sample '$SAMPLE_NAME' with pattern '$FASTQ_PATTERN_ILLUMINA'. Check with generic parrtern '$FASTQ_PATTERN_GENERIC'";
							SAMPLE_FASTQ_R1_PATTERN=$SAMPLE_NAME'.*'$(echo $STARK_DEMULTIPLEXING_READS_MAPPING | tr "," " " | cut -d' ' -f1)'*.fastq.gz'
							SAMPLE_FASTQ_R2_PATTERN=$SAMPLE_NAME'.*'$(echo $STARK_DEMULTIPLEXING_READS_MAPPING | tr "," " " | cut -d' ' -f4)'*.fastq.gz'
							SAMPLE_FASTQ_I1_PATTERN=$SAMPLE_NAME'.*'$(echo $STARK_DEMULTIPLEXING_READS_MAPPING | tr "," " " | cut -d' ' -f2)'*.fastq.gz'
							SAMPLE_FASTQ_I2_PATTERN=$SAMPLE_NAME'.*'$(echo $STARK_DEMULTIPLEXING_READS_MAPPING | tr "," " " | cut -d' ' -f3)'*.fastq.gz'
							SAMPLE_FASTQ_R1=$(find -L $R -name "$SAMPLE_FASTQ_R1_PATTERN")
						fi;
						[ "$SAMPLE_FASTQ_R1" == "" ] && echo "[ERROR] No Reads for sample '$SAMPLE_NAME'" && exit 1;

						# Fastq others
						SAMPLE_FASTQ_R2=$(find -L $R -name "$SAMPLE_FASTQ_R2_PATTERN")
						SAMPLE_FASTQ_I1=$(find -L $R -name "$SAMPLE_FASTQ_I1_PATTERN")
						SAMPLE_FASTQ_I2=$(find -L $R -name "$SAMPLE_FASTQ_I2_PATTERN")
						# APP
						#SAMPLE_APP="$(echo $L | cut -d, -f$SAMPLE_PROJECT_FIELD | awk -F[$TAG_DELIMITER ] '{print $1}' | tr " " "+" | tr "," "+")"
						# NEW APP extraction format
						SAMPLE_DESCRIPTION_FIELD_VALUE=$(echo $L | cut -d, -f$SAMPLE_DESCRIPTION_FIELD)
						SAMPLE_TAG=$(echo $L | cut -d, -f$SAMPLE_DESCRIPTION_FIELD | tr " " "!")"!"
						SAMPLE_APP=$(extract_tag "$SAMPLE_DESCRIPTION_FIELD_VALUE" "APP" | tr " " "+")
						[ -z "$SAMPLE_APP" ] && SAMPLE_APP="$MAIN_APP"

						SAMPLE_PLUGAPP=$(extract_tag "$SAMPLE_DESCRIPTION_FIELD_VALUE" "PLUGAPP" | tr " " "+")
						[ "$SAMPLE_PLUGAPP" != "" ] && SAMPLE_APP=$SAMPLE_APP"+"$SAMPLE_PLUGAPP
						(($DEBUG)) && echo "SAMPLE_APP=$SAMPLE_APP"
						(($DEBUG)) && echo "SAMPLE_PLUGAPP=$SAMPLE_PLUGAPP"

						[ ! -z $APP ] && SAMPLE_APP=$(echo $APP | tr " " "+" | tr "," "+") && echo "#[INFO] APP forced '$SAMPLE_APP'" # Force APP if in parameters


						if ! APP_INFOS=$(source_app "$SAMPLE_APP" "$STARK_FOLDER_APPS/"; echo -e "$APP_GROUP\t$APP_PROJECT"); then
							echo "#[ERROR] Application '$SAMPLE_APP' error";
							exit 1
						fi
						SAMPLE_APP_GROUP=$(echo -e "$APP_INFOS" | awk -F'\t' '{print $1}')
						SAMPLE_APP_PROJECT=$(echo -e "$APP_INFOS" | awk -F'\t' '{print $2}')

						CONFIG_FILE_TAB=$TMP_FOLDER_TMP_R/$SAMPLE_APP.config.tab
						CONFIG_FILE_TAB_LIST=$(echo "$CONFIG_FILE_TAB_LIST$CONFIG_FILE_TAB " | tr " " "\n" | sort -u | tr "\n" " ")

						# Manifest Name
						MANIFEST_ID=$(echo $L | cut -d, -f$MANIFEST_INDEX_FIELD)
						MANIFEST_FILENAME=$(cat $RUN_SAMPLESHEET | awk '/\[Manifests\]/,/\[[^Manifest]/' | grep "^\[" -v | sed '/^[[:space:]]*$/d' | tr -d '\r' | awk -F, -v MANIFEST_ID=$MANIFEST_ID '$1==MANIFEST_ID{print $2}')


						if [ "$MANIFEST_FILENAME" == "" ]; then

							MANIFEST_FILE=""
							MANIFEST_GENES_FILE=""
							MANIFEST_TRANSCRIPTS_FILE=""

						else

							# Manifest File
							if [ -f $R/$MANIFEST_FILENAME ]; then
								MANIFEST_FILE=$R/$MANIFEST_FILENAME && (($VERBOSE)) && echo "#[INFO] Manifest file found for sample '$SAMPLE_NAME': $MANIFEST_FILE"
							elif [ -f $FOLDER_MANIFEST/$MANIFEST_FILENAME ]; then
								MANIFEST_FILE=$FOLDER_MANIFEST/$MANIFEST_FILENAME && (($VERBOSE)) && echo "#[INFO] Manifest file found for sample '$SAMPLE_NAME': $MANIFEST_FILE"
							else
								MANIFEST_FILE=""
								#echo "#[WARN] Manifest file NOT found"
								echo "#[ERROR] Manifest file NOT found: $MANIFEST_FILENAME"
								exit 1
							fi;

							# Genes File
							if (($(ls $R/$MANIFEST_FILENAME*.genes 2>/dev/null | wc -l))); then
								MANIFEST_GENES_FILE=$(ls $R/$MANIFEST_FILENAME*.genes 2>/dev/null | tr "\n" "+" | sed "s/+$//" | sed "s/^+//") && (($VERBOSE)) &&  echo "#[INFO] Manifest Genes file found for sample '$SAMPLE_NAME': $MANIFEST_GENES_FILE"
							elif (($(ls $FOLDER_MANIFEST/$MANIFEST_FILENAME*.genes 2>/dev/null | wc -l))); then
								MANIFEST_GENES_FILE=$(ls $FOLDER_MANIFEST/$MANIFEST_FILENAME*.genes 2>/dev/null | tr "\n" "+" | sed "s/+$//" | sed "s/^+//") && (($VERBOSE)) &&  echo "#[INFO] Manifest Genes file found for sample '$SAMPLE_NAME': $MANIFEST_GENES_FILE"
							else
								MANIFEST_GENES_FILE=""
								(($VERBOSE)) && echo "#[INFO] Manifest Genes file NOT found"
							fi;
							MANIFEST_GENES_FILE=$(echo $MANIFEST_GENES_FILE | sed "s/+$//")

							# Transcripts File
							#MANIFEST_TRANSCRIPTS_FILE=$(ls "$R/$MANIFEST_FILENAME*.transcripts" 2>/dev/null | tr "\n" "+") && (($VERBOSE)) &&  echo "#[INFO] Manifest Transcripts file found for sample '$SAMPLE_NAME': $MANIFEST_TRANSCRIPTS_FILE"
							if (($(ls $R/$MANIFEST_FILENAME*.transcripts 2>/dev/null | wc -l))); then
								MANIFEST_TRANSCRIPTS_FILE=$(ls $R/$MANIFEST_FILENAME*.transcripts 2>/dev/null | tr "\n" "+" | sed "s/+$//" | sed "s/^+//") && (($VERBOSE)) &&  echo "#[INFO] Manifest Transcripts file found for sample '$SAMPLE_NAME': $MANIFEST_TRANSCRIPTS_FILE"
							elif (($(ls $FOLDER_MANIFEST/$MANIFEST_FILENAME*.transcripts 2>/dev/null | wc -l))); then
								MANIFEST_TRANSCRIPTS_FILE=$(ls $FOLDER_MANIFEST/$MANIFEST_FILENAME*.transcripts 2>/dev/null | tr "\n" "+" | sed "s/+$//" | sed "s/^+//") && (($VERBOSE)) &&  echo "#[INFO] Manifest Transcripts file found for sample '$SAMPLE_NAME': $MANIFEST_TRANSCRIPTS_FILE"
							else
								MANIFEST_TRANSCRIPTS_FILE=""
								(($VERBOSE)) && echo "#[WARN] Manifest Transcripts file NOT found"
							fi;
							MANIFEST_TRANSCRIPTS_FILE=$(echo $MANIFEST_TRANSCRIPTS_FILE | sed "s/+$//")

						fi;

						# PEDIGREE File
						PEDIGREE_FILE=
						if [ "$PEDIGREE_INPUT" != "" ] && [ -f $R/$PEDIGREE_INPUT ]; then
							PEDIGREE_FILE=$R/$PEDIGREE_INPUT && (($VERBOSE)) && echo "#[INFO] Pedigree file found for sample '$SAMPLE_NAME': $PEDIGREE_FILE"
						elif [ -f $FOLDER_PEDIGREE/$SAMPLE_APP_GROUP.$SAMPLE_APP_PROJECT.ped ]; then
							PEDIGREE_FILE=$FOLDER_PEDIGREE/$SAMPLE_APP_GROUP.$SAMPLE_APP_PROJECT.ped && (($VERBOSE)) && echo "#[INFO] Manifest file found for sample '$SAMPLE_NAME': $PEDIGREE_FILE"
						else
							PEDIGREE_FILE=""
							#echo "#[WARN] Manifest file NOT found"
							echo "#[WARN] Pediree file NOT found"
						fi;
						
						# echo "FOLDER_PEDIGREE=$FOLDER_PEDIGREE"
						# echo "SAMPLE_APP_GROUP=$SAMPLE_APP_GROUP"
						# echo "SAMPLE_APP_PROJECT=$SAMPLE_APP_PROJECT"
						# cat $PEDIGREE_FILE
						# exit 0

						# OTHER FILES
						OTHER_FILES="";
						if [ -d $R/Stats ]; then
							(($DEBUG)) && echo "#[INFO] $R/Stats added to Others Files"
							OTHER_FILES="$R/Stats:$SAMPLE_NAME.demultiplexing/Stats+"
						else
							(($DEBUG)) && echo "#[WARN] $R/Stats added to Others Files"
						fi;
						if [ -d $R/Reports ]; then
							(($DEBUG)) && echo "#[INFO] $R/Reports added to Others Files"
							OTHER_FILES="$R/Reports:$SAMPLE_NAME.demultiplexing/Reports+"
						else
							(($DEBUG)) && echo "#[WARN] $R/Stats added to Others Files"
						fi;
						#echo "OTHER_FILES=$OTHER_FILES"
						#exit 0

						#OTHER_FILES="$R/Stats:$SAMPLE_NAME.demultiplexing/Stats+$R/Reports:$SAMPLE_NAME.demultiplexing/Reports"

						#	echo "SAMPLE_LIST '$SAMPLE_NAME' found in the list '$SAMPLE_LIST'"
						APP_LIST=$(echo "$APP_LIST $SAMPLE_APP" | tr " " "\n" | sort -u | tr "\n" " ")
						echo "$SAMPLE_APP,$SAMPLE_ID,$SAMPLE_NAME,$SAMPLE_FASTQ_R1,$SAMPLE_FASTQ_R2,$SAMPLE_FASTQ_I1,$SAMPLE_FASTQ_I2,$MANIFEST_FILE,$MANIFEST_GENES_FILE,$MANIFEST_TRANSCRIPTS_FILE,$PEDIGREE_FILE,$SAMPLE_TAG,$OTHER_FILES" >> $CONFIG_FILE_TAB
						#echo "$SAMPLE_APP,$SAMPLE_ID,$SAMPLE_NAME,$SAMPLE_FASTQ_R1,$SAMPLE_FASTQ_R2,$SAMPLE_FASTQ_I1,$SAMPLE_FASTQ_I2,$MANIFEST_FILE,$MANIFEST_GENES_FILE,$MANIFEST_TRANSCRIPTS_FILE,$SAMPLE_TAG,$OTHER_FILES >> $CONFIG_FILE_TAB"
					fi;

				done;

				#(($DEBUG)) && cat $CONFIG_FILE_TAB | column -t
				#(($DEBUG)) && ls -l  $TMP_FOLDER_TMP_R/*.config.tab
				#(($DEBUG)) && cat $TMP_FOLDER_TMP_R/*.config.tab | sort -u
				(($DEBUG)) && for T in $TMP_FOLDER_TMP_R/*.config.tab; do echo ""; echo $T; cat $T | sort -u; done;

				(($DEBUG)) && echo "#[INFO] CONFIG_FILE_TAB_LIST=$CONFIG_FILE_TAB_LIST"; #exit 0;

				(($DEBUG)) && for APP_ONE_RUN_CONFIG_FILE in $(echo $CONFIG_FILE_TAB_LIST | tr " " "\n"); do cat $APP_ONE_RUN_CONFIG_FILE; done;

				# Create config
				ANALYSIS_FILES=""


				#for APP_ONE_RUN_CONFIG_FILE in $R/*.config.tab; do
				for APP_ONE_RUN_CONFIG_FILE in $(echo $CONFIG_FILE_TAB_LIST | tr " " "\n"); do
					#echo "APP_ONE_RUN_CONFIG_FILE=$APP_ONE_RUN_CONFIG_FILE"
					APP_ONE=$(basename $APP_ONE_RUN_CONFIG_FILE | sed s/.config.tab//)


					SAMPLE_TEST=$(cat $APP_ONE_RUN_CONFIG_FILE | sort -u | awk -F"," -v APP=$APP_ONE '$1==APP{print $3}' | tr '\n' ',' | sed s/,$//)

					if ! APP_INFOS=$(source_app "$APP_ONE" "$STARK_FOLDER_APPS/"; echo -e "$APP_RELEASE\t$APP_DESCRIPTION\t$APP_GROUP\t$APP_PROJECT\t$FOLDER_RUN\t$FOLDER_RESULTS\t$FOLDER_REPOSITORY\t$FOLDER_ARCHIVES\t$FOLDER_FAVORITES\t$PIPELINES\t$POST_ALIGNMENT_STEPS\t$HOWARD_ANNOTATION_REPORT"); then
						echo "#[ERROR] Application '$APP_ONE' error";
						exit 1
					fi
					#APP_RELEASE_ONE=$(echo -e "$APP_INFOS" | awk -F'\t' '{print $1}')
					#APP_DESCRIPTION_ONE=$(echo -e "$APP_INFOS" | awk -F'\t' '{print $2}')
					#APP_GROUP_ONE=$(echo -e "$APP_INFOS" | awk -F'\t' '{print $3}')
					#APP_PROJECT_ONE=$(echo -e "$APP_INFOS" | awk -F'\t' '{print $4}')
					#FOLDER_RUN_ONE=$(echo -e "$APP_INFOS" | awk -F'\t' '{print $5}')
					#FOLDER_RESULTS_ONE=$(echo -e "$APP_INFOS" | awk -F'\t' '{print $6}')
					FOLDER_REPOSITORY_ONE=$(echo -e "$APP_INFOS" | awk -F'\t' '{print $7}')
					FOLDER_ARCHIVES_ONE=$(echo -e "$APP_INFOS" | awk -F'\t' '{print $8}')
					FOLDER_FAVORITES_ONE=$(echo -e "$APP_INFOS" | awk -F'\t' '{print $9}')
					#PIPELINES_ONE=$(echo -e "$APP_INFOS" | awk -F'\t' '{print $10}')
					#POST_ALIGNMENT_STEPS_ONE=$(echo -e "$APP_INFOS" | awk -F'\t' '{print $11}')
					#HOWARD_ANNOTATION_REPORT_ONE=$(echo -e "$APP_INFOS" | awk -F'\t' '{print $12}')

					#echo APP_ONE=$APP_ONE
					#echo APP_INFOS=$APP_INFOS
					#echo FOLDER_REPOSITORY_ONE=$FOLDER_REPOSITORY_ONE
					#exit 0

					#echo "SAMPLE_TEST="$SAMPLE_TEST
					#echo "APP_ONE=$APP_ONE"
					#RUN_CONFIG_FILE=$R/$APP_ONE.analysis.json
					RUN_CONFIG_FILE=$TMP_FOLDER_TMP_R/$APP_ONE.analysis.json
					#RUN_CONFIG_FILE_LIST="$RUN_CONFIG_FILE_LIST$RUN_CONFIG_FILE"
					> $RUN_CONFIG_FILE
					echo "{" >> $RUN_CONFIG_FILE
					# APP
					#echo "\"app\":\"$APP_ONE\"," >> $RUN_CONFIG_FILE
					echo "\"app\":\"$APP_ONE\"," >> $RUN_CONFIG_FILE
					# RUN
					echo "\"analysis_name\":\"$RUN_ANALYSIS_NAME\"," >> $RUN_CONFIG_FILE
					# ANALYSIS TAG
					#echo ${ANALYSIS_TAG}; exit 0;
					echo "\"analysis_tag\":\"${ANALYSIS_TAG}\"," >> $RUN_CONFIG_FILE
					# SAMPLE NAME
					echo "\"sample\":\""$(cat $APP_ONE_RUN_CONFIG_FILE | sort -u | awk -F"," -v APP=$APP_ONE '$1==APP{print $3}' | tr '\n' ',' | sed s/,$//)"\"," >> $RUN_CONFIG_FILE
					# SAMPLE NAME
					echo "\"sample_tag\":\""$(cat $APP_ONE_RUN_CONFIG_FILE | sort -u | awk -F"," -v APP=$APP_ONE '$1==APP{print $12}' | tr '\n' ',' | sed s/,$//)"\"," >> $RUN_CONFIG_FILE
					# FASTQ R1/R2
					echo "\"reads1\":\""$(cat $APP_ONE_RUN_CONFIG_FILE | sort -u | awk -F"," -v APP=$APP_ONE '$1==APP{print $4}' | tr '\n' ',' | sed s/,$//)"\"," >> $RUN_CONFIG_FILE
					echo "\"reads2\":\""$(cat $APP_ONE_RUN_CONFIG_FILE | sort -u | awk -F"," -v APP=$APP_ONE '$1==APP{print $5}' | tr '\n' ',' | sed s/,$//)"\"," >> $RUN_CONFIG_FILE
					echo "\"index1\":\""$(cat $APP_ONE_RUN_CONFIG_FILE | sort -u | awk -F"," -v APP=$APP_ONE '$1==APP{print $6}' | tr '\n' ',' | sed s/,$//)"\"," >> $RUN_CONFIG_FILE
					echo "\"index2\":\""$(cat $APP_ONE_RUN_CONFIG_FILE | sort -u | awk -F"," -v APP=$APP_ONE '$1==APP{print $7}' | tr '\n' ',' | sed s/,$//)"\"," >> $RUN_CONFIG_FILE
					echo "\"other_files\":\""$(cat $APP_ONE_RUN_CONFIG_FILE | sort -u| awk -F"," -v APP=$APP_ONE '$1==APP{print $13}' | tr '\n' ',' | sed s/,$//)"\"," >> $RUN_CONFIG_FILE
					# MANIFEST
					echo "\"design\":\""$(cat $APP_ONE_RUN_CONFIG_FILE | sort -u| awk -F"," -v APP=$APP_ONE '$1==APP{print $8}' | tr '\n' ',' | sed s/,$//)"\"," >> $RUN_CONFIG_FILE
					# GENES
					echo "\"genes\":\""$(cat $APP_ONE_RUN_CONFIG_FILE | sort -u| awk -F"," -v APP=$APP_ONE '$1==APP{print $9}' | tr '\n' ',' | sed s/,$//)"\"," >> $RUN_CONFIG_FILE
					# TRANSCRIPTS
					echo "\"transcripts\":\""$(cat $APP_ONE_RUN_CONFIG_FILE | sort -u| awk -F"," -v APP=$APP_ONE '$1==APP{print $10}' | tr '\n' ',' | sed s/,$//)"\"," >> $RUN_CONFIG_FILE
					# PEDIGREE
					echo "\"pedigree\":\""$(cat $APP_ONE_RUN_CONFIG_FILE | sort -u| awk -F"," -v APP=$APP_ONE '$1==APP{print $11}' | tr '\n' ',' | sed s/,$//)"\"," >> $RUN_CONFIG_FILE

					# REPOSITORY
					echo "\"repository\":\"$FOLDER_REPOSITORY_ONE\"," >> $RUN_CONFIG_FILE
					# ARCHIVE
					echo "\"archives\":\"$FOLDER_ARCHIVES_ONE\"," >> $RUN_CONFIG_FILE
					# FAVORITES
					echo "\"favorites\":\"$FOLDER_FAVORITES_ONE\"," >> $RUN_CONFIG_FILE

					# SAMPLESHEET
					echo "\"samplesheet\":\"$RUN_SAMPLESHEET\"" >> $RUN_CONFIG_FILE

					#echo "\"comment\":\"Analysis for APP $APP_ONE\"" >> $RUN_CONFIG_FILE
					echo "}" >> $RUN_CONFIG_FILE

					(($DEBUG)) && echo "#[INFO] " && cat $RUN_CONFIG_FILE
					(($DEBUG)) && echo "#[INFO] " && $PYTHON2 $STARK_FOLDER_BIN/json_to_options.py $RUN_CONFIG_FILE

					ANALYSIS_FILES="$ANALYSIS_FILES,$RUN_CONFIG_FILE"

				done;

				ANALYSIS_FILES=$(echo $ANALYSIS_FILES | sed s/^,//)

				if [ "$ANALYSIS_FILES" != "" ]; then
					CMD="$STARK_FOLDER_BIN/STARK $PARAM --analysis=$ANALYSIS_FILES " #$APP_ONE_RUN_CONFIG_FILE_JSON " # --repository=$FOLDER_REPOSITORY
				else
					echo "#[ERROR] No Samples to analyse " && exit 1;
				fi;
				#CMD=""
				#echo "CMD=$CMD"; exit 0

			elif (($(find -L $R -name '*R1*fastq.gz' -or -name '*.sam' -or -name '*.bam' -or -name '*.cram' | wc -l))); then

				echo "#[INFO] RUN '$R_NAME' is a samples folder (Fastq/bam/cram)"

				FASTQ_R1=""
				FASTQ_R2=""

				(($VERBOSE)) && echo "#[INFO] Search FASTQ Read1 (*R1*fastq.gz)"
				for R1 in $(find -L $R -name '*R1*fastq.gz'); do
					(($VERBOSE)) && echo "#[INFO] FASTQ Read1 found: $R1";
					# find R2
					#echo $R1 | sed s/[._-]R1[._-]/R2/gi

					(($VERBOSE)) && echo "#[INFO] Search for *R2*fastq.gz"
					re='(.*[._-])R1([._-].*)'
					#if [[ $R1 =~ $re ]]; then
					R2=""
					if [[ $R1 =~ $re ]]; then
						R2=${BASH_REMATCH[1]}"R2"${BASH_REMATCH[2]}
				  	fi;
			  		[ "$R2" != "" ] && [ -f $R2 ] && (($VERBOSE)) && echo "#[INFO] Corresponding FASTQ Read2 found: $R2"
					#echo $R2

					FASTQ_R1="$FASTQ_R1$R1,"
					[ "$R2" != "" ] && [ -f $R2 ] && FASTQ_R2="$FASTQ_R2$R2"
					FASTQ_R2="$FASTQ_R2,"

				done;
				#FASTQ_R1=$(echo $FASTQ_R1 | sed s/,$//)
				#FASTQ_R2=$(echo $FASTQ_R2 | sed s/,$//)
				(($DEBUG)) && echo "#[INFO] List FASTQ_R1: $FASTQ_R1"
				(($DEBUG)) && echo "#[INFO] List FASTQ_R2: $FASTQ_R2"


				(($VERBOSE)) && echo "#[INFO] Find *sam/*bam.*cram"

				for R1 in $(find -L $R -name '*.sam' -or -name '*.bam' -or -name '*.cram'); do
					(($VERBOSE)) && echo "#[INFO] SAM/BAM/CRAM found: $R1";

					FASTQ_R1="$FASTQ_R1$R1,"
					FASTQ_R2="$FASTQ_R2,"

				done;
				FASTQ_R1=$(echo $FASTQ_R1 | sed s/,$//)
				FASTQ_R2=$(echo $FASTQ_R2 | sed s/,$//)
				(($DEBUG)) && echo "#[INFO] List FASTQ_R1: $FASTQ_R1"
				(($DEBUG)) && echo "#[INFO] List FASTQ_R2: $FASTQ_R2"

				CMD="$STARK_FOLDER_BIN/STARK $PARAM --reads=$FASTQ_R1 --fastq_R2=$FASTQ_R2 "
				#CMD=""

			fi

			((RI_NUM++))

			(($DEBUG)) && echo "[INFO] CMD=$CMD"
			[ "$CMD" != "" ] && eval $CMD --no_header || exit 1
			# if [ "$CMD" != "" ]; then
			# 	if $CMD --no_header; then
			# 		(($DEBUG)) && echo "#[INFO] CMD OK"
			# 	else
			# 		exit 1
			# 	fi;
			# fi;


			echo ""

		done;


		EXIT=1

	else

		echo "#[WARN] NO Input RUN to launch";

	fi;



	#exit 0;
fi;

# Break analysis
if (($EXIT)); then
	exit 0;
fi;


# If nothing...
##################

echo ""

usage;

exit 0;
