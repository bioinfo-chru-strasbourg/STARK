#########
# STARK #
#########
# Usage: docker-compose up

version: '3'

# SERVICES
##########

services:

    # STARK IMAGES
    ##############

    # STARK BASE IMAGE
    # stark-base:
    #     image: ${DOCKER_STARK_IMAGE_BASE}
    #     build:
    #         context: ${DOCKER_STARK_CONTEXT}
    #         #dockerfile: base.Dockerfile
    #         dockerfile: Dockerfile
    #         args:
    #             - REMOVE_SOURCES=1
    #             - REPO=${DOCKER_STARK_BUILD_REPO_URL}
    #     container_name: STARK-base
    #     env_file:
    #         - .env
    #     networks:
    #         - stark

    # STARK IMAGE
    stark-source:
        image: ${DOCKER_STARK_SOURCES_IMAGE}
        build:
            context: ${DOCKER_STARK_CONTEXT}
            dockerfile: Dockerfile
            args:
                #- DOCKER_STARK_IMAGE_BASE=${DOCKER_STARK_IMAGE_BASE}
                - REMOVE_SOURCES=0
                - REPO_SOURCES=${DOCKER_STARK_BUILD_SOURCES_URL}
        container_name: STARK-sources
        command: --help
        env_file:
            - .env
        networks:
            - stark

    # STARK IMAGE
    stark:
        image: ${DOCKER_STARK_IMAGE}
        build:
            context: ${DOCKER_STARK_CONTEXT}
            dockerfile: Dockerfile
            args:
                #- DOCKER_STARK_IMAGE_BASE=${DOCKER_STARK_IMAGE_BASE}
                - REMOVE_SOURCES=1
                - REPO_SOURCES=${DOCKER_STARK_BUILD_SOURCES_URL}
        container_name: STARK
        command: --help
        env_file:
            - .env
        networks:
            - stark

    # STARK DATABASES POPULATION
    stark-databases:
        image: ${DOCKER_STARK_IMAGE}
        entrypoint: /tool/bin/get_databases.sh
        command: --build --threads=${DOCKER_STARK_GET_DATABASES_THREADS} --additional_annotations=${DOCKER_STARK_GET_DATABASES_ADDITIONAL_ANNOTATIONS}
        container_name: STARK-databases
        volumes:
            - databases:/STARK/databases:rw
        networks:
            - stark


    # SERVICES
    ##########


    # STARK SERVICE DATA
    stark-service-data:
        image: ${DOCKER_STARK_SERVICE_DATA_IMAGE}
        build:
            context: ${DOCKER_STARK_SERVICE_DATA_CONTEXT}
            dockerfile: Dockerfile
        container_name: ${DOCKER_STARK_SERVICE_DATA_CONTAINER_NAME}
        restart: always
        env_file:
            - .env
        ports:
            - ${DOCKER_STARK_SERVICE_PORT_PATTERN}${DOCKER_STARK_SERVICE_DATA_PORT}:${DOCKER_STARK_SERVICE_DATA_PORT_INNER}
        volumes:
            # Data folders available (need to be coherent with other services)
            - input:${DOCKER_STARK_SERVICE_DATA_INNER_FOLDER_DATA}/${DOCKER_STARK_SERVICE_DATA_SUBFOLDER_INPUTS}/Input:ro
            - repository:${DOCKER_STARK_SERVICE_DATA_INNER_FOLDER_DATA}/${DOCKER_STARK_SERVICE_DATA_SUBFOLDER_REPOSITORIES}/Repository:ro
            - archive:${DOCKER_STARK_SERVICE_DATA_INNER_FOLDER_DATA}/${DOCKER_STARK_SERVICE_DATA_SUBFOLDER_REPOSITORIES}/Archive:ro
            - sources:${DOCKER_STARK_SERVICE_DATA_INNER_FOLDER_DATA}/${DOCKER_STARK_SERVICE_DATA_SUBFOLDER_SOURCES}:ro
            - analyses-STARK-service-igv:${DOCKER_STARK_SERVICE_DATA_INNER_FOLDER_DATA}/${DOCKER_STARK_SERVICE_DATA_SUBFOLDER_SERVICES_IGV}:ro
        restart: always
        networks:
            - stark


    # STARK SERVICE DASHBOARD
    stark-service-dashboard:
        image: ${DOCKER_STARK_SERVICE_DASHBOARD_IMAGE}
        build:
            context: ${DOCKER_STARK_SERVICE_DASHBOARD_CONTEXT}
            dockerfile: Dockerfile
        container_name: ${DOCKER_STARK_SERVICE_DASHBOARD_CONTAINER_NAME}
        restart: always
        env_file:
            - .env
        ports:
            - ${DOCKER_STARK_SERVICE_PORT_PATTERN}${DOCKER_STARK_SERVICE_DASHBOARD_PORT}:${DOCKER_STARK_SERVICE_DASHBOARD_PORT_INNER}
        volumes:
            # Data folders available (need to be coherent with STARK-service-data)
            - input:${DOCKER_STARK_SERVICE_DASHBOARD_INNER_FOLDER}/${DOCKER_STARK_SERVICE_DATA_SUBFOLDER_INPUTS}/Input:ro
            - repository:${DOCKER_STARK_SERVICE_DASHBOARD_INNER_FOLDER}/${DOCKER_STARK_SERVICE_DATA_SUBFOLDER_REPOSITORIES}/Repository:ro
            - archive:${DOCKER_STARK_SERVICE_DASHBOARD_INNER_FOLDER}/${DOCKER_STARK_SERVICE_DATA_SUBFOLDER_REPOSITORIES}/Archive:ro
            # Available on system only
            - analyses-STARK-service-launcher:${DOCKER_STARK_SERVICE_DATA_INNER_FOLDER_DATA}/${DOCKER_STARK_SERVICE_DATA_SUBFOLDER_SERVICES_LAUNCHER}:rw
            - analyses-STARK-service-listener:${DOCKER_STARK_SERVICE_DATA_INNER_FOLDER_DATA}/${DOCKER_STARK_SERVICE_DATA_SUBFOLDER_SERVICES_LISTENER}:rw
            - analyses-STARK-service-igv:${DOCKER_STARK_SERVICE_DATA_INNER_FOLDER_DATA}/${DOCKER_STARK_SERVICE_DATA_SUBFOLDER_SERVICES_IGV}:rw
        restart: always
        links:
            - stark-service-data
            - stark-service-igv
            - stark-service-launcher
            - stark-service-cloud
        depends_on:
            - stark-service-data
            - stark-service-igv
            - stark-service-launcher
            - stark-service-cloud

        networks:
            - stark


    # STARK SERVICE CLOUD
    stark-service-cloud:
        image: ${DOCKER_STARK_SERVICE_CLOUD_IMAGE}
        container_name: ${DOCKER_STARK_SERVICE_CLOUD_CONTAINER_NAME}
        command: -r ${DOCKER_STARK_SERVICE_CLOUD_INNER_FOLDER_DATA}
        #command:  -d ${DOCKER_STARK_SERVICE_CLOUD_INNER_FOLDER_CONFIG}/filebrowser.db -c ${DOCKER_STARK_SERVICE_CLOUD_INNER_FOLDER_CONFIG}/.filebrowser.json -r ${DOCKER_STARK_SERVICE_CLOUD_INNER_FOLDER_DATA}
        restart: always
        env_file:
            - .env
        ports:
            - ${DOCKER_STARK_SERVICE_PORT_PATTERN}${DOCKER_STARK_SERVICE_CLOUD_PORT}:${DOCKER_STARK_SERVICE_CLOUD_PORT_INNER}
        volumes:
            # Volumes for configuration
            #- ${DOCKER_STARK_SERVICE_CLOUD_FOLDER_CONFIG}:${DOCKER_STARK_SERVICE_CLOUD_INNER_FOLDER_CONFIG}:rw
            #- ${DOCKER_STARK_SERVICE_CLOUD_FOLDER_USERS}:${DOCKER_STARK_SERVICE_CLOUD_INNER_FOLDER_USERS}:rw
            #- ${DOCKER_STARK_SERVICE_CLOUD_FOLDER_DATA}:${DOCKER_STARK_SERVICE_CLOUD_INNER_FOLDER_DATA}:rw
            - analyses-STARK-service-cloud:${DOCKER_STARK_SERVICE_CLOUD_INNER_FOLDER}:rw
            # Data available on the cloud (no link with service data)
            - input:${DOCKER_STARK_SERVICE_CLOUD_INNER_FOLDER_DATA}/Input:ro
            - repository:${DOCKER_STARK_SERVICE_CLOUD_INNER_FOLDER_DATA}/Repository:ro
            - archive:${DOCKER_STARK_SERVICE_CLOUD_INNER_FOLDER_DATA}/Archive:ro
        restart: always
        networks:
            - stark


    # STARK SERVICE IGV
    stark-service-igv:
        image: ${DOCKER_STARK_SERVICE_IGV_IMAGE}
        build:
            context: ${DOCKER_STARK_SERVICE_IGV_CONTEXT}
            dockerfile: Dockerfile
        container_name: ${DOCKER_STARK_SERVICE_IGV_CONTAINER_NAME}
        restart: always
        env_file:
            - .env
        ports:
            - ${DOCKER_STARK_SERVICE_PORT_PATTERN}${DOCKER_STARK_SERVICE_IGV_PORT}:${DOCKER_STARK_SERVICE_IGV_PORT_INNER}
        restart: always
        networks:
            - stark


    # STARK SERVICE SERVER
    stark-service-launcher:
        image: ${DOCKER_STARK_SERVICE_LAUNCHER_IMAGE}
        build:
            context: ${DOCKER_STARK_SERVICE_LAUNCHER_CONTEXT}
            dockerfile: Dockerfile
        container_name: ${DOCKER_STARK_SERVICE_LAUNCHER_CONTAINER_NAME}
        env_file:
            - .env
        environment:
            - TS=ts
            - TS_SOCKET=${TASK_SPOOLER_TS_SOCKET}
            - TS_SAVELIST=${TASK_SPOOLER_TS_SAVELIST}
        ports:
            - ${DOCKER_STARK_SERVICE_PORT_PATTERN}${DOCKER_STARK_SERVICE_LAUNCHER_PORT}:${DOCKER_STARK_SERVICE_LAUNCHER_PORT_INNER}
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock
            #- analyses:${DOCKER_STARK_INNER_FOLDER_ANALYSES}:rw
            #- analyses:${DOCKER_STARK_MAIN_FOLDER}/${DOCKER_STARK_SERVICE_LISTENER_FOLDER_LOG}:rw
            - analyses-STARK-service-launcher:${TASK_SPOOLER_TS_SAVELIST}:rw
            - analyses-STARK-service-launcher:${DOCKER_STARK_INNER_FOLDER_ANALYSES}/${DOCKER_STARK_SERVICE_DATA_SUBFOLDER_SERVICES_LAUNCHER}:rw
        restart: always
        links:
            - stark
            - stark-databases
        depends_on:
            - stark
            - stark-databases
        networks:
            - stark


    # STARK SERVICE SERVER
    stark-service-listener:
        image: ${DOCKER_STARK_IMAGE}
        entrypoint: /tool/bin/STARK.listener
        #command: --no_header --command="STARK" --days=${DOCKER_STARK_SERVICE_LISTENER_DAYS} --condition="${DOCKER_STARK_SERVICE_LISTENER_CONDITION}" --exec
        #command: --no_header --command="LAUNCHER" --launcher="http://stark-service-launcher:${DOCKER_STARK_SERVICE_LAUNCHER_PORT_INNER}/analysis" --days=${DOCKER_STARK_SERVICE_LISTENER_DAYS} --condition="${DOCKER_STARK_SERVICE_LISTENER_CONDITION}" --exec
        #command: --no_header --command="DOCKER" --docker-stark-image=${DOCKER_STARK_IMAGE} --days=${DOCKER_STARK_SERVICE_LISTENER_DAYS} --condition="${DOCKER_STARK_SERVICE_LISTENER_CONDITION}" --exec
        command: --no_header --command="LAUNCHER" --launcher="http://stark-service-launcher:${DOCKER_STARK_SERVICE_LAUNCHER_PORT_INNER}/analysis" --days=${DOCKER_STARK_SERVICE_LISTENER_DAYS} --condition="${DOCKER_STARK_SERVICE_LISTENER_CONDITION}" --exec --daemon --daemon-periodicity=${DOCKER_STARK_SERVICE_LISTENER_DAEMON_PERIODICITY} --log=${DOCKER_STARK_INNER_FOLDER_ANALYSES}/${DOCKER_STARK_SERVICE_DATA_SUBFOLDER_SERVICES_LISTENER}
        container_name: ${DOCKER_STARK_SERVICE_LISTENER_CONTAINER_NAME}
        env_file:
            - .env
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock
            - databases:${DOCKER_STARK_INNER_FOLDER_DATABASES}:ro
            - input:${DOCKER_STARK_INNER_FOLDER_INPUT}:ro
            - repository:${DOCKER_STARK_INNER_FOLDER_OUTPUT_REPOSITORY}:rw
            - archive:${DOCKER_STARK_INNER_FOLDER_OUTPUT_ARCHIVE}:rw
            - analyses-STARK-service-listener:${DOCKER_STARK_INNER_FOLDER_ANALYSES}/${DOCKER_STARK_SERVICE_DATA_SUBFOLDER_SERVICES_LISTENER}:rw
            - analyses-STARK-service-launcher:${DOCKER_STARK_INNER_FOLDER_ANALYSES}/${DOCKER_STARK_SERVICE_DATA_SUBFOLDER_SERVICES_LAUNCHER}:rw
        restart: always
        links:
            - stark-service-launcher
            - stark
            - stark-databases
        depends_on:
            - stark-service-launcher
            - stark
            - stark-databases
        networks:
            - stark


    # # STARK SERVICE SOURCES
    # stark-service-sources:
    #     image: ${DOCKER_STARK_SERVICE_SOURCES_IMAGE}
    #     container_name: ${DOCKER_STARK_SERVICE_SOURCES_CONTAINER_NAME}
    #     restart: always
    #     env_file:
    #         - .env
    #     ports:
    #         - ${DOCKER_STARK_SERVICE_PORT_PATTERN}${DOCKER_STARK_SERVICE_SOURCES_PORT}:${DOCKER_STARK_SERVICE_SOURCES_PORT_INNER}
    #     volumes:
    #         - sources:/usr/local/apache2/htdocs/
    #     restart: always
    #     depends_on:
    #         - stark-sources
    #     networks:
    #         - stark


    ###########
    ### DEV ###
    ############

    # STARK SERVICE DASHBOARD
    stark-service-dashboard-dev:
        image: ${DOCKER_STARK_SERVICE_DASHBOARD_IMAGE}
        build:
            context: ${DOCKER_STARK_SERVICE_DASHBOARD_CONTEXT}
            dockerfile: Dockerfile
        container_name: ${DOCKER_STARK_SERVICE_DASHBOARD_CONTAINER_NAME}-dev
        restart: always
        env_file:
            - .env
        ports:
            - ${DOCKER_STARK_SERVICE_PORT_PATTERN}${DOCKER_STARK_SERVICE_DASHBOARD_PORT}2:${DOCKER_STARK_SERVICE_DASHBOARD_PORT_INNER}
        volumes:
            - /Users/lebechea/Documents/NGS/GIT/Strasbourg/STARK/services/dashboard:/app/:rw
            # Available on browser reports
            - input:${DOCKER_STARK_SERVICE_DASHBOARD_INNER_FOLDER}/${DOCKER_STARK_SERVICE_DATA_SUBFOLDER_INPUTS}/Input:ro
            - repository:${DOCKER_STARK_SERVICE_DASHBOARD_INNER_FOLDER}/${DOCKER_STARK_SERVICE_DATA_SUBFOLDER_REPOSITORIES}/Repository:ro
            - archive:${DOCKER_STARK_SERVICE_DASHBOARD_INNER_FOLDER}/${DOCKER_STARK_SERVICE_DATA_SUBFOLDER_REPOSITORIES}/Archive:ro
            # Available on system only
            - analyses-STARK-service-launcher:${DOCKER_STARK_SERVICE_DATA_INNER_FOLDER_DATA}/${DOCKER_STARK_SERVICE_DATA_SUBFOLDER_SERVICES_LAUNCHER}:rw
            - analyses-STARK-service-listener:${DOCKER_STARK_SERVICE_DATA_INNER_FOLDER_DATA}/${DOCKER_STARK_SERVICE_DATA_SUBFOLDER_SERVICES_LISTENER}:rw
            - analyses-STARK-service-igv:${DOCKER_STARK_SERVICE_DATA_INNER_FOLDER_DATA}/${DOCKER_STARK_SERVICE_DATA_SUBFOLDER_SERVICES_IGV}:rw
        restart: always
        links:
            - stark-service-data
            - stark-service-igv
            - stark-service-launcher
            - stark-service-cloud
        depends_on:
            - stark-service-data
            - stark-service-igv
            - stark-service-launcher
            - stark-service-cloud
        networks:
            - stark


# VOLUMES
#########

volumes:

    # INPUT
    input:
        driver: local
        driver_opts:
            type: none
            device: ${DOCKER_STARK_MAIN_FOLDER}/${DOCKER_STARK_FOLDER_INPUT}
            o: bind

    # DEMULTIPLEXING
    # demultiplexing:
    #     driver: local
    #     driver_opts:
    #         type: none
    #         device: ${DOCKER_STARK_FOLDER_OUTPUT_DEMULTIPLEXING}
    #         o: bind

    # REPOSITORY
    repository:
        driver: local
        driver_opts:
            type: none
            device: ${DOCKER_STARK_MAIN_FOLDER}/${DOCKER_STARK_FOLDER_OUTPUT_REPOSITORY}
            o: bind

    # ARCHIVE
    archive:
        driver: local
        driver_opts:
            type: none
            device: ${DOCKER_STARK_MAIN_FOLDER}/${DOCKER_STARK_FOLDER_OUTPUT_ARCHIVE}
            o: bind

    # SOURCES
    sources:
        driver: local
        driver_opts:
            type: none
            device: ${DOCKER_STARK_MAIN_FOLDER}/${DOCKER_STARK_FOLDER_SOURCES}
            o: bind

    # ANALYSES
    analyses:
        driver: local
        driver_opts:
            type: none
            device: ${DOCKER_STARK_MAIN_FOLDER}/${DOCKER_STARK_FOLDER_ANALYSES}
            o: bind

    # ANALYSES - Launcher
    analyses-STARK-service-launcher:
        driver: local
        driver_opts:
            type: none
            device: ${DOCKER_STARK_MAIN_FOLDER}/${DOCKER_STARK_SERVICE_LAUNCHER_FOLDER_LOG}
            o: bind

    # ANALYSES - Listener
    analyses-STARK-service-listener:
        driver: local
        driver_opts:
            type: none
            device: ${DOCKER_STARK_MAIN_FOLDER}/${DOCKER_STARK_SERVICE_LISTENER_FOLDER_LOG}
            o: bind

    # ANALYSES - IGV
    analyses-STARK-service-igv:
        driver: local
        driver_opts:
            type: none
            device: ${DOCKER_STARK_MAIN_FOLDER}/${DOCKER_STARK_SERVICE_IGV_FOLDER_LOG}
            o: bind

    # ANALYSES - CLOUD
    analyses-STARK-service-cloud:
        driver: local
        driver_opts:
            type: none
            device: ${DOCKER_STARK_MAIN_FOLDER}/${DOCKER_STARK_SERVICE_CLOUD_FOLDER}
            o: bind

    # LOG
    log:
        driver: local
        driver_opts:
            type: none
            device: ${DOCKER_STARK_MAIN_FOLDER}/${DOCKER_STARK_FOLDER_OUTPUT_LOG}
            o: bind

    # DATABASES
    databases:
        driver: local
        driver_opts:
            type: none
            device: ${DOCKER_STARK_MAIN_FOLDER}/${DOCKER_STARK_FOLDER_DATABASES}
            o: bind

# NETWORK
###########

networks:
    stark:
