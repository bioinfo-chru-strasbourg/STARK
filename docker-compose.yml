#########
# STARK #
#########
# Usage: docker-compose up

version: '3'

# SERVICES
##########

services:

    # STARK IMAGES
    ##############

    # STARK BASE IMAGE
    stark-base:
        image: ${DOCKER_STARK_IMAGE_BASE}
        build:
            context: ${DOCKER_STARK_CONTEXT}
            #dockerfile: base.Dockerfile
            dockerfile: base.Dockerfile
            args:
                - REMOVE_SOURCES=1
                - REPO=${DOCKER_STARK_BUILD_REPO_URL}
        container_name: STARK-base
        env_file:
            - .env

    # STARK REPO
    stark-repo:
        image: ${DOCKER_STARK_IMAGE_REPO}
        build:
            context: ${DOCKER_STARK_CONTEXT}
            #dockerfile: base.Dockerfile
            dockerfile: base.Dockerfile
            args:
                - REMOVE_SOURCES=0
                - REPO=${DOCKER_STARK_BUILD_REPO_URL}
        entrypoint: bash
        command: -c "find /STARK/sources/sources/ -maxdepth 3 -mindepth 1 -type d"
        container_name: STARK-repo
        env_file:
            - .env

    # STARK IMAGE
    stark:
        image: ${DOCKER_STARK_IMAGE}
        build:
            context: ${DOCKER_STARK_CONTEXT}
            dockerfile: Dockerfile
            args:
                - DOCKER_STARK_IMAGE_BASE=${DOCKER_STARK_IMAGE_BASE}
        container_name: STARK
        command: --help
        env_file:
            - .env
        links:
            - stark-base
            - stark-repo
        depends_on:
            - stark-base
            - stark-repo

    # STARK DATABASES POPULATION
    stark-databases:
        image: ${DOCKER_STARK_IMAGE}
        entrypoint: /tool/bin/get_databases.sh
        command: --build --threads=${DOCKER_STARK_GET_DATABASES_THREADS} --additional_annotations=${DOCKER_STARK_GET_DATABASES_ADDITIONAL_ANNOTATIONS}
        container_name: STARK-databases
        volumes:
            - databases:/STARK/databases
        links:
            - stark
        depends_on:
            - stark


    # SERVICES
    ##########

    # STARK SERVICE SERVER
    stark-service-launcher:
        image: ${DOCKER_STARK_SERVICE_LAUNCHER_IMAGE}
        build:
            context: ${DOCKER_STARK_SERVICE_LAUNCHER_CONTEXT}
            dockerfile: Dockerfile
        container_name: STARK-service-launcher
        env_file:
            - .env
        environment:
            - TS=ts
            #- TS_SOCKET=${TASK_SPOOLER_TS_SOCKET}
            - TS_SAVELIST=${TASK_SPOOLER_TS_SAVELIST}
        ports:
            - ${DOCKER_STARK_SERVICE_PORT_PATTERN}${DOCKER_STARK_SERVICE_LAUNCHER_PORT}:${DOCKER_STARK_SERVICE_LAUNCHER_PORT_INNER}
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock
            - analyses:${DOCKER_STARK_INNER_FOLDER_ANALYSES}:rw
            - analyses-STARK-service-launcher:${TASK_SPOOLER_TS_SAVELIST}:rw
        restart: always
        links:
            - stark
            - stark-databases
        depends_on:
            - stark
            - stark-databases


    # STARK SERVICE SERVER
    stark-service-listener:
        image: ${DOCKER_STARK_IMAGE}
        entrypoint: /tool/bin/STARK.listener
        #command: --no_header --command="STARK" --days=${DOCKER_STARK_SERVICE_LISTENER_DAYS} --condition="${DOCKER_STARK_SERVICE_LISTENER_CONDITION}" --exec
        #command: --no_header --command="LAUNCHER" --launcher="http://stark-service-launcher:${DOCKER_STARK_SERVICE_LAUNCHER_PORT_INNER}/analysis" --days=${DOCKER_STARK_SERVICE_LISTENER_DAYS} --condition="${DOCKER_STARK_SERVICE_LISTENER_CONDITION}" --exec
        #command: --no_header --command="DOCKER" --docker-stark-image=${DOCKER_STARK_IMAGE} --days=${DOCKER_STARK_SERVICE_LISTENER_DAYS} --condition="${DOCKER_STARK_SERVICE_LISTENER_CONDITION}" --exec
        command: --no_header --command="LAUNCHER" --launcher="http://stark-service-launcher:${DOCKER_STARK_SERVICE_LAUNCHER_PORT_INNER}/analysis" --days=${DOCKER_STARK_SERVICE_LISTENER_DAYS} --condition="${DOCKER_STARK_SERVICE_LISTENER_CONDITION}" --exec --daemon --daemon-periodicity=${DOCKER_STARK_SERVICE_LISTENER_DAEMON_PERIODICITY}

        container_name: STARK-service-listener
        env_file:
            - .env
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock
            - databases:${DOCKER_STARK_INNER_FOLDER_DATABASES}:ro
            - input:${DOCKER_STARK_INNER_FOLDER_INPUT}:ro
            - repository:${DOCKER_STARK_INNER_FOLDER_OUTPUT_REPOSITORY}:rw
            - archive:${DOCKER_STARK_INNER_FOLDER_OUTPUT_ARCHIVE}:rw
            - analyses-STARK-service-listener:${DOCKER_STARK_INNER_FOLDER_OUTPUT_LOG}:rw
        restart: always
        links:
            - stark-service-launcher
            - stark
            - stark-databases
        depends_on:
            - stark-service-launcher
            - stark
            - stark-databases

    # STARK SERVICE REPO
    stark-service-repo:
        image: ${DOCKER_STARK_SERVICE_REPO_IMAGE}
        container_name: STARK-service-repo
        restart: always
        env_file:
            - .env
        ports:
            - ${DOCKER_STARK_SERVICE_PORT_PATTERN}${DOCKER_STARK_SERVICE_REPO_PORT}:${DOCKER_STARK_SERVICE_REPO_PORT_INNER}
        volumes:
            - ${DOCKER_STARK_SERVICE_REPO_FOLDER}:/usr/local/apache2/htdocs/
        restart: always
        depends_on:
            - stark-repo


    # STARK SERVICE BROWSER
    stark-service-browser:
        image: ${DOCKER_STARK_SERVICE_BROWSER_IMAGE}
        container_name: STARK-service-browser
        #command:  -d ${DOCKER_STARK_SERVICE_BROWSER_INNER_FOLDER_CONFIG}/filebrowser.db -c ${DOCKER_STARK_SERVICE_BROWSER_INNER_FOLDER_CONFIG}/.filebrowser.json -r ${DOCKER_STARK_SERVICE_BROWSER_INNER_FOLDER_DATA}
        command: -r ${DOCKER_STARK_SERVICE_BROWSER_INNER_FOLDER_DATA}
        restart: always
        env_file:
            - .env
        ports:
            - ${DOCKER_STARK_SERVICE_PORT_PATTERN}${DOCKER_STARK_SERVICE_BROWSER_PORT}:${DOCKER_STARK_SERVICE_BROWSER_PORT_INNER}
        volumes:
            - ${DOCKER_STARK_SERVICE_BROWSER_FOLDER_CONFIG}:${DOCKER_STARK_SERVICE_BROWSER_INNER_FOLDER_CONFIG}:rw
            - ${DOCKER_STARK_SERVICE_BROWSER_FOLDER_DATA}:${DOCKER_STARK_SERVICE_BROWSER_INNER_FOLDER_DATA}:rw
            - ${DOCKER_STARK_SERVICE_BROWSER_FOLDER_USERS}:${DOCKER_STARK_SERVICE_BROWSER_INNER_FOLDER_USERS}:rw
            - input:${DOCKER_STARK_SERVICE_BROWSER_INNER_FOLDER_DATA}/raw:ro
            - repository:${DOCKER_STARK_SERVICE_BROWSER_INNER_FOLDER_DATA}/repository:ro
            - archive:${DOCKER_STARK_SERVICE_BROWSER_INNER_FOLDER_DATA}/archives:ro
        restart: always


        # # STARK SERVICE SERVER CENTOS
        # stark-service-launcher-centos:
        #     image: ${DOCKER_STARK_SERVICE_LAUNCHER_IMAGE}-centos
        #     build:
        #         context: ${DOCKER_STARK_SERVICE_LAUNCHER_CONTEXT}
        #         dockerfile: centos.Dockerfile
        #     container_name: STARK-service-launcher-centos
        #     env_file:
        #         - .env
        #     environment:
        #         - TS_SOCKET=${TASK_SPOOLER_TS_SOCKET}
        #         - TS_SAVELIST=${TASK_SPOOLER_TS_SAVELIST}
        #     ports:
        #         - ${DOCKER_STARK_SERVICE_PORT_PATTERN}${DOCKER_STARK_SERVICE_LAUNCHER_PORT}2:${DOCKER_STARK_SERVICE_LAUNCHER_PORT_INNER}
        #     volumes:
        #         - /var/run/docker.sock:/var/run/docker.sock
        #         - analyses:/STARK/analyses
        #     links:
        #         - stark
        #         - stark-databases
        #     restart: always

        # # STARK SERVICE EXPLORER
        # stark-server-explorer:
        #     image: ${DOCKER_STARK_SERVICE_EXPLORER_IMAGE}
        #     container_name: STARK-service-explorer
        #     restart: always
        #     env_file:
        #         - .env
        #     ports:
        #         - ${DOCKER_STARK_SERVICE_PORT_PATTERN}${DOCKER_STARK_SERVICE_EXPLORER_PORT}:${DOCKER_STARK_SERVICE_EXPLORER_PORT_INNER}
        #     volumes:
        #         - ${DOCKER_STARK_FOLDER_OUTPUT_REPOSITORY}:/usr/local/apache2/htdocs/
        #     restart: always


# VOLUMES
#########

volumes:

    # INPUT
    input:
        driver: local
        driver_opts:
            type: none
            device: ${DOCKER_STARK_FOLDER_INPUT}
            o: bind

    # DEMULTIPLEXING
    # demultiplexing:
    #     driver: local
    #     driver_opts:
    #         type: none
    #         device: ${DOCKER_STARK_FOLDER_OUTPUT_DEMULTIPLEXING}
    #         o: bind

    # REPOSITORY
    repository:
        driver: local
        driver_opts:
            type: none
            device: ${DOCKER_STARK_FOLDER_OUTPUT_REPOSITORY}
            o: bind

    # ARCHIVE
    archive:
        driver: local
        driver_opts:
            type: none
            device: ${DOCKER_STARK_FOLDER_OUTPUT_ARCHIVE}
            o: bind

    # ANALYSES
    analyses:
        driver: local
        driver_opts:
            type: none
            device: ${DOCKER_STARK_FOLDER_ANALYSES}
            o: bind

    # ANALYSES - Launcher
    analyses-STARK-service-launcher:
        driver: local
        driver_opts:
            type: none
            device: ${DOCKER_STARK_SERVICE_LAUNCHER_FOLDER_LOG}
            o: bind

    # ANALYSES - Listener
    analyses-STARK-service-listener:
        driver: local
        driver_opts:
            type: none
            device: ${DOCKER_STARK_SERVICE_LISTENER_FOLDER_LOG}
            o: bind
    # LOG
    log:
        driver: local
        driver_opts:
            type: none
            device: ${DOCKER_STARK_FOLDER_OUTPUT_LOG}
            o: bind

    # DATABASES
    databases:
        driver: local
        driver_opts:
            type: none
            device: ${DOCKER_STARK_FOLDER_DATABASES}
            o: bind
